
maze.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cc8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009a  00800060  00002cc8  00002d5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000005b4  008000fa  008000fa  00002df6  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00002df6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000357  00000000  00000000  00002e16  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001243  00000000  00000000  0000316d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ee  00000000  00000000  000043b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000223f  00000000  00000000  0000469e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000230  00000000  00000000  000068e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002cc  00000000  00000000  00006b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c91  00000000  00000000  00006ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000528  00000000  00000000  00007a6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3f       	cpi	r26, 0xFA	; 250
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	16 e0       	ldi	r17, 0x06	; 6
      78:	aa ef       	ldi	r26, 0xFA	; 250
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3a       	cpi	r26, 0xAE	; 174
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 81 15 	call	0x2b02	; 0x2b02 <main>
      8a:	0c 94 62 16 	jmp	0x2cc4	; 0x2cc4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <delay_us>:
void lcd_gotoxy2(unsigned char pos);
void delay_ms(unsigned int ms);
void lcd_clear();

void delay_us(unsigned int time)
{
      92:	ac 01       	movw	r20, r24
      94:	30 91 fa 00 	lds	r19, 0x00FA
      98:	20 e0       	ldi	r18, 0x00	; 0
      9a:	02 c0       	rjmp	.+4      	; 0xa0 <delay_us+0xe>
	for(j=0;j<time;j++)
      9c:	2f 5f       	subi	r18, 0xFF	; 255
      9e:	3a e0       	ldi	r19, 0x0A	; 10
      a0:	82 2f       	mov	r24, r18
      a2:	90 e0       	ldi	r25, 0x00	; 0
      a4:	84 17       	cp	r24, r20
      a6:	95 07       	cpc	r25, r21
      a8:	c8 f3       	brcs	.-14     	; 0x9c <delay_us+0xa>
      aa:	30 93 fa 00 	sts	0x00FA, r19
      ae:	20 93 fb 00 	sts	0x00FB, r18
	{
		for(k=0;k<10;k++)
		{};
	}
}
      b2:	08 95       	ret

000000b4 <delay_ns>:
	delay_ns(200);  
	PORTC&=~0x04;
}

void delay_ns(unsigned char tim)
{
      b4:	20 91 fa 00 	lds	r18, 0x00FA
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <delay_ns+0xc>
	for(j=0;j<tim;j++)
      bc:	9f 5f       	subi	r25, 0xFF	; 255
      be:	2b e0       	ldi	r18, 0x0B	; 11
      c0:	98 17       	cp	r25, r24
      c2:	e0 f3       	brcs	.-8      	; 0xbc <delay_ns+0x8>
      c4:	20 93 fa 00 	sts	0x00FA, r18
      c8:	90 93 fb 00 	sts	0x00FB, r25
	{
		for(k=0;k<11;k++)
		{};
	}
}
      cc:	08 95       	ret

000000ce <latch>:
	delay_ms(20);
}

void latch(void)
{
	PORTC&=~0x04;
      ce:	aa 98       	cbi	0x15, 2	; 21
	delay_ns(200);  
      d0:	88 ec       	ldi	r24, 0xC8	; 200
      d2:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ns>
	PORTC|=0x04;
      d6:	aa 9a       	sbi	0x15, 2	; 21
	delay_ns(200);  
      d8:	88 ec       	ldi	r24, 0xC8	; 200
      da:	0e 94 5a 00 	call	0xb4	; 0xb4 <delay_ns>
	PORTC&=~0x04;
      de:	aa 98       	cbi	0x15, 2	; 21
}
      e0:	08 95       	ret

000000e2 <lcd_cmd>:
		{};
	}
}

void lcd_cmd(unsigned char cmd)
{
      e2:	0f 93       	push	r16
      e4:	1f 93       	push	r17
      e6:	08 2f       	mov	r16, r24
	PORTC&=~0x07;
      e8:	85 b3       	in	r24, 0x15	; 21
      ea:	88 7f       	andi	r24, 0xF8	; 248
      ec:	85 bb       	out	0x15, r24	; 21
	PORTC=((cmd&0xF0));			
      ee:	80 2f       	mov	r24, r16
      f0:	80 7f       	andi	r24, 0xF0	; 240
      f2:	85 bb       	out	0x15, r24	; 21
	latch();
      f4:	0e 94 67 00 	call	0xce	; 0xce <latch>
	PORTC=(((cmd&(0x0F))*16));	
      f8:	10 e0       	ldi	r17, 0x00	; 0
      fa:	0f 70       	andi	r16, 0x0F	; 15
      fc:	10 70       	andi	r17, 0x00	; 0
      fe:	84 e0       	ldi	r24, 0x04	; 4
     100:	00 0f       	add	r16, r16
     102:	11 1f       	adc	r17, r17
     104:	8a 95       	dec	r24
     106:	e1 f7       	brne	.-8      	; 0x100 <lcd_cmd+0x1e>
     108:	05 bb       	out	0x15, r16	; 21
	latch();
     10a:	0e 94 67 00 	call	0xce	; 0xce <latch>
}
     10e:	1f 91       	pop	r17
     110:	0f 91       	pop	r16
     112:	08 95       	ret

00000114 <lcd_char>:

void lcd_char(unsigned char single)
{
     114:	1f 93       	push	r17
     116:	18 2f       	mov	r17, r24
	PORTC=0x01;
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	85 bb       	out	0x15, r24	; 21
	PORTC=0x00;
     11c:	15 ba       	out	0x15, r1	; 21
	PORTC=(single&0xF0)|0x01;						
     11e:	81 2f       	mov	r24, r17
     120:	80 7f       	andi	r24, 0xF0	; 240
     122:	81 60       	ori	r24, 0x01	; 1
     124:	85 bb       	out	0x15, r24	; 21
	latch();
     126:	0e 94 67 00 	call	0xce	; 0xce <latch>
	PORTC=((single&(0x0F))*16)|0x01;
     12a:	12 95       	swap	r17
     12c:	10 7f       	andi	r17, 0xF0	; 240
     12e:	11 60       	ori	r17, 0x01	; 1
     130:	15 bb       	out	0x15, r17	; 21
	latch();
     132:	0e 94 67 00 	call	0xce	; 0xce <latch>
}
     136:	1f 91       	pop	r17
     138:	08 95       	ret

0000013a <lcd_string>:

void lcd_string(unsigned char str[32])
{
     13a:	ef 92       	push	r14
     13c:	ff 92       	push	r15
     13e:	1f 93       	push	r17
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
     144:	7c 01       	movw	r14, r24
	unsigned char k=0;
	PORTC=0x01;
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	85 bb       	out	0x15, r24	; 21
	PORTC=0X00;
     14a:	15 ba       	out	0x15, r1	; 21
     14c:	10 e0       	ldi	r17, 0x00	; 0
     14e:	13 c0       	rjmp	.+38     	; 0x176 <lcd_string+0x3c>

	while(str[k]!='\0')	//Till null character is encountered
	{
		if(k==16)
     150:	10 31       	cpi	r17, 0x10	; 16
     152:	19 f4       	brne	.+6      	; 0x15a <lcd_string+0x20>
		lcd_cmd(0XC0);
     154:	80 ec       	ldi	r24, 0xC0	; 192
     156:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_cmd>
		PORTC=((str[k])&0xF0)|0x01;
     15a:	88 81       	ld	r24, Y
     15c:	80 7f       	andi	r24, 0xF0	; 240
     15e:	81 60       	ori	r24, 0x01	; 1
     160:	85 bb       	out	0x15, r24	; 21
		latch();
     162:	0e 94 67 00 	call	0xce	; 0xce <latch>
		PORTC=((str[k]&(0x0F))*16)|0x01;
     166:	88 81       	ld	r24, Y
     168:	82 95       	swap	r24
     16a:	80 7f       	andi	r24, 0xF0	; 240
     16c:	81 60       	ori	r24, 0x01	; 1
     16e:	85 bb       	out	0x15, r24	; 21
		latch();
     170:	0e 94 67 00 	call	0xce	; 0xce <latch>
		k++;
     174:	1f 5f       	subi	r17, 0xFF	; 255
{
	unsigned char k=0;
	PORTC=0x01;
	PORTC=0X00;

	while(str[k]!='\0')	//Till null character is encountered
     176:	e7 01       	movw	r28, r14
     178:	c1 0f       	add	r28, r17
     17a:	d1 1d       	adc	r29, r1
     17c:	88 81       	ld	r24, Y
     17e:	88 23       	and	r24, r24
     180:	39 f7       	brne	.-50     	; 0x150 <lcd_string+0x16>
		latch();
		PORTC=((str[k]&(0x0F))*16)|0x01;
		latch();
		k++;
	}
}
     182:	df 91       	pop	r29
     184:	cf 91       	pop	r28
     186:	1f 91       	pop	r17
     188:	ff 90       	pop	r15
     18a:	ef 90       	pop	r14
     18c:	08 95       	ret

0000018e <lcd_showvalue>:

void lcd_showvalue(unsigned char num)	//prints the decimal 3digit value of num
{
     18e:	ef 92       	push	r14
     190:	ff 92       	push	r15
     192:	0f 93       	push	r16
     194:	1f 93       	push	r17
     196:	18 2f       	mov	r17, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
     198:	64 e6       	ldi	r22, 0x64	; 100
     19a:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <__udivmodqi4>
     19e:	48 2f       	mov	r20, r24
	T=(num - (H*100))/10;
     1a0:	28 2f       	mov	r18, r24
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	8c e9       	ldi	r24, 0x9C	; 156
     1a6:	9f ef       	ldi	r25, 0xFF	; 255
     1a8:	28 9f       	mul	r18, r24
     1aa:	70 01       	movw	r14, r0
     1ac:	29 9f       	mul	r18, r25
     1ae:	f0 0c       	add	r15, r0
     1b0:	38 9f       	mul	r19, r24
     1b2:	f0 0c       	add	r15, r0
     1b4:	11 24       	eor	r1, r1
     1b6:	c7 01       	movw	r24, r14
     1b8:	81 0f       	add	r24, r17
     1ba:	91 1d       	adc	r25, r1
     1bc:	6a e0       	ldi	r22, 0x0A	; 10
     1be:	70 e0       	ldi	r23, 0x00	; 0
     1c0:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <__divmodhi4>
     1c4:	06 2f       	mov	r16, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+48);
     1c6:	84 2f       	mov	r24, r20
     1c8:	80 5d       	subi	r24, 0xD0	; 208
     1ca:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_char>
	lcd_char(T+48);
     1ce:	80 2f       	mov	r24, r16
     1d0:	80 5d       	subi	r24, 0xD0	; 208
     1d2:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_char>
	lcd_char(O+48);
     1d6:	10 5d       	subi	r17, 0xD0	; 208
     1d8:	1e 0d       	add	r17, r14
     1da:	86 ef       	ldi	r24, 0xF6	; 246
     1dc:	9f ef       	ldi	r25, 0xFF	; 255
     1de:	08 9f       	mul	r16, r24
     1e0:	00 2d       	mov	r16, r0
     1e2:	11 24       	eor	r1, r1
     1e4:	80 2f       	mov	r24, r16
     1e6:	81 0f       	add	r24, r17
     1e8:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_char>
}
     1ec:	1f 91       	pop	r17
     1ee:	0f 91       	pop	r16
     1f0:	ff 90       	pop	r15
     1f2:	ef 90       	pop	r14
     1f4:	08 95       	ret

000001f6 <lcd_showvalue1>:

void lcd_showvalue1(unsigned char num)	//prints the decimal 2digit value of num
{
     1f6:	ef 92       	push	r14
     1f8:	ff 92       	push	r15
     1fa:	0f 93       	push	r16
     1fc:	1f 93       	push	r17
     1fe:	08 2f       	mov	r16, r24
	unsigned char H=0, T=0,O=0;
        H = num/100;
	T=(num - (H*100))/10;
     200:	64 e6       	ldi	r22, 0x64	; 100
     202:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <__udivmodqi4>
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	2c e9       	ldi	r18, 0x9C	; 156
     20a:	3f ef       	ldi	r19, 0xFF	; 255
     20c:	82 9f       	mul	r24, r18
     20e:	70 01       	movw	r14, r0
     210:	83 9f       	mul	r24, r19
     212:	f0 0c       	add	r15, r0
     214:	92 9f       	mul	r25, r18
     216:	f0 0c       	add	r15, r0
     218:	11 24       	eor	r1, r1
     21a:	c7 01       	movw	r24, r14
     21c:	80 0f       	add	r24, r16
     21e:	91 1d       	adc	r25, r1
     220:	6a e0       	ldi	r22, 0x0A	; 10
     222:	70 e0       	ldi	r23, 0x00	; 0
     224:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <__divmodhi4>
     228:	16 2f       	mov	r17, r22
	O=(num - (H*100) - (T*10));
	

	lcd_char(T+0x30);
     22a:	86 2f       	mov	r24, r22
     22c:	80 5d       	subi	r24, 0xD0	; 208
     22e:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_char>
	lcd_char(O+0x30);
     232:	00 5d       	subi	r16, 0xD0	; 208
     234:	0e 0d       	add	r16, r14
     236:	86 ef       	ldi	r24, 0xF6	; 246
     238:	9f ef       	ldi	r25, 0xFF	; 255
     23a:	18 9f       	mul	r17, r24
     23c:	10 2d       	mov	r17, r0
     23e:	11 24       	eor	r1, r1
     240:	81 2f       	mov	r24, r17
     242:	80 0f       	add	r24, r16
     244:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_char>
}
     248:	1f 91       	pop	r17
     24a:	0f 91       	pop	r16
     24c:	ff 90       	pop	r15
     24e:	ef 90       	pop	r14
     250:	08 95       	ret

00000252 <lcd_gotoxy1>:
	}	
}*/

void lcd_gotoxy1(unsigned char column)
{
	lcd_cmd(0x80+column);     // write pos=0 if u want to select 1st location
     252:	80 58       	subi	r24, 0x80	; 128
     254:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_cmd>
}
     258:	08 95       	ret

0000025a <lcd_gotoxy2>:

void lcd_gotoxy2(unsigned char column)
{
	lcd_cmd(0xC0+column);		 // write pos=0 if u want to select 1st location
     25a:	80 54       	subi	r24, 0x40	; 64
     25c:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_cmd>
}
     260:	08 95       	ret

00000262 <delay_ms>:

void delay_ms(unsigned int ms)
{
     262:	0a c0       	rjmp	.+20     	; 0x278 <delay_ms+0x16>
	int i;

	while (ms-- > 0)
     264:	20 e0       	ldi	r18, 0x00	; 0
     266:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (i = 0; i < 3276; ++i)
		asm("nop");
     268:	00 00       	nop
{
	int i;

	while (ms-- > 0)
	{
		for (i = 0; i < 3276; ++i)
     26a:	2f 5f       	subi	r18, 0xFF	; 255
     26c:	3f 4f       	sbci	r19, 0xFF	; 255
     26e:	4c e0       	ldi	r20, 0x0C	; 12
     270:	2c 3c       	cpi	r18, 0xCC	; 204
     272:	34 07       	cpc	r19, r20
     274:	c9 f7       	brne	.-14     	; 0x268 <delay_ms+0x6>
     276:	01 97       	sbiw	r24, 0x01	; 1

void delay_ms(unsigned int ms)
{
	int i;

	while (ms-- > 0)
     278:	00 97       	sbiw	r24, 0x00	; 0
     27a:	a1 f7       	brne	.-24     	; 0x264 <delay_ms+0x2>
	{
		for (i = 0; i < 3276; ++i)
		asm("nop");
	}
}
     27c:	08 95       	ret

0000027e <lcd_init>:
	}
}

void lcd_init(void)	//init the lcd
{	
	delay_ms(20);
     27e:	84 e1       	ldi	r24, 0x14	; 20
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	0e 94 31 01 	call	0x262	; 0x262 <delay_ms>
	save=PORTC;
     286:	85 b3       	in	r24, 0x15	; 21
     288:	80 93 fc 00 	sts	0x00FC, r24
	DDRC=0xFF;
     28c:	8f ef       	ldi	r24, 0xFF	; 255
     28e:	84 bb       	out	0x14, r24	; 20
	
	delay_ms(15);
     290:	8f e0       	ldi	r24, 0x0F	; 15
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	0e 94 31 01 	call	0x262	; 0x262 <delay_ms>
	PORTC=0x20;
     298:	80 e2       	ldi	r24, 0x20	; 32
     29a:	85 bb       	out	0x15, r24	; 21
	lcd_cmd(0x01);
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_cmd>
	lcd_cmd(0x02);
     2a2:	82 e0       	ldi	r24, 0x02	; 2
     2a4:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_cmd>
	lcd_cmd(0X80);
     2a8:	80 e8       	ldi	r24, 0x80	; 128
     2aa:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_cmd>
	delay_ms(20);
     2ae:	84 e1       	ldi	r24, 0x14	; 20
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	0e 94 31 01 	call	0x262	; 0x262 <delay_ms>
}
     2b6:	08 95       	ret

000002b8 <lcd_clear>:
	}
}

void lcd_clear()
{
	lcd_cmd(0x01);
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_cmd>
}
     2be:	08 95       	ret

000002c0 <initmatrix>:


// pls see bridge cases in these two functions

void initmatrix()
{
     2c0:	20 e0       	ldi	r18, 0x00	; 0
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	13 c0       	rjmp	.+38     	; 0x2ec <initmatrix+0x2c>
 {
	for(j=0;j<8;j++)
	{
		for(k=1;k<4;k++)
		{
			a[i][j][k]=0;
     2c6:	11 82       	std	Z+1, r1	; 0x01
     2c8:	10 82       	st	Z, r1
     2ca:	13 82       	std	Z+3, r1	; 0x03
     2cc:	12 82       	std	Z+2, r1	; 0x02
     2ce:	15 82       	std	Z+5, r1	; 0x05
     2d0:	14 82       	std	Z+4, r1	; 0x04
{
int i,j,k;

 for(i=0;i<8;i++)
 {
	for(j=0;j<8;j++)
     2d2:	01 96       	adiw	r24, 0x01	; 1
     2d4:	38 96       	adiw	r30, 0x08	; 8
     2d6:	88 30       	cpi	r24, 0x08	; 8
     2d8:	91 05       	cpc	r25, r1
     2da:	a9 f7       	brne	.-22     	; 0x2c6 <initmatrix+0x6>

void initmatrix()
{
int i,j,k;

 for(i=0;i<8;i++)
     2dc:	2f 5f       	subi	r18, 0xFF	; 255
     2de:	3f 4f       	sbci	r19, 0xFF	; 255
     2e0:	28 30       	cpi	r18, 0x08	; 8
     2e2:	31 05       	cpc	r19, r1
     2e4:	19 f4       	brne	.+6      	; 0x2ec <initmatrix+0x2c>
     2e6:	40 e0       	ldi	r20, 0x00	; 0
     2e8:	50 e0       	ldi	r21, 0x00	; 0
     2ea:	1f c0       	rjmp	.+62     	; 0x32a <initmatrix+0x6a>
     2ec:	f9 01       	movw	r30, r18
     2ee:	46 e0       	ldi	r20, 0x06	; 6
     2f0:	ee 0f       	add	r30, r30
     2f2:	ff 1f       	adc	r31, r31
     2f4:	4a 95       	dec	r20
     2f6:	e1 f7       	brne	.-8      	; 0x2f0 <initmatrix+0x30>
     2f8:	ed 56       	subi	r30, 0x6D	; 109
     2fa:	fb 4f       	sbci	r31, 0xFB	; 251
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	e2 cf       	rjmp	.-60     	; 0x2c6 <initmatrix+0x6>
	for(i=0;i<8;i++)
	{
		for(j=0;j<8;j++)
		{
		
				a[i][j][0]=maze[i][j];
     302:	8d 91       	ld	r24, X+
     304:	9d 91       	ld	r25, X+
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	80 83       	st	Z, r24
 }


	for(i=0;i<8;i++)
	{
		for(j=0;j<8;j++)
     30a:	2f 5f       	subi	r18, 0xFF	; 255
     30c:	3f 4f       	sbci	r19, 0xFF	; 255
     30e:	38 96       	adiw	r30, 0x08	; 8
     310:	28 30       	cpi	r18, 0x08	; 8
     312:	31 05       	cpc	r19, r1
     314:	b1 f7       	brne	.-20     	; 0x302 <initmatrix+0x42>
	
	}
 }


	for(i=0;i<8;i++)
     316:	4f 5f       	subi	r20, 0xFF	; 255
     318:	5f 4f       	sbci	r21, 0xFF	; 255
     31a:	48 30       	cpi	r20, 0x08	; 8
     31c:	51 05       	cpc	r21, r1
     31e:	29 f4       	brne	.+10     	; 0x32a <initmatrix+0x6a>
     320:	20 e0       	ldi	r18, 0x00	; 0
     322:	30 e0       	ldi	r19, 0x00	; 0
		}
	
	}


	for(i=0;i<10;i++)
     324:	4c e3       	ldi	r20, 0x3C	; 60
     326:	50 e0       	ldi	r21, 0x00	; 0
     328:	23 c0       	rjmp	.+70     	; 0x370 <initmatrix+0xb0>
	
	}
 }


	for(i=0;i<8;i++)
     32a:	da 01       	movw	r26, r20
     32c:	94 e0       	ldi	r25, 0x04	; 4
     32e:	aa 0f       	add	r26, r26
     330:	bb 1f       	adc	r27, r27
     332:	9a 95       	dec	r25
     334:	e1 f7       	brne	.-8      	; 0x32e <initmatrix+0x6e>
     336:	ac 58       	subi	r26, 0x8C	; 140
     338:	bf 4f       	sbci	r27, 0xFF	; 255
     33a:	fa 01       	movw	r30, r20
     33c:	86 e0       	ldi	r24, 0x06	; 6
     33e:	ee 0f       	add	r30, r30
     340:	ff 1f       	adc	r31, r31
     342:	8a 95       	dec	r24
     344:	e1 f7       	brne	.-8      	; 0x33e <initmatrix+0x7e>
     346:	ef 56       	subi	r30, 0x6F	; 111
     348:	fb 4f       	sbci	r31, 0xFB	; 251
     34a:	20 e0       	ldi	r18, 0x00	; 0
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	d9 cf       	rjmp	.-78     	; 0x302 <initmatrix+0x42>
	{
		for(j=0;j<10;j++)
		{
			for(k=0;k<3;k++)
			{
				bridge[i][j][k]=0;
     350:	11 82       	std	Z+1, r1	; 0x01
     352:	10 82       	st	Z, r1
     354:	13 82       	std	Z+3, r1	; 0x03
     356:	12 82       	std	Z+2, r1	; 0x02
     358:	15 82       	std	Z+5, r1	; 0x05
     35a:	14 82       	std	Z+4, r1	; 0x04
	}


	for(i=0;i<10;i++)
	{
		for(j=0;j<10;j++)
     35c:	01 96       	adiw	r24, 0x01	; 1
     35e:	36 96       	adiw	r30, 0x06	; 6
     360:	8a 30       	cpi	r24, 0x0A	; 10
     362:	91 05       	cpc	r25, r1
     364:	a9 f7       	brne	.-22     	; 0x350 <initmatrix+0x90>
		}
	
	}


	for(i=0;i<10;i++)
     366:	2f 5f       	subi	r18, 0xFF	; 255
     368:	3f 4f       	sbci	r19, 0xFF	; 255
     36a:	2a 30       	cpi	r18, 0x0A	; 10
     36c:	31 05       	cpc	r19, r1
     36e:	e1 f0       	breq	.+56     	; 0x3a8 <initmatrix+0xe8>
     370:	24 9f       	mul	r18, r20
     372:	f0 01       	movw	r30, r0
     374:	25 9f       	mul	r18, r21
     376:	f0 0d       	add	r31, r0
     378:	34 9f       	mul	r19, r20
     37a:	f0 0d       	add	r31, r0
     37c:	11 24       	eor	r1, r1
     37e:	eb 59       	subi	r30, 0x9B	; 155
     380:	fe 4f       	sbci	r31, 0xFE	; 254
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	e4 cf       	rjmp	.-56     	; 0x350 <initmatrix+0x90>
	for(i=0;i<10;i++)
	{
		for(j=0;j<10;j++)
		{
		
				test[i][j]=100;
     388:	41 93       	st	Z+, r20
     38a:	51 93       	st	Z+, r21
		}
	
	}
	for(i=0;i<10;i++)
	{
		for(j=0;j<10;j++)
     38c:	01 96       	adiw	r24, 0x01	; 1
     38e:	8a 30       	cpi	r24, 0x0A	; 10
     390:	91 05       	cpc	r25, r1
     392:	d1 f7       	brne	.-12     	; 0x388 <initmatrix+0xc8>
			}
		
		}
	
	}
	for(i=0;i<10;i++)
     394:	2f 5f       	subi	r18, 0xFF	; 255
     396:	3f 4f       	sbci	r19, 0xFF	; 255
     398:	2a 30       	cpi	r18, 0x0A	; 10
     39a:	31 05       	cpc	r19, r1
     39c:	59 f4       	brne	.+22     	; 0x3b4 <initmatrix+0xf4>
     39e:	44 e8       	ldi	r20, 0x84	; 132
     3a0:	50 e0       	ldi	r21, 0x00	; 0
     3a2:	21 e0       	ldi	r18, 0x01	; 1
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	21 c0       	rjmp	.+66     	; 0x3ea <initmatrix+0x12a>
     3a8:	20 e0       	ldi	r18, 0x00	; 0
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	64 e1       	ldi	r22, 0x14	; 20
     3ae:	70 e0       	ldi	r23, 0x00	; 0
	{
		for(j=0;j<10;j++)
		{
		
				test[i][j]=100;
     3b0:	44 e6       	ldi	r20, 0x64	; 100
     3b2:	50 e0       	ldi	r21, 0x00	; 0
			}
		
		}
	
	}
	for(i=0;i<10;i++)
     3b4:	26 9f       	mul	r18, r22
     3b6:	f0 01       	movw	r30, r0
     3b8:	27 9f       	mul	r18, r23
     3ba:	f0 0d       	add	r31, r0
     3bc:	36 9f       	mul	r19, r22
     3be:	f0 0d       	add	r31, r0
     3c0:	11 24       	eor	r1, r1
     3c2:	ed 53       	subi	r30, 0x3D	; 61
     3c4:	fc 4f       	sbci	r31, 0xFC	; 252
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	de cf       	rjmp	.-68     	; 0x388 <initmatrix+0xc8>
	for(i=1;i<9;i++)
	{
		for(j=1;j<9;j++)
		{
		
				test[i][j]=maze[i-1][j-1];
     3cc:	8d 91       	ld	r24, X+
     3ce:	9d 91       	ld	r25, X+
     3d0:	81 93       	st	Z+, r24
     3d2:	91 93       	st	Z+, r25
		}
	
	}
	for(i=1;i<9;i++)
	{
		for(j=1;j<9;j++)
     3d4:	a4 17       	cp	r26, r20
     3d6:	b5 07       	cpc	r27, r21
     3d8:	c9 f7       	brne	.-14     	; 0x3cc <initmatrix+0x10c>
			
		
		}
	
	}
	for(i=1;i<9;i++)
     3da:	2f 5f       	subi	r18, 0xFF	; 255
     3dc:	3f 4f       	sbci	r19, 0xFF	; 255
     3de:	ad 01       	movw	r20, r26
     3e0:	40 5f       	subi	r20, 0xF0	; 240
     3e2:	5f 4f       	sbci	r21, 0xFF	; 255
     3e4:	29 30       	cpi	r18, 0x09	; 9
     3e6:	31 05       	cpc	r19, r1
     3e8:	c1 f0       	breq	.+48     	; 0x41a <initmatrix+0x15a>
     3ea:	d9 01       	movw	r26, r18
     3ec:	e4 e0       	ldi	r30, 0x04	; 4
     3ee:	aa 0f       	add	r26, r26
     3f0:	bb 1f       	adc	r27, r27
     3f2:	ea 95       	dec	r30
     3f4:	e1 f7       	brne	.-8      	; 0x3ee <initmatrix+0x12e>
     3f6:	ac 59       	subi	r26, 0x9C	; 156
     3f8:	bf 4f       	sbci	r27, 0xFF	; 255
     3fa:	f9 01       	movw	r30, r18
     3fc:	ee 0f       	add	r30, r30
     3fe:	ff 1f       	adc	r31, r31
     400:	c9 01       	movw	r24, r18
     402:	63 e0       	ldi	r22, 0x03	; 3
     404:	88 0f       	add	r24, r24
     406:	99 1f       	adc	r25, r25
     408:	6a 95       	dec	r22
     40a:	e1 f7       	brne	.-8      	; 0x404 <initmatrix+0x144>
     40c:	e8 0f       	add	r30, r24
     40e:	f9 1f       	adc	r31, r25
     410:	ee 0f       	add	r30, r30
     412:	ff 1f       	adc	r31, r31
     414:	eb 53       	subi	r30, 0x3B	; 59
     416:	fc 4f       	sbci	r31, 0xFC	; 252
     418:	d9 cf       	rjmp	.-78     	; 0x3cc <initmatrix+0x10c>
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	90 e0       	ldi	r25, 0x00	; 0
		}
	
	}
	for(i=0;i<25;i++)
		{
			path[i]='N';
     41e:	2e e4       	ldi	r18, 0x4E	; 78
     420:	fc 01       	movw	r30, r24
     422:	e8 5e       	subi	r30, 0xE8	; 232
     424:	fe 4f       	sbci	r31, 0xFE	; 254
     426:	20 83       	st	Z, r18
			path_centre[i]='N';
     428:	fc 01       	movw	r30, r24
     42a:	e4 5b       	subi	r30, 0xB4	; 180
     42c:	fe 4f       	sbci	r31, 0xFE	; 254
     42e:	20 83       	st	Z, r18
			path_end_left[i]='N';
     430:	fc 01       	movw	r30, r24
     432:	ef 56       	subi	r30, 0x6F	; 111
     434:	f9 4f       	sbci	r31, 0xF9	; 249
     436:	20 83       	st	Z, r18
			path_end_right[i]='N';
     438:	fc 01       	movw	r30, r24
     43a:	ef 5c       	subi	r30, 0xCF	; 207
     43c:	fe 4f       	sbci	r31, 0xFE	; 254
     43e:	20 83       	st	Z, r18
			
		
		}
	
	}
	for(i=0;i<25;i++)
     440:	01 96       	adiw	r24, 0x01	; 1
     442:	89 31       	cpi	r24, 0x19	; 25
     444:	91 05       	cpc	r25, r1
     446:	61 f7       	brne	.-40     	; 0x420 <initmatrix+0x160>
			path_end_left[i]='N';
			path_end_right[i]='N';
		}
		  
	
}
     448:	08 95       	ret

0000044a <updatemaze>:

void updatemaze()
{  
   if((bridgeflag==0) && (f2==0))
     44a:	80 91 0b 01 	lds	r24, 0x010B
     44e:	90 91 0c 01 	lds	r25, 0x010C
     452:	89 2b       	or	r24, r25
     454:	d9 f5       	brne	.+118    	; 0x4cc <updatemaze+0x82>
     456:	80 91 03 01 	lds	r24, 0x0103
     45a:	90 91 04 01 	lds	r25, 0x0104
     45e:	89 2b       	or	r24, r25
     460:	a9 f5       	brne	.+106    	; 0x4cc <updatemaze+0x82>
	{
	PORTB^(1<<4);
     462:	88 b3       	in	r24, 0x18	; 24
		if(ori==1)
     464:	80 91 72 00 	lds	r24, 0x0072
     468:	90 91 73 00 	lds	r25, 0x0073
     46c:	81 30       	cpi	r24, 0x01	; 1
     46e:	91 05       	cpc	r25, r1
     470:	31 f4       	brne	.+12     	; 0x47e <updatemaze+0x34>
		currx++;
     472:	80 91 fd 00 	lds	r24, 0x00FD
     476:	90 91 fe 00 	lds	r25, 0x00FE
     47a:	01 96       	adiw	r24, 0x01	; 1
     47c:	11 c0       	rjmp	.+34     	; 0x4a0 <updatemaze+0x56>
		else if(ori==2)
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	91 05       	cpc	r25, r1
     482:	31 f4       	brne	.+12     	; 0x490 <updatemaze+0x46>
		curry--;
     484:	80 91 ff 00 	lds	r24, 0x00FF
     488:	90 91 00 01 	lds	r25, 0x0100
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	14 c0       	rjmp	.+40     	; 0x4b8 <updatemaze+0x6e>
		else if(ori==3)
     490:	83 30       	cpi	r24, 0x03	; 3
     492:	91 05       	cpc	r25, r1
     494:	51 f4       	brne	.+20     	; 0x4aa <updatemaze+0x60>
		currx--;
     496:	80 91 fd 00 	lds	r24, 0x00FD
     49a:	90 91 fe 00 	lds	r25, 0x00FE
     49e:	01 97       	sbiw	r24, 0x01	; 1
     4a0:	90 93 fe 00 	sts	0x00FE, r25
     4a4:	80 93 fd 00 	sts	0x00FD, r24
     4a8:	0b c0       	rjmp	.+22     	; 0x4c0 <updatemaze+0x76>
		else if(ori==4)
     4aa:	04 97       	sbiw	r24, 0x04	; 4
     4ac:	49 f4       	brne	.+18     	; 0x4c0 <updatemaze+0x76>
		curry++; 
     4ae:	80 91 ff 00 	lds	r24, 0x00FF
     4b2:	90 91 00 01 	lds	r25, 0x0100
     4b6:	01 96       	adiw	r24, 0x01	; 1
     4b8:	90 93 00 01 	sts	0x0100, r25
     4bc:	80 93 ff 00 	sts	0x00FF, r24
		f2=1;
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	90 93 04 01 	sts	0x0104, r25
     4c8:	80 93 03 01 	sts	0x0103, r24
     4cc:	08 95       	ret

000004ce <decidemaze>:



char decidemaze()
{  
  if(bridgeflag==0)
     4ce:	80 91 0b 01 	lds	r24, 0x010B
     4d2:	90 91 0c 01 	lds	r25, 0x010C
     4d6:	89 2b       	or	r24, r25
     4d8:	c1 f4       	brne	.+48     	; 0x50a <decidemaze+0x3c>
      {
		if(currx==0 && curry == 7)
     4da:	80 91 fd 00 	lds	r24, 0x00FD
     4de:	90 91 fe 00 	lds	r25, 0x00FE
     4e2:	00 97       	sbiw	r24, 0x00	; 0
     4e4:	41 f4       	brne	.+16     	; 0x4f6 <decidemaze+0x28>
     4e6:	80 91 ff 00 	lds	r24, 0x00FF
     4ea:	90 91 00 01 	lds	r25, 0x0100
     4ee:	07 97       	sbiw	r24, 0x07	; 7
     4f0:	69 f0       	breq	.+26     	; 0x50c <decidemaze+0x3e>
     4f2:	82 e5       	ldi	r24, 0x52	; 82
     4f4:	08 95       	ret
		return 'N'; 
		else if(currx==0)
		return 'R';
		else if(currx==7)
     4f6:	87 30       	cpi	r24, 0x07	; 7
     4f8:	91 05       	cpc	r25, r1
     4fa:	11 f4       	brne	.+4      	; 0x500 <decidemaze+0x32>
     4fc:	8c e4       	ldi	r24, 0x4C	; 76
     4fe:	08 95       	ret
		return 'L';  
		else if(currx<7&&currx>0)
     500:	01 97       	sbiw	r24, 0x01	; 1
     502:	06 97       	sbiw	r24, 0x06	; 6
     504:	10 f4       	brcc	.+4      	; 0x50a <decidemaze+0x3c>
     506:	83 e5       	ldi	r24, 0x53	; 83
     508:	08 95       	ret
     50a:	08 95       	ret
		return 'S';
	  }


}
     50c:	8e e4       	ldi	r24, 0x4E	; 78
     50e:	08 95       	ret

00000510 <timer_init>:
       PORTD |=(1<<7);
}*/

void timer_init(void)
{
	sei();
     510:	78 94       	sei
	time=0;
     512:	10 92 10 01 	sts	0x0110, r1
     516:	10 92 0f 01 	sts	0x010F, r1
	TCCR0=0b00000101;
     51a:	85 e0       	ldi	r24, 0x05	; 5
     51c:	83 bf       	out	0x33, r24	; 51
	TIMSK|=(1<<0);
     51e:	89 b7       	in	r24, 0x39	; 57
     520:	81 60       	ori	r24, 0x01	; 1
     522:	89 bf       	out	0x39, r24	; 57
	TCNT0=0x00;
     524:	12 be       	out	0x32, r1	; 50
}
     526:	08 95       	ret

00000528 <mazestore>:

void mazestore(void)
{
     528:	ef 92       	push	r14
     52a:	ff 92       	push	r15
     52c:	0f 93       	push	r16
     52e:	1f 93       	push	r17
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
	if(nodeflag==1)
     534:	80 91 09 01 	lds	r24, 0x0109
     538:	90 91 0a 01 	lds	r25, 0x010A
     53c:	01 97       	sbiw	r24, 0x01	; 1
     53e:	39 f5       	brne	.+78     	; 0x58e <mazestore+0x66>
	{	
		a[currx][curry][0]=100;
     540:	e0 91 fd 00 	lds	r30, 0x00FD
     544:	f0 91 fe 00 	lds	r31, 0x00FE
     548:	73 e0       	ldi	r23, 0x03	; 3
     54a:	ee 0f       	add	r30, r30
     54c:	ff 1f       	adc	r31, r31
     54e:	7a 95       	dec	r23
     550:	e1 f7       	brne	.-8      	; 0x54a <mazestore+0x22>
     552:	80 91 ff 00 	lds	r24, 0x00FF
     556:	90 91 00 01 	lds	r25, 0x0100
     55a:	e8 0f       	add	r30, r24
     55c:	f9 1f       	adc	r31, r25
     55e:	63 e0       	ldi	r22, 0x03	; 3
     560:	ee 0f       	add	r30, r30
     562:	ff 1f       	adc	r31, r31
     564:	6a 95       	dec	r22
     566:	e1 f7       	brne	.-8      	; 0x560 <mazestore+0x38>
     568:	ef 56       	subi	r30, 0x6F	; 111
     56a:	fb 4f       	sbci	r31, 0xFB	; 251
     56c:	84 e6       	ldi	r24, 0x64	; 100
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	91 83       	std	Z+1, r25	; 0x01
     572:	80 83       	st	Z, r24
		nodeflag=0;
     574:	10 92 0a 01 	sts	0x010A, r1
     578:	10 92 09 01 	sts	0x0109, r1
		no++;
     57c:	80 91 07 01 	lds	r24, 0x0107
     580:	90 91 08 01 	lds	r25, 0x0108
     584:	01 96       	adiw	r24, 0x01	; 1
     586:	90 93 08 01 	sts	0x0108, r25
     58a:	80 93 07 01 	sts	0x0107, r24
		
	}
	
	if(bridgeflag==1)
     58e:	e0 90 0b 01 	lds	r14, 0x010B
     592:	f0 90 0c 01 	lds	r15, 0x010C
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	e8 16       	cp	r14, r24
     59a:	f1 04       	cpc	r15, r1
     59c:	09 f0       	breq	.+2      	; 0x5a0 <mazestore+0x78>
     59e:	04 c1       	rjmp	.+520    	; 0x7a8 <mazestore+0x280>
	{
		if(ori==1)
     5a0:	c0 91 72 00 	lds	r28, 0x0072
     5a4:	d0 91 73 00 	lds	r29, 0x0073
     5a8:	c1 30       	cpi	r28, 0x01	; 1
     5aa:	d1 05       	cpc	r29, r1
     5ac:	09 f5       	brne	.+66     	; 0x5f0 <mazestore+0xc8>
		{
			a[currx+1][curry][1]=currx;
     5ae:	80 91 fd 00 	lds	r24, 0x00FD
     5b2:	90 91 fe 00 	lds	r25, 0x00FE
     5b6:	bc 01       	movw	r22, r24
     5b8:	6f 5f       	subi	r22, 0xFF	; 255
     5ba:	7f 4f       	sbci	r23, 0xFF	; 255
     5bc:	20 91 ff 00 	lds	r18, 0x00FF
     5c0:	30 91 00 01 	lds	r19, 0x0100
     5c4:	db 01       	movw	r26, r22
     5c6:	53 e0       	ldi	r21, 0x03	; 3
     5c8:	aa 0f       	add	r26, r26
     5ca:	bb 1f       	adc	r27, r27
     5cc:	5a 95       	dec	r21
     5ce:	e1 f7       	brne	.-8      	; 0x5c8 <mazestore+0xa0>
     5d0:	a2 0f       	add	r26, r18
     5d2:	b3 1f       	adc	r27, r19
     5d4:	fd 01       	movw	r30, r26
     5d6:	43 e0       	ldi	r20, 0x03	; 3
     5d8:	ee 0f       	add	r30, r30
     5da:	ff 1f       	adc	r31, r31
     5dc:	4a 95       	dec	r20
     5de:	e1 f7       	brne	.-8      	; 0x5d8 <mazestore+0xb0>
     5e0:	ed 56       	subi	r30, 0x6D	; 109
     5e2:	fb 4f       	sbci	r31, 0xFB	; 251
     5e4:	91 83       	std	Z+1, r25	; 0x01
     5e6:	80 83       	st	Z, r24
			a[currx+1][curry][2]=curry+1;
     5e8:	a9 01       	movw	r20, r18
     5ea:	4f 5f       	subi	r20, 0xFF	; 255
     5ec:	5f 4f       	sbci	r21, 0xFF	; 255
     5ee:	15 c2       	rjmp	.+1066   	; 0xa1a <__stack+0x1bb>
			a[currx+1][curry][3]=1;
			a[currx][curry+1][1]=currx+1;
			a[currx][curry+1][2]=curry;
			a[currx][curry+1][3]=2;
		}
		else if(ori==2)
     5f0:	c2 30       	cpi	r28, 0x02	; 2
     5f2:	d1 05       	cpc	r29, r1
     5f4:	09 f0       	breq	.+2      	; 0x5f8 <mazestore+0xd0>
     5f6:	4e c0       	rjmp	.+156    	; 0x694 <mazestore+0x16c>
		{
			a[currx][curry+1][1]=currx-1;
     5f8:	20 91 ff 00 	lds	r18, 0x00FF
     5fc:	30 91 00 01 	lds	r19, 0x0100
     600:	b9 01       	movw	r22, r18
     602:	6f 5f       	subi	r22, 0xFF	; 255
     604:	7f 4f       	sbci	r23, 0xFF	; 255
     606:	40 91 fd 00 	lds	r20, 0x00FD
     60a:	50 91 fe 00 	lds	r21, 0x00FE
     60e:	ca 01       	movw	r24, r20
     610:	01 97       	sbiw	r24, 0x01	; 1
     612:	da 01       	movw	r26, r20
     614:	03 e0       	ldi	r16, 0x03	; 3
     616:	aa 0f       	add	r26, r26
     618:	bb 1f       	adc	r27, r27
     61a:	0a 95       	dec	r16
     61c:	e1 f7       	brne	.-8      	; 0x616 <mazestore+0xee>
     61e:	a6 0f       	add	r26, r22
     620:	b7 1f       	adc	r27, r23
     622:	fd 01       	movw	r30, r26
     624:	13 e0       	ldi	r17, 0x03	; 3
     626:	ee 0f       	add	r30, r30
     628:	ff 1f       	adc	r31, r31
     62a:	1a 95       	dec	r17
     62c:	e1 f7       	brne	.-8      	; 0x626 <mazestore+0xfe>
     62e:	ed 56       	subi	r30, 0x6D	; 109
     630:	fb 4f       	sbci	r31, 0xFB	; 251
     632:	91 83       	std	Z+1, r25	; 0x01
     634:	80 83       	st	Z, r24
			a[currx][curry+1][2]=curry;
     636:	03 e0       	ldi	r16, 0x03	; 3
     638:	aa 0f       	add	r26, r26
     63a:	bb 1f       	adc	r27, r27
     63c:	0a 95       	dec	r16
     63e:	e1 f7       	brne	.-8      	; 0x638 <mazestore+0x110>
     640:	fd 01       	movw	r30, r26
     642:	eb 56       	subi	r30, 0x6B	; 107
     644:	fb 4f       	sbci	r31, 0xFB	; 251
     646:	31 83       	std	Z+1, r19	; 0x01
     648:	20 83       	st	Z, r18
			a[currx][curry+1][3]=2;
     64a:	af 56       	subi	r26, 0x6F	; 111
     64c:	bb 4f       	sbci	r27, 0xFB	; 251
     64e:	17 96       	adiw	r26, 0x07	; 7
     650:	dc 93       	st	X, r29
     652:	ce 93       	st	-X, r28
     654:	16 97       	sbiw	r26, 0x06	; 6
			a[currx-1][curry][1]=currx;
     656:	b3 e0       	ldi	r27, 0x03	; 3
     658:	88 0f       	add	r24, r24
     65a:	99 1f       	adc	r25, r25
     65c:	ba 95       	dec	r27
     65e:	e1 f7       	brne	.-8      	; 0x658 <mazestore+0x130>
     660:	82 0f       	add	r24, r18
     662:	93 1f       	adc	r25, r19
     664:	fc 01       	movw	r30, r24
     666:	a3 e0       	ldi	r26, 0x03	; 3
     668:	ee 0f       	add	r30, r30
     66a:	ff 1f       	adc	r31, r31
     66c:	aa 95       	dec	r26
     66e:	e1 f7       	brne	.-8      	; 0x668 <mazestore+0x140>
     670:	ed 56       	subi	r30, 0x6D	; 109
     672:	fb 4f       	sbci	r31, 0xFB	; 251
     674:	51 83       	std	Z+1, r21	; 0x01
     676:	40 83       	st	Z, r20
			a[currx-1][curry][2]=curry+1;
     678:	e3 e0       	ldi	r30, 0x03	; 3
     67a:	88 0f       	add	r24, r24
     67c:	99 1f       	adc	r25, r25
     67e:	ea 95       	dec	r30
     680:	e1 f7       	brne	.-8      	; 0x67a <mazestore+0x152>
     682:	fc 01       	movw	r30, r24
     684:	eb 56       	subi	r30, 0x6B	; 107
     686:	fb 4f       	sbci	r31, 0xFB	; 251
     688:	71 83       	std	Z+1, r23	; 0x01
     68a:	60 83       	st	Z, r22
			a[currx-1][curry][3]=1;
     68c:	8f 56       	subi	r24, 0x6F	; 111
     68e:	9b 4f       	sbci	r25, 0xFB	; 251
     690:	fc 01       	movw	r30, r24
     692:	87 c0       	rjmp	.+270    	; 0x7a2 <mazestore+0x27a>
			
		}
			
		else if(ori==3)
     694:	c3 30       	cpi	r28, 0x03	; 3
     696:	d1 05       	cpc	r29, r1
     698:	89 f5       	brne	.+98     	; 0x6fc <mazestore+0x1d4>
		{
			a[currx-1][curry][1]=currx;
     69a:	80 91 fd 00 	lds	r24, 0x00FD
     69e:	90 91 fe 00 	lds	r25, 0x00FE
     6a2:	bc 01       	movw	r22, r24
     6a4:	61 50       	subi	r22, 0x01	; 1
     6a6:	70 40       	sbci	r23, 0x00	; 0
     6a8:	20 91 ff 00 	lds	r18, 0x00FF
     6ac:	30 91 00 01 	lds	r19, 0x0100
     6b0:	db 01       	movw	r26, r22
     6b2:	43 e0       	ldi	r20, 0x03	; 3
     6b4:	aa 0f       	add	r26, r26
     6b6:	bb 1f       	adc	r27, r27
     6b8:	4a 95       	dec	r20
     6ba:	e1 f7       	brne	.-8      	; 0x6b4 <mazestore+0x18c>
     6bc:	a2 0f       	add	r26, r18
     6be:	b3 1f       	adc	r27, r19
     6c0:	fd 01       	movw	r30, r26
     6c2:	03 e0       	ldi	r16, 0x03	; 3
     6c4:	ee 0f       	add	r30, r30
     6c6:	ff 1f       	adc	r31, r31
     6c8:	0a 95       	dec	r16
     6ca:	e1 f7       	brne	.-8      	; 0x6c4 <mazestore+0x19c>
     6cc:	ed 56       	subi	r30, 0x6D	; 109
     6ce:	fb 4f       	sbci	r31, 0xFB	; 251
     6d0:	91 83       	std	Z+1, r25	; 0x01
     6d2:	80 83       	st	Z, r24
			a[currx-1][curry][2]=curry-1;
     6d4:	a9 01       	movw	r20, r18
     6d6:	41 50       	subi	r20, 0x01	; 1
     6d8:	50 40       	sbci	r21, 0x00	; 0
     6da:	13 e0       	ldi	r17, 0x03	; 3
     6dc:	aa 0f       	add	r26, r26
     6de:	bb 1f       	adc	r27, r27
     6e0:	1a 95       	dec	r17
     6e2:	e1 f7       	brne	.-8      	; 0x6dc <mazestore+0x1b4>
     6e4:	fd 01       	movw	r30, r26
     6e6:	eb 56       	subi	r30, 0x6B	; 107
     6e8:	fb 4f       	sbci	r31, 0xFB	; 251
     6ea:	51 83       	std	Z+1, r21	; 0x01
     6ec:	40 83       	st	Z, r20
			a[currx-1][curry][3]=1;
     6ee:	af 56       	subi	r26, 0x6F	; 111
     6f0:	bb 4f       	sbci	r27, 0xFB	; 251
     6f2:	17 96       	adiw	r26, 0x07	; 7
     6f4:	fc 92       	st	X, r15
     6f6:	ee 92       	st	-X, r14
     6f8:	16 97       	sbiw	r26, 0x06	; 6
     6fa:	9f c1       	rjmp	.+830    	; 0xa3a <__stack+0x1db>
			a[currx][curry-1][1]=currx-1;
			a[currx][curry-1][2]=curry;
			a[currx][curry-1][3]=2;
		}
		
		else if(ori==4)
     6fc:	24 97       	sbiw	r28, 0x04	; 4
     6fe:	09 f0       	breq	.+2      	; 0x702 <mazestore+0x1da>
     700:	f2 c3       	rjmp	.+2020   	; 0xee6 <__stack+0x687>
		{
			a[currx][curry-1][1]=currx+1;
     702:	40 91 ff 00 	lds	r20, 0x00FF
     706:	50 91 00 01 	lds	r21, 0x0100
     70a:	8a 01       	movw	r16, r20
     70c:	01 50       	subi	r16, 0x01	; 1
     70e:	10 40       	sbci	r17, 0x00	; 0
     710:	60 91 fd 00 	lds	r22, 0x00FD
     714:	70 91 fe 00 	lds	r23, 0x00FE
     718:	9b 01       	movw	r18, r22
     71a:	2f 5f       	subi	r18, 0xFF	; 255
     71c:	3f 4f       	sbci	r19, 0xFF	; 255
     71e:	db 01       	movw	r26, r22
     720:	e3 e0       	ldi	r30, 0x03	; 3
     722:	aa 0f       	add	r26, r26
     724:	bb 1f       	adc	r27, r27
     726:	ea 95       	dec	r30
     728:	e1 f7       	brne	.-8      	; 0x722 <mazestore+0x1fa>
     72a:	a0 0f       	add	r26, r16
     72c:	b1 1f       	adc	r27, r17
     72e:	fd 01       	movw	r30, r26
     730:	93 e0       	ldi	r25, 0x03	; 3
     732:	ee 0f       	add	r30, r30
     734:	ff 1f       	adc	r31, r31
     736:	9a 95       	dec	r25
     738:	e1 f7       	brne	.-8      	; 0x732 <mazestore+0x20a>
     73a:	ed 56       	subi	r30, 0x6D	; 109
     73c:	fb 4f       	sbci	r31, 0xFB	; 251
     73e:	31 83       	std	Z+1, r19	; 0x01
     740:	20 83       	st	Z, r18
			a[currx][curry-1][2]=curry;
     742:	83 e0       	ldi	r24, 0x03	; 3
     744:	aa 0f       	add	r26, r26
     746:	bb 1f       	adc	r27, r27
     748:	8a 95       	dec	r24
     74a:	e1 f7       	brne	.-8      	; 0x744 <mazestore+0x21c>
     74c:	fd 01       	movw	r30, r26
     74e:	eb 56       	subi	r30, 0x6B	; 107
     750:	fb 4f       	sbci	r31, 0xFB	; 251
     752:	51 83       	std	Z+1, r21	; 0x01
     754:	40 83       	st	Z, r20
			a[currx][curry-1][3]=2;
     756:	af 56       	subi	r26, 0x6F	; 111
     758:	bb 4f       	sbci	r27, 0xFB	; 251
     75a:	82 e0       	ldi	r24, 0x02	; 2
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	17 96       	adiw	r26, 0x07	; 7
     760:	9c 93       	st	X, r25
     762:	8e 93       	st	-X, r24
     764:	16 97       	sbiw	r26, 0x06	; 6
			a[currx+1][curry][1]=currx;
     766:	e3 e0       	ldi	r30, 0x03	; 3
     768:	22 0f       	add	r18, r18
     76a:	33 1f       	adc	r19, r19
     76c:	ea 95       	dec	r30
     76e:	e1 f7       	brne	.-8      	; 0x768 <mazestore+0x240>
     770:	24 0f       	add	r18, r20
     772:	35 1f       	adc	r19, r21
     774:	f9 01       	movw	r30, r18
     776:	43 e0       	ldi	r20, 0x03	; 3
     778:	ee 0f       	add	r30, r30
     77a:	ff 1f       	adc	r31, r31
     77c:	4a 95       	dec	r20
     77e:	e1 f7       	brne	.-8      	; 0x778 <mazestore+0x250>
     780:	ed 56       	subi	r30, 0x6D	; 109
     782:	fb 4f       	sbci	r31, 0xFB	; 251
     784:	71 83       	std	Z+1, r23	; 0x01
     786:	60 83       	st	Z, r22
			a[currx+1][curry][2]=curry-1;
     788:	93 e0       	ldi	r25, 0x03	; 3
     78a:	22 0f       	add	r18, r18
     78c:	33 1f       	adc	r19, r19
     78e:	9a 95       	dec	r25
     790:	e1 f7       	brne	.-8      	; 0x78a <mazestore+0x262>
     792:	f9 01       	movw	r30, r18
     794:	eb 56       	subi	r30, 0x6B	; 107
     796:	fb 4f       	sbci	r31, 0xFB	; 251
     798:	11 83       	std	Z+1, r17	; 0x01
     79a:	00 83       	st	Z, r16
			a[currx+1][curry][3]=1;
     79c:	2f 56       	subi	r18, 0x6F	; 111
     79e:	3b 4f       	sbci	r19, 0xFB	; 251
     7a0:	f9 01       	movw	r30, r18
     7a2:	f7 82       	std	Z+7, r15	; 0x07
     7a4:	e6 82       	std	Z+6, r14	; 0x06
     7a6:	9f c3       	rjmp	.+1854   	; 0xee6 <__stack+0x687>
		}
	}
	
	else if(bridgeflag==2)
     7a8:	f2 e0       	ldi	r31, 0x02	; 2
     7aa:	ef 16       	cp	r14, r31
     7ac:	f1 04       	cpc	r15, r1
     7ae:	09 f0       	breq	.+2      	; 0x7b2 <mazestore+0x28a>
     7b0:	07 c1       	rjmp	.+526    	; 0x9c0 <__stack+0x161>
	{
		if(ori==1)
     7b2:	c0 91 72 00 	lds	r28, 0x0072
     7b6:	d0 91 73 00 	lds	r29, 0x0073
     7ba:	c1 30       	cpi	r28, 0x01	; 1
     7bc:	d1 05       	cpc	r29, r1
     7be:	09 f0       	breq	.+2      	; 0x7c2 <mazestore+0x29a>
     7c0:	4e c0       	rjmp	.+156    	; 0x85e <mazestore+0x336>
		{
			a[currx][curry][1]=currx+1;
     7c2:	60 91 ff 00 	lds	r22, 0x00FF
     7c6:	70 91 00 01 	lds	r23, 0x0100
     7ca:	20 91 fd 00 	lds	r18, 0x00FD
     7ce:	30 91 fe 00 	lds	r19, 0x00FE
     7d2:	c9 01       	movw	r24, r18
     7d4:	01 96       	adiw	r24, 0x01	; 1
     7d6:	d9 01       	movw	r26, r18
     7d8:	03 e0       	ldi	r16, 0x03	; 3
     7da:	aa 0f       	add	r26, r26
     7dc:	bb 1f       	adc	r27, r27
     7de:	0a 95       	dec	r16
     7e0:	e1 f7       	brne	.-8      	; 0x7da <mazestore+0x2b2>
     7e2:	a6 0f       	add	r26, r22
     7e4:	b7 1f       	adc	r27, r23
     7e6:	fd 01       	movw	r30, r26
     7e8:	13 e0       	ldi	r17, 0x03	; 3
     7ea:	ee 0f       	add	r30, r30
     7ec:	ff 1f       	adc	r31, r31
     7ee:	1a 95       	dec	r17
     7f0:	e1 f7       	brne	.-8      	; 0x7ea <mazestore+0x2c2>
     7f2:	ed 56       	subi	r30, 0x6D	; 109
     7f4:	fb 4f       	sbci	r31, 0xFB	; 251
     7f6:	91 83       	std	Z+1, r25	; 0x01
     7f8:	80 83       	st	Z, r24
			a[currx][curry][2]=curry+1;
     7fa:	ab 01       	movw	r20, r22
     7fc:	4f 5f       	subi	r20, 0xFF	; 255
     7fe:	5f 4f       	sbci	r21, 0xFF	; 255
     800:	e3 e0       	ldi	r30, 0x03	; 3
     802:	aa 0f       	add	r26, r26
     804:	bb 1f       	adc	r27, r27
     806:	ea 95       	dec	r30
     808:	e1 f7       	brne	.-8      	; 0x802 <mazestore+0x2da>
     80a:	fd 01       	movw	r30, r26
     80c:	eb 56       	subi	r30, 0x6B	; 107
     80e:	fb 4f       	sbci	r31, 0xFB	; 251
     810:	51 83       	std	Z+1, r21	; 0x01
     812:	40 83       	st	Z, r20
			a[currx][curry][3]=1;
     814:	af 56       	subi	r26, 0x6F	; 111
     816:	bb 4f       	sbci	r27, 0xFB	; 251
     818:	17 96       	adiw	r26, 0x07	; 7
     81a:	dc 93       	st	X, r29
     81c:	ce 93       	st	-X, r28
     81e:	16 97       	sbiw	r26, 0x06	; 6
			a[currx+1][curry+1][1]=currx;
     820:	13 e0       	ldi	r17, 0x03	; 3
     822:	88 0f       	add	r24, r24
     824:	99 1f       	adc	r25, r25
     826:	1a 95       	dec	r17
     828:	e1 f7       	brne	.-8      	; 0x822 <mazestore+0x2fa>
     82a:	84 0f       	add	r24, r20
     82c:	95 1f       	adc	r25, r21
     82e:	fc 01       	movw	r30, r24
     830:	b3 e0       	ldi	r27, 0x03	; 3
     832:	ee 0f       	add	r30, r30
     834:	ff 1f       	adc	r31, r31
     836:	ba 95       	dec	r27
     838:	e1 f7       	brne	.-8      	; 0x832 <mazestore+0x30a>
     83a:	ed 56       	subi	r30, 0x6D	; 109
     83c:	fb 4f       	sbci	r31, 0xFB	; 251
     83e:	31 83       	std	Z+1, r19	; 0x01
     840:	20 83       	st	Z, r18
			a[currx+1][curry+1][2]=curry;
     842:	a3 e0       	ldi	r26, 0x03	; 3
     844:	88 0f       	add	r24, r24
     846:	99 1f       	adc	r25, r25
     848:	aa 95       	dec	r26
     84a:	e1 f7       	brne	.-8      	; 0x844 <mazestore+0x31c>
     84c:	fc 01       	movw	r30, r24
     84e:	eb 56       	subi	r30, 0x6B	; 107
     850:	fb 4f       	sbci	r31, 0xFB	; 251
     852:	71 83       	std	Z+1, r23	; 0x01
     854:	60 83       	st	Z, r22
			a[currx+1][curry+1][3]=2;
     856:	8f 56       	subi	r24, 0x6F	; 111
     858:	9b 4f       	sbci	r25, 0xFB	; 251
     85a:	ec 01       	movw	r28, r24
     85c:	63 c0       	rjmp	.+198    	; 0x924 <__stack+0xc5>
		}
		else if(ori==2)
     85e:	c2 30       	cpi	r28, 0x02	; 2
     860:	d1 05       	cpc	r29, r1
     862:	61 f4       	brne	.+24     	; 0x87c <__stack+0x1d>
		{
			
			a[currx][curry][1]=currx-1;
     864:	60 91 ff 00 	lds	r22, 0x00FF
     868:	70 91 00 01 	lds	r23, 0x0100
     86c:	80 91 fd 00 	lds	r24, 0x00FD
     870:	90 91 fe 00 	lds	r25, 0x00FE
     874:	9c 01       	movw	r18, r24
     876:	21 50       	subi	r18, 0x01	; 1
     878:	30 40       	sbci	r19, 0x00	; 0
     87a:	4e c2       	rjmp	.+1180   	; 0xd18 <__stack+0x4b9>
			a[currx-1][curry+1][1]=currx;
			a[currx-1][curry+1][2]=curry;
			a[currx-1][curry+1][3]=1;
		}
			
		else if(ori==3)
     87c:	c3 30       	cpi	r28, 0x03	; 3
     87e:	d1 05       	cpc	r29, r1
     880:	09 f0       	breq	.+2      	; 0x884 <__stack+0x25>
     882:	53 c0       	rjmp	.+166    	; 0x92a <__stack+0xcb>
		{
			a[currx][curry][1]=currx-1;
     884:	60 91 ff 00 	lds	r22, 0x00FF
     888:	70 91 00 01 	lds	r23, 0x0100
     88c:	40 91 fd 00 	lds	r20, 0x00FD
     890:	50 91 fe 00 	lds	r21, 0x00FE
     894:	9a 01       	movw	r18, r20
     896:	21 50       	subi	r18, 0x01	; 1
     898:	30 40       	sbci	r19, 0x00	; 0
     89a:	da 01       	movw	r26, r20
     89c:	e3 e0       	ldi	r30, 0x03	; 3
     89e:	aa 0f       	add	r26, r26
     8a0:	bb 1f       	adc	r27, r27
     8a2:	ea 95       	dec	r30
     8a4:	e1 f7       	brne	.-8      	; 0x89e <__stack+0x3f>
     8a6:	a6 0f       	add	r26, r22
     8a8:	b7 1f       	adc	r27, r23
     8aa:	fd 01       	movw	r30, r26
     8ac:	93 e0       	ldi	r25, 0x03	; 3
     8ae:	ee 0f       	add	r30, r30
     8b0:	ff 1f       	adc	r31, r31
     8b2:	9a 95       	dec	r25
     8b4:	e1 f7       	brne	.-8      	; 0x8ae <__stack+0x4f>
     8b6:	ed 56       	subi	r30, 0x6D	; 109
     8b8:	fb 4f       	sbci	r31, 0xFB	; 251
     8ba:	31 83       	std	Z+1, r19	; 0x01
     8bc:	20 83       	st	Z, r18
			a[currx][curry][2]=curry-1;
     8be:	8b 01       	movw	r16, r22
     8c0:	01 50       	subi	r16, 0x01	; 1
     8c2:	10 40       	sbci	r17, 0x00	; 0
     8c4:	83 e0       	ldi	r24, 0x03	; 3
     8c6:	aa 0f       	add	r26, r26
     8c8:	bb 1f       	adc	r27, r27
     8ca:	8a 95       	dec	r24
     8cc:	e1 f7       	brne	.-8      	; 0x8c6 <__stack+0x67>
     8ce:	fd 01       	movw	r30, r26
     8d0:	eb 56       	subi	r30, 0x6B	; 107
     8d2:	fb 4f       	sbci	r31, 0xFB	; 251
     8d4:	11 83       	std	Z+1, r17	; 0x01
     8d6:	00 83       	st	Z, r16
			a[currx][curry][3]=1;
     8d8:	af 56       	subi	r26, 0x6F	; 111
     8da:	bb 4f       	sbci	r27, 0xFB	; 251
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	17 96       	adiw	r26, 0x07	; 7
     8e2:	9c 93       	st	X, r25
     8e4:	8e 93       	st	-X, r24
     8e6:	16 97       	sbiw	r26, 0x06	; 6
			a[currx-1][curry-1][1]=currx;
     8e8:	e3 e0       	ldi	r30, 0x03	; 3
     8ea:	22 0f       	add	r18, r18
     8ec:	33 1f       	adc	r19, r19
     8ee:	ea 95       	dec	r30
     8f0:	e1 f7       	brne	.-8      	; 0x8ea <__stack+0x8b>
     8f2:	20 0f       	add	r18, r16
     8f4:	31 1f       	adc	r19, r17
     8f6:	f9 01       	movw	r30, r18
     8f8:	93 e0       	ldi	r25, 0x03	; 3
     8fa:	ee 0f       	add	r30, r30
     8fc:	ff 1f       	adc	r31, r31
     8fe:	9a 95       	dec	r25
     900:	e1 f7       	brne	.-8      	; 0x8fa <__stack+0x9b>
     902:	ed 56       	subi	r30, 0x6D	; 109
     904:	fb 4f       	sbci	r31, 0xFB	; 251
     906:	51 83       	std	Z+1, r21	; 0x01
     908:	40 83       	st	Z, r20
			a[currx-1][curry-1][2]=curry;
     90a:	83 e0       	ldi	r24, 0x03	; 3
     90c:	22 0f       	add	r18, r18
     90e:	33 1f       	adc	r19, r19
     910:	8a 95       	dec	r24
     912:	e1 f7       	brne	.-8      	; 0x90c <__stack+0xad>
     914:	f9 01       	movw	r30, r18
     916:	eb 56       	subi	r30, 0x6B	; 107
     918:	fb 4f       	sbci	r31, 0xFB	; 251
     91a:	71 83       	std	Z+1, r23	; 0x01
     91c:	60 83       	st	Z, r22
			a[currx-1][curry-1][3]=2;
     91e:	2f 56       	subi	r18, 0x6F	; 111
     920:	3b 4f       	sbci	r19, 0xFB	; 251
     922:	e9 01       	movw	r28, r18
     924:	ff 82       	std	Y+7, r15	; 0x07
     926:	ee 82       	std	Y+6, r14	; 0x06
     928:	de c2       	rjmp	.+1468   	; 0xee6 <__stack+0x687>
		}
		
		else if(ori==4)
     92a:	24 97       	sbiw	r28, 0x04	; 4
     92c:	09 f0       	breq	.+2      	; 0x930 <__stack+0xd1>
     92e:	db c2       	rjmp	.+1462   	; 0xee6 <__stack+0x687>
		{
			a[currx][curry][1]=currx+1;
     930:	40 91 ff 00 	lds	r20, 0x00FF
     934:	50 91 00 01 	lds	r21, 0x0100
     938:	20 91 fd 00 	lds	r18, 0x00FD
     93c:	30 91 fe 00 	lds	r19, 0x00FE
     940:	d9 01       	movw	r26, r18
     942:	11 96       	adiw	r26, 0x01	; 1
			a[currx][curry][2]=curry-1;
     944:	ba 01       	movw	r22, r20
     946:	61 50       	subi	r22, 0x01	; 1
     948:	70 40       	sbci	r23, 0x00	; 0
     94a:	f9 01       	movw	r30, r18
     94c:	13 e0       	ldi	r17, 0x03	; 3
     94e:	ee 0f       	add	r30, r30
     950:	ff 1f       	adc	r31, r31
     952:	1a 95       	dec	r17
     954:	e1 f7       	brne	.-8      	; 0x94e <__stack+0xef>
     956:	e4 0f       	add	r30, r20
     958:	f5 1f       	adc	r31, r21
     95a:	93 e0       	ldi	r25, 0x03	; 3
     95c:	ee 0f       	add	r30, r30
     95e:	ff 1f       	adc	r31, r31
     960:	9a 95       	dec	r25
     962:	e1 f7       	brne	.-8      	; 0x95c <__stack+0xfd>
     964:	cf 01       	movw	r24, r30
     966:	8b 56       	subi	r24, 0x6B	; 107
     968:	9b 4f       	sbci	r25, 0xFB	; 251
     96a:	ec 01       	movw	r28, r24
     96c:	79 83       	std	Y+1, r23	; 0x01
     96e:	68 83       	st	Y, r22
			a[currx][curry][1]=2;
     970:	ed 56       	subi	r30, 0x6D	; 109
     972:	fb 4f       	sbci	r31, 0xFB	; 251
     974:	f1 82       	std	Z+1, r15	; 0x01
     976:	e0 82       	st	Z, r14
			a[currx+1][curry-1][1]=currx;
     978:	03 e0       	ldi	r16, 0x03	; 3
     97a:	aa 0f       	add	r26, r26
     97c:	bb 1f       	adc	r27, r27
     97e:	0a 95       	dec	r16
     980:	e1 f7       	brne	.-8      	; 0x97a <__stack+0x11b>
     982:	a6 0f       	add	r26, r22
     984:	b7 1f       	adc	r27, r23
     986:	fd 01       	movw	r30, r26
     988:	13 e0       	ldi	r17, 0x03	; 3
     98a:	ee 0f       	add	r30, r30
     98c:	ff 1f       	adc	r31, r31
     98e:	1a 95       	dec	r17
     990:	e1 f7       	brne	.-8      	; 0x98a <__stack+0x12b>
     992:	ed 56       	subi	r30, 0x6D	; 109
     994:	fb 4f       	sbci	r31, 0xFB	; 251
     996:	31 83       	std	Z+1, r19	; 0x01
     998:	20 83       	st	Z, r18
			a[currx+1][curry-1][2]=curry;
     99a:	73 e0       	ldi	r23, 0x03	; 3
     99c:	aa 0f       	add	r26, r26
     99e:	bb 1f       	adc	r27, r27
     9a0:	7a 95       	dec	r23
     9a2:	e1 f7       	brne	.-8      	; 0x99c <__stack+0x13d>
     9a4:	fd 01       	movw	r30, r26
     9a6:	eb 56       	subi	r30, 0x6B	; 107
     9a8:	fb 4f       	sbci	r31, 0xFB	; 251
     9aa:	51 83       	std	Z+1, r21	; 0x01
     9ac:	40 83       	st	Z, r20
			a[currx+1][curry-1][3]=1;
     9ae:	af 56       	subi	r26, 0x6F	; 111
     9b0:	bb 4f       	sbci	r27, 0xFB	; 251
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	17 96       	adiw	r26, 0x07	; 7
     9b8:	9c 93       	st	X, r25
     9ba:	8e 93       	st	-X, r24
     9bc:	16 97       	sbiw	r26, 0x06	; 6
     9be:	93 c2       	rjmp	.+1318   	; 0xee6 <__stack+0x687>
		}
	}
	
	else if(bridgeflag==3)
     9c0:	e3 e0       	ldi	r30, 0x03	; 3
     9c2:	ee 16       	cp	r14, r30
     9c4:	f1 04       	cpc	r15, r1
     9c6:	09 f0       	breq	.+2      	; 0x9ca <__stack+0x16b>
     9c8:	49 c1       	rjmp	.+658    	; 0xc5c <__stack+0x3fd>
	{
		if(ori==1)
     9ca:	c0 91 72 00 	lds	r28, 0x0072
     9ce:	d0 91 73 00 	lds	r29, 0x0073
     9d2:	c1 30       	cpi	r28, 0x01	; 1
     9d4:	d1 05       	cpc	r29, r1
     9d6:	09 f0       	breq	.+2      	; 0x9da <__stack+0x17b>
     9d8:	53 c0       	rjmp	.+166    	; 0xa80 <__stack+0x221>
		{
			a[currx+1][curry][1]=currx;
     9da:	80 91 fd 00 	lds	r24, 0x00FD
     9de:	90 91 fe 00 	lds	r25, 0x00FE
     9e2:	bc 01       	movw	r22, r24
     9e4:	6f 5f       	subi	r22, 0xFF	; 255
     9e6:	7f 4f       	sbci	r23, 0xFF	; 255
     9e8:	20 91 ff 00 	lds	r18, 0x00FF
     9ec:	30 91 00 01 	lds	r19, 0x0100
     9f0:	db 01       	movw	r26, r22
     9f2:	53 e0       	ldi	r21, 0x03	; 3
     9f4:	aa 0f       	add	r26, r26
     9f6:	bb 1f       	adc	r27, r27
     9f8:	5a 95       	dec	r21
     9fa:	e1 f7       	brne	.-8      	; 0x9f4 <__stack+0x195>
     9fc:	a2 0f       	add	r26, r18
     9fe:	b3 1f       	adc	r27, r19
     a00:	fd 01       	movw	r30, r26
     a02:	43 e0       	ldi	r20, 0x03	; 3
     a04:	ee 0f       	add	r30, r30
     a06:	ff 1f       	adc	r31, r31
     a08:	4a 95       	dec	r20
     a0a:	e1 f7       	brne	.-8      	; 0xa04 <__stack+0x1a5>
     a0c:	ed 56       	subi	r30, 0x6D	; 109
     a0e:	fb 4f       	sbci	r31, 0xFB	; 251
     a10:	91 83       	std	Z+1, r25	; 0x01
     a12:	80 83       	st	Z, r24
			a[currx+1][curry][2]=curry-1;
     a14:	a9 01       	movw	r20, r18
     a16:	41 50       	subi	r20, 0x01	; 1
     a18:	50 40       	sbci	r21, 0x00	; 0
     a1a:	03 e0       	ldi	r16, 0x03	; 3
     a1c:	aa 0f       	add	r26, r26
     a1e:	bb 1f       	adc	r27, r27
     a20:	0a 95       	dec	r16
     a22:	e1 f7       	brne	.-8      	; 0xa1c <__stack+0x1bd>
     a24:	fd 01       	movw	r30, r26
     a26:	eb 56       	subi	r30, 0x6B	; 107
     a28:	fb 4f       	sbci	r31, 0xFB	; 251
     a2a:	51 83       	std	Z+1, r21	; 0x01
     a2c:	40 83       	st	Z, r20
			a[currx+1][curry][3]=1;
     a2e:	af 56       	subi	r26, 0x6F	; 111
     a30:	bb 4f       	sbci	r27, 0xFB	; 251
     a32:	17 96       	adiw	r26, 0x07	; 7
     a34:	dc 93       	st	X, r29
     a36:	ce 93       	st	-X, r28
     a38:	16 97       	sbiw	r26, 0x06	; 6
			a[currx][curry-1][1]=currx+1;
     a3a:	b3 e0       	ldi	r27, 0x03	; 3
     a3c:	88 0f       	add	r24, r24
     a3e:	99 1f       	adc	r25, r25
     a40:	ba 95       	dec	r27
     a42:	e1 f7       	brne	.-8      	; 0xa3c <__stack+0x1dd>
     a44:	84 0f       	add	r24, r20
     a46:	95 1f       	adc	r25, r21
     a48:	fc 01       	movw	r30, r24
     a4a:	a3 e0       	ldi	r26, 0x03	; 3
     a4c:	ee 0f       	add	r30, r30
     a4e:	ff 1f       	adc	r31, r31
     a50:	aa 95       	dec	r26
     a52:	e1 f7       	brne	.-8      	; 0xa4c <__stack+0x1ed>
     a54:	ed 56       	subi	r30, 0x6D	; 109
     a56:	fb 4f       	sbci	r31, 0xFB	; 251
     a58:	71 83       	std	Z+1, r23	; 0x01
     a5a:	60 83       	st	Z, r22
			a[currx][curry-1][2]=curry;
     a5c:	f3 e0       	ldi	r31, 0x03	; 3
     a5e:	88 0f       	add	r24, r24
     a60:	99 1f       	adc	r25, r25
     a62:	fa 95       	dec	r31
     a64:	e1 f7       	brne	.-8      	; 0xa5e <__stack+0x1ff>
     a66:	fc 01       	movw	r30, r24
     a68:	eb 56       	subi	r30, 0x6B	; 107
     a6a:	fb 4f       	sbci	r31, 0xFB	; 251
     a6c:	31 83       	std	Z+1, r19	; 0x01
     a6e:	20 83       	st	Z, r18
			a[currx][curry-1][3]=2;
     a70:	8f 56       	subi	r24, 0x6F	; 111
     a72:	9b 4f       	sbci	r25, 0xFB	; 251
     a74:	22 e0       	ldi	r18, 0x02	; 2
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	ec 01       	movw	r28, r24
     a7a:	3f 83       	std	Y+7, r19	; 0x07
     a7c:	2e 83       	std	Y+6, r18	; 0x06
     a7e:	33 c2       	rjmp	.+1126   	; 0xee6 <__stack+0x687>
		}
		else if(ori==2)
     a80:	c2 30       	cpi	r28, 0x02	; 2
     a82:	d1 05       	cpc	r29, r1
     a84:	09 f0       	breq	.+2      	; 0xa88 <__stack+0x229>
     a86:	47 c0       	rjmp	.+142    	; 0xb16 <__stack+0x2b7>
		{
			a[currx][curry+1][1]=currx+1;
     a88:	20 91 ff 00 	lds	r18, 0x00FF
     a8c:	30 91 00 01 	lds	r19, 0x0100
     a90:	a9 01       	movw	r20, r18
     a92:	4f 5f       	subi	r20, 0xFF	; 255
     a94:	5f 4f       	sbci	r21, 0xFF	; 255
     a96:	a0 91 fd 00 	lds	r26, 0x00FD
     a9a:	b0 91 fe 00 	lds	r27, 0x00FE
     a9e:	cd 01       	movw	r24, r26
     aa0:	01 96       	adiw	r24, 0x01	; 1
     aa2:	73 e0       	ldi	r23, 0x03	; 3
     aa4:	aa 0f       	add	r26, r26
     aa6:	bb 1f       	adc	r27, r27
     aa8:	7a 95       	dec	r23
     aaa:	e1 f7       	brne	.-8      	; 0xaa4 <__stack+0x245>
     aac:	a4 0f       	add	r26, r20
     aae:	b5 1f       	adc	r27, r21
     ab0:	fd 01       	movw	r30, r26
     ab2:	63 e0       	ldi	r22, 0x03	; 3
     ab4:	ee 0f       	add	r30, r30
     ab6:	ff 1f       	adc	r31, r31
     ab8:	6a 95       	dec	r22
     aba:	e1 f7       	brne	.-8      	; 0xab4 <__stack+0x255>
     abc:	ed 56       	subi	r30, 0x6D	; 109
     abe:	fb 4f       	sbci	r31, 0xFB	; 251
     ac0:	91 83       	std	Z+1, r25	; 0x01
     ac2:	80 83       	st	Z, r24
			a[currx][curry+1][2]=curry;
     ac4:	03 e0       	ldi	r16, 0x03	; 3
     ac6:	aa 0f       	add	r26, r26
     ac8:	bb 1f       	adc	r27, r27
     aca:	0a 95       	dec	r16
     acc:	e1 f7       	brne	.-8      	; 0xac6 <__stack+0x267>
     ace:	fd 01       	movw	r30, r26
     ad0:	eb 56       	subi	r30, 0x6B	; 107
     ad2:	fb 4f       	sbci	r31, 0xFB	; 251
     ad4:	31 83       	std	Z+1, r19	; 0x01
     ad6:	20 83       	st	Z, r18
			a[currx][curry+1][3]=2;
     ad8:	af 56       	subi	r26, 0x6F	; 111
     ada:	bb 4f       	sbci	r27, 0xFB	; 251
     adc:	17 96       	adiw	r26, 0x07	; 7
     ade:	dc 93       	st	X, r29
     ae0:	ce 93       	st	-X, r28
     ae2:	16 97       	sbiw	r26, 0x06	; 6
			a[currx+1][curry][1]=currx;
			a[currx+1][curry][2]=curry+1;
     ae4:	f3 e0       	ldi	r31, 0x03	; 3
     ae6:	88 0f       	add	r24, r24
     ae8:	99 1f       	adc	r25, r25
     aea:	fa 95       	dec	r31
     aec:	e1 f7       	brne	.-8      	; 0xae6 <__stack+0x287>
     aee:	82 0f       	add	r24, r18
     af0:	93 1f       	adc	r25, r19
     af2:	e3 e0       	ldi	r30, 0x03	; 3
     af4:	88 0f       	add	r24, r24
     af6:	99 1f       	adc	r25, r25
     af8:	ea 95       	dec	r30
     afa:	e1 f7       	brne	.-8      	; 0xaf4 <__stack+0x295>
     afc:	fc 01       	movw	r30, r24
     afe:	eb 56       	subi	r30, 0x6B	; 107
     b00:	fb 4f       	sbci	r31, 0xFB	; 251
     b02:	51 83       	std	Z+1, r21	; 0x01
     b04:	40 83       	st	Z, r20
			a[currx+1][curry][1]=1;
     b06:	8d 56       	subi	r24, 0x6D	; 109
     b08:	9b 4f       	sbci	r25, 0xFB	; 251
     b0a:	21 e0       	ldi	r18, 0x01	; 1
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	fc 01       	movw	r30, r24
     b10:	31 83       	std	Z+1, r19	; 0x01
     b12:	20 83       	st	Z, r18
     b14:	e8 c1       	rjmp	.+976    	; 0xee6 <__stack+0x687>
		}
			
		else if(ori==3)
     b16:	c3 30       	cpi	r28, 0x03	; 3
     b18:	d1 05       	cpc	r29, r1
     b1a:	09 f0       	breq	.+2      	; 0xb1e <__stack+0x2bf>
     b1c:	4e c0       	rjmp	.+156    	; 0xbba <__stack+0x35b>
		{
			a[currx-1][curry][1]=currx;
     b1e:	80 91 fd 00 	lds	r24, 0x00FD
     b22:	90 91 fe 00 	lds	r25, 0x00FE
     b26:	8c 01       	movw	r16, r24
     b28:	01 50       	subi	r16, 0x01	; 1
     b2a:	10 40       	sbci	r17, 0x00	; 0
     b2c:	40 91 ff 00 	lds	r20, 0x00FF
     b30:	50 91 00 01 	lds	r21, 0x0100
     b34:	d8 01       	movw	r26, r16
     b36:	63 e0       	ldi	r22, 0x03	; 3
     b38:	aa 0f       	add	r26, r26
     b3a:	bb 1f       	adc	r27, r27
     b3c:	6a 95       	dec	r22
     b3e:	e1 f7       	brne	.-8      	; 0xb38 <__stack+0x2d9>
     b40:	a4 0f       	add	r26, r20
     b42:	b5 1f       	adc	r27, r21
     b44:	fd 01       	movw	r30, r26
     b46:	33 e0       	ldi	r19, 0x03	; 3
     b48:	ee 0f       	add	r30, r30
     b4a:	ff 1f       	adc	r31, r31
     b4c:	3a 95       	dec	r19
     b4e:	e1 f7       	brne	.-8      	; 0xb48 <__stack+0x2e9>
     b50:	ed 56       	subi	r30, 0x6D	; 109
     b52:	fb 4f       	sbci	r31, 0xFB	; 251
     b54:	91 83       	std	Z+1, r25	; 0x01
     b56:	80 83       	st	Z, r24
			a[currx-1][curry][2]=curry+1;
     b58:	ba 01       	movw	r22, r20
     b5a:	6f 5f       	subi	r22, 0xFF	; 255
     b5c:	7f 4f       	sbci	r23, 0xFF	; 255
     b5e:	23 e0       	ldi	r18, 0x03	; 3
     b60:	aa 0f       	add	r26, r26
     b62:	bb 1f       	adc	r27, r27
     b64:	2a 95       	dec	r18
     b66:	e1 f7       	brne	.-8      	; 0xb60 <__stack+0x301>
     b68:	fd 01       	movw	r30, r26
     b6a:	eb 56       	subi	r30, 0x6B	; 107
     b6c:	fb 4f       	sbci	r31, 0xFB	; 251
     b6e:	71 83       	std	Z+1, r23	; 0x01
     b70:	60 83       	st	Z, r22
			a[currx-1][curry][3]=1;
     b72:	af 56       	subi	r26, 0x6F	; 111
     b74:	bb 4f       	sbci	r27, 0xFB	; 251
     b76:	21 e0       	ldi	r18, 0x01	; 1
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	17 96       	adiw	r26, 0x07	; 7
     b7c:	3c 93       	st	X, r19
     b7e:	2e 93       	st	-X, r18
     b80:	16 97       	sbiw	r26, 0x06	; 6
			a[currx][curry+1][1]=currx-1;
     b82:	e3 e0       	ldi	r30, 0x03	; 3
     b84:	88 0f       	add	r24, r24
     b86:	99 1f       	adc	r25, r25
     b88:	ea 95       	dec	r30
     b8a:	e1 f7       	brne	.-8      	; 0xb84 <__stack+0x325>
     b8c:	86 0f       	add	r24, r22
     b8e:	97 1f       	adc	r25, r23
     b90:	fc 01       	movw	r30, r24
     b92:	33 e0       	ldi	r19, 0x03	; 3
     b94:	ee 0f       	add	r30, r30
     b96:	ff 1f       	adc	r31, r31
     b98:	3a 95       	dec	r19
     b9a:	e1 f7       	brne	.-8      	; 0xb94 <__stack+0x335>
     b9c:	ed 56       	subi	r30, 0x6D	; 109
     b9e:	fb 4f       	sbci	r31, 0xFB	; 251
     ba0:	11 83       	std	Z+1, r17	; 0x01
     ba2:	00 83       	st	Z, r16
			a[currx][curry+1][2]=curry;
     ba4:	23 e0       	ldi	r18, 0x03	; 3
     ba6:	88 0f       	add	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	2a 95       	dec	r18
     bac:	e1 f7       	brne	.-8      	; 0xba6 <__stack+0x347>
     bae:	fc 01       	movw	r30, r24
     bb0:	eb 56       	subi	r30, 0x6B	; 107
     bb2:	fb 4f       	sbci	r31, 0xFB	; 251
     bb4:	51 83       	std	Z+1, r21	; 0x01
     bb6:	40 83       	st	Z, r20
     bb8:	5b cf       	rjmp	.-330    	; 0xa70 <__stack+0x211>
			a[currx][curry+1][3]=2;
		}
		
		else if(ori==4)
     bba:	24 97       	sbiw	r28, 0x04	; 4
     bbc:	09 f0       	breq	.+2      	; 0xbc0 <__stack+0x361>
     bbe:	93 c1       	rjmp	.+806    	; 0xee6 <__stack+0x687>
		{
			a[currx][curry-1][1]=currx-1;
     bc0:	40 91 ff 00 	lds	r20, 0x00FF
     bc4:	50 91 00 01 	lds	r21, 0x0100
     bc8:	8a 01       	movw	r16, r20
     bca:	01 50       	subi	r16, 0x01	; 1
     bcc:	10 40       	sbci	r17, 0x00	; 0
     bce:	60 91 fd 00 	lds	r22, 0x00FD
     bd2:	70 91 fe 00 	lds	r23, 0x00FE
     bd6:	9b 01       	movw	r18, r22
     bd8:	21 50       	subi	r18, 0x01	; 1
     bda:	30 40       	sbci	r19, 0x00	; 0
     bdc:	db 01       	movw	r26, r22
     bde:	93 e0       	ldi	r25, 0x03	; 3
     be0:	aa 0f       	add	r26, r26
     be2:	bb 1f       	adc	r27, r27
     be4:	9a 95       	dec	r25
     be6:	e1 f7       	brne	.-8      	; 0xbe0 <__stack+0x381>
     be8:	a0 0f       	add	r26, r16
     bea:	b1 1f       	adc	r27, r17
     bec:	fd 01       	movw	r30, r26
     bee:	83 e0       	ldi	r24, 0x03	; 3
     bf0:	ee 0f       	add	r30, r30
     bf2:	ff 1f       	adc	r31, r31
     bf4:	8a 95       	dec	r24
     bf6:	e1 f7       	brne	.-8      	; 0xbf0 <__stack+0x391>
     bf8:	ed 56       	subi	r30, 0x6D	; 109
     bfa:	fb 4f       	sbci	r31, 0xFB	; 251
     bfc:	31 83       	std	Z+1, r19	; 0x01
     bfe:	20 83       	st	Z, r18
			a[currx][curry-1][2]=curry;  //situation wont arise
     c00:	93 e0       	ldi	r25, 0x03	; 3
     c02:	aa 0f       	add	r26, r26
     c04:	bb 1f       	adc	r27, r27
     c06:	9a 95       	dec	r25
     c08:	e1 f7       	brne	.-8      	; 0xc02 <__stack+0x3a3>
     c0a:	fd 01       	movw	r30, r26
     c0c:	eb 56       	subi	r30, 0x6B	; 107
     c0e:	fb 4f       	sbci	r31, 0xFB	; 251
     c10:	51 83       	std	Z+1, r21	; 0x01
     c12:	40 83       	st	Z, r20
			a[currx][curry-1][3]=2;
     c14:	af 56       	subi	r26, 0x6F	; 111
     c16:	bb 4f       	sbci	r27, 0xFB	; 251
     c18:	82 e0       	ldi	r24, 0x02	; 2
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	17 96       	adiw	r26, 0x07	; 7
     c1e:	9c 93       	st	X, r25
     c20:	8e 93       	st	-X, r24
     c22:	16 97       	sbiw	r26, 0x06	; 6
			a[currx-1][curry][1]=currx;
     c24:	b3 e0       	ldi	r27, 0x03	; 3
     c26:	22 0f       	add	r18, r18
     c28:	33 1f       	adc	r19, r19
     c2a:	ba 95       	dec	r27
     c2c:	e1 f7       	brne	.-8      	; 0xc26 <__stack+0x3c7>
     c2e:	24 0f       	add	r18, r20
     c30:	35 1f       	adc	r19, r21
     c32:	f9 01       	movw	r30, r18
     c34:	a3 e0       	ldi	r26, 0x03	; 3
     c36:	ee 0f       	add	r30, r30
     c38:	ff 1f       	adc	r31, r31
     c3a:	aa 95       	dec	r26
     c3c:	e1 f7       	brne	.-8      	; 0xc36 <__stack+0x3d7>
     c3e:	ed 56       	subi	r30, 0x6D	; 109
     c40:	fb 4f       	sbci	r31, 0xFB	; 251
     c42:	71 83       	std	Z+1, r23	; 0x01
     c44:	60 83       	st	Z, r22
			a[currx-1][curry][2]=curry-1;
     c46:	53 e0       	ldi	r21, 0x03	; 3
     c48:	22 0f       	add	r18, r18
     c4a:	33 1f       	adc	r19, r19
     c4c:	5a 95       	dec	r21
     c4e:	e1 f7       	brne	.-8      	; 0xc48 <__stack+0x3e9>
     c50:	f9 01       	movw	r30, r18
     c52:	eb 56       	subi	r30, 0x6B	; 107
     c54:	fb 4f       	sbci	r31, 0xFB	; 251
     c56:	11 83       	std	Z+1, r17	; 0x01
     c58:	00 83       	st	Z, r16
     c5a:	3e c1       	rjmp	.+636    	; 0xed8 <__stack+0x679>
			a[currx-1][curry][3]=1;
			
		}
	}

	else if(bridgeflag==4)
     c5c:	f4 e0       	ldi	r31, 0x04	; 4
     c5e:	ef 16       	cp	r14, r31
     c60:	f1 04       	cpc	r15, r1
     c62:	09 f0       	breq	.+2      	; 0xc66 <__stack+0x407>
     c64:	40 c1       	rjmp	.+640    	; 0xee6 <__stack+0x687>
	{
		if(ori==1)
     c66:	c0 91 72 00 	lds	r28, 0x0072
     c6a:	d0 91 73 00 	lds	r29, 0x0073
     c6e:	c1 30       	cpi	r28, 0x01	; 1
     c70:	d1 05       	cpc	r29, r1
     c72:	09 f0       	breq	.+2      	; 0xc76 <__stack+0x417>
     c74:	42 c0       	rjmp	.+132    	; 0xcfa <__stack+0x49b>
		{
			a[currx][curry][1]=currx+1;
     c76:	60 91 ff 00 	lds	r22, 0x00FF
     c7a:	70 91 00 01 	lds	r23, 0x0100
     c7e:	80 91 fd 00 	lds	r24, 0x00FD
     c82:	90 91 fe 00 	lds	r25, 0x00FE
     c86:	9c 01       	movw	r18, r24
     c88:	2f 5f       	subi	r18, 0xFF	; 255
     c8a:	3f 4f       	sbci	r19, 0xFF	; 255
     c8c:	dc 01       	movw	r26, r24
     c8e:	43 e0       	ldi	r20, 0x03	; 3
     c90:	aa 0f       	add	r26, r26
     c92:	bb 1f       	adc	r27, r27
     c94:	4a 95       	dec	r20
     c96:	e1 f7       	brne	.-8      	; 0xc90 <__stack+0x431>
     c98:	a6 0f       	add	r26, r22
     c9a:	b7 1f       	adc	r27, r23
     c9c:	fd 01       	movw	r30, r26
     c9e:	03 e0       	ldi	r16, 0x03	; 3
     ca0:	ee 0f       	add	r30, r30
     ca2:	ff 1f       	adc	r31, r31
     ca4:	0a 95       	dec	r16
     ca6:	e1 f7       	brne	.-8      	; 0xca0 <__stack+0x441>
     ca8:	ed 56       	subi	r30, 0x6D	; 109
     caa:	fb 4f       	sbci	r31, 0xFB	; 251
     cac:	31 83       	std	Z+1, r19	; 0x01
     cae:	20 83       	st	Z, r18
			a[currx][curry][2]=curry-1;
     cb0:	ab 01       	movw	r20, r22
     cb2:	41 50       	subi	r20, 0x01	; 1
     cb4:	50 40       	sbci	r21, 0x00	; 0
     cb6:	13 e0       	ldi	r17, 0x03	; 3
     cb8:	aa 0f       	add	r26, r26
     cba:	bb 1f       	adc	r27, r27
     cbc:	1a 95       	dec	r17
     cbe:	e1 f7       	brne	.-8      	; 0xcb8 <__stack+0x459>
     cc0:	fd 01       	movw	r30, r26
     cc2:	eb 56       	subi	r30, 0x6B	; 107
     cc4:	fb 4f       	sbci	r31, 0xFB	; 251
     cc6:	51 83       	std	Z+1, r21	; 0x01
     cc8:	40 83       	st	Z, r20
			a[currx][curry][3]=1;
     cca:	af 56       	subi	r26, 0x6F	; 111
     ccc:	bb 4f       	sbci	r27, 0xFB	; 251
     cce:	17 96       	adiw	r26, 0x07	; 7
     cd0:	dc 93       	st	X, r29
     cd2:	ce 93       	st	-X, r28
     cd4:	16 97       	sbiw	r26, 0x06	; 6
			a[currx+1][curry-1][1]=currx;
     cd6:	e3 e0       	ldi	r30, 0x03	; 3
     cd8:	22 0f       	add	r18, r18
     cda:	33 1f       	adc	r19, r19
     cdc:	ea 95       	dec	r30
     cde:	e1 f7       	brne	.-8      	; 0xcd8 <__stack+0x479>
     ce0:	24 0f       	add	r18, r20
     ce2:	35 1f       	adc	r19, r21
     ce4:	f9 01       	movw	r30, r18
     ce6:	53 e0       	ldi	r21, 0x03	; 3
     ce8:	ee 0f       	add	r30, r30
     cea:	ff 1f       	adc	r31, r31
     cec:	5a 95       	dec	r21
     cee:	e1 f7       	brne	.-8      	; 0xce8 <__stack+0x489>
     cf0:	ed 56       	subi	r30, 0x6D	; 109
     cf2:	fb 4f       	sbci	r31, 0xFB	; 251
     cf4:	91 83       	std	Z+1, r25	; 0x01
     cf6:	80 83       	st	Z, r24
     cf8:	8d c0       	rjmp	.+282    	; 0xe14 <__stack+0x5b5>
			a[currx+1][curry-1][2]=curry;
			a[currx+1][curry-1][3]=2;
		}
		else if(ori==2)
     cfa:	c2 30       	cpi	r28, 0x02	; 2
     cfc:	d1 05       	cpc	r29, r1
     cfe:	09 f0       	breq	.+2      	; 0xd02 <__stack+0x4a3>
     d00:	42 c0       	rjmp	.+132    	; 0xd86 <__stack+0x527>
		{
			a[currx][curry][1]=currx+1;
     d02:	60 91 ff 00 	lds	r22, 0x00FF
     d06:	70 91 00 01 	lds	r23, 0x0100
     d0a:	80 91 fd 00 	lds	r24, 0x00FD
     d0e:	90 91 fe 00 	lds	r25, 0x00FE
     d12:	9c 01       	movw	r18, r24
     d14:	2f 5f       	subi	r18, 0xFF	; 255
     d16:	3f 4f       	sbci	r19, 0xFF	; 255
     d18:	dc 01       	movw	r26, r24
     d1a:	43 e0       	ldi	r20, 0x03	; 3
     d1c:	aa 0f       	add	r26, r26
     d1e:	bb 1f       	adc	r27, r27
     d20:	4a 95       	dec	r20
     d22:	e1 f7       	brne	.-8      	; 0xd1c <__stack+0x4bd>
     d24:	a6 0f       	add	r26, r22
     d26:	b7 1f       	adc	r27, r23
     d28:	fd 01       	movw	r30, r26
     d2a:	03 e0       	ldi	r16, 0x03	; 3
     d2c:	ee 0f       	add	r30, r30
     d2e:	ff 1f       	adc	r31, r31
     d30:	0a 95       	dec	r16
     d32:	e1 f7       	brne	.-8      	; 0xd2c <__stack+0x4cd>
     d34:	ed 56       	subi	r30, 0x6D	; 109
     d36:	fb 4f       	sbci	r31, 0xFB	; 251
     d38:	31 83       	std	Z+1, r19	; 0x01
     d3a:	20 83       	st	Z, r18
			a[currx][curry][2]=curry+1;
     d3c:	ab 01       	movw	r20, r22
     d3e:	4f 5f       	subi	r20, 0xFF	; 255
     d40:	5f 4f       	sbci	r21, 0xFF	; 255
     d42:	13 e0       	ldi	r17, 0x03	; 3
     d44:	aa 0f       	add	r26, r26
     d46:	bb 1f       	adc	r27, r27
     d48:	1a 95       	dec	r17
     d4a:	e1 f7       	brne	.-8      	; 0xd44 <__stack+0x4e5>
     d4c:	fd 01       	movw	r30, r26
     d4e:	eb 56       	subi	r30, 0x6B	; 107
     d50:	fb 4f       	sbci	r31, 0xFB	; 251
     d52:	51 83       	std	Z+1, r21	; 0x01
     d54:	40 83       	st	Z, r20
			a[currx][curry][3]=2;
     d56:	af 56       	subi	r26, 0x6F	; 111
     d58:	bb 4f       	sbci	r27, 0xFB	; 251
     d5a:	17 96       	adiw	r26, 0x07	; 7
     d5c:	dc 93       	st	X, r29
     d5e:	ce 93       	st	-X, r28
     d60:	16 97       	sbiw	r26, 0x06	; 6
			a[currx+1][curry+1][1]=currx;
     d62:	e3 e0       	ldi	r30, 0x03	; 3
     d64:	22 0f       	add	r18, r18
     d66:	33 1f       	adc	r19, r19
     d68:	ea 95       	dec	r30
     d6a:	e1 f7       	brne	.-8      	; 0xd64 <__stack+0x505>
     d6c:	24 0f       	add	r18, r20
     d6e:	35 1f       	adc	r19, r21
     d70:	f9 01       	movw	r30, r18
     d72:	43 e0       	ldi	r20, 0x03	; 3
     d74:	ee 0f       	add	r30, r30
     d76:	ff 1f       	adc	r31, r31
     d78:	4a 95       	dec	r20
     d7a:	e1 f7       	brne	.-8      	; 0xd74 <__stack+0x515>
     d7c:	ed 56       	subi	r30, 0x6D	; 109
     d7e:	fb 4f       	sbci	r31, 0xFB	; 251
     d80:	91 83       	std	Z+1, r25	; 0x01
     d82:	80 83       	st	Z, r24
     d84:	9f c0       	rjmp	.+318    	; 0xec4 <__stack+0x665>
			a[currx+1][curry+1][2]=curry;
			a[currx+1][curry+1][3]=1;
		}
			
		else if(ori==3)
     d86:	c3 30       	cpi	r28, 0x03	; 3
     d88:	d1 05       	cpc	r29, r1
     d8a:	09 f0       	breq	.+2      	; 0xd8e <__stack+0x52f>
     d8c:	55 c0       	rjmp	.+170    	; 0xe38 <__stack+0x5d9>
		{
			a[currx][curry][1]=currx-1;
     d8e:	60 91 ff 00 	lds	r22, 0x00FF
     d92:	70 91 00 01 	lds	r23, 0x0100
     d96:	40 91 fd 00 	lds	r20, 0x00FD
     d9a:	50 91 fe 00 	lds	r21, 0x00FE
     d9e:	9a 01       	movw	r18, r20
     da0:	21 50       	subi	r18, 0x01	; 1
     da2:	30 40       	sbci	r19, 0x00	; 0
     da4:	da 01       	movw	r26, r20
     da6:	03 e0       	ldi	r16, 0x03	; 3
     da8:	aa 0f       	add	r26, r26
     daa:	bb 1f       	adc	r27, r27
     dac:	0a 95       	dec	r16
     dae:	e1 f7       	brne	.-8      	; 0xda8 <__stack+0x549>
     db0:	a6 0f       	add	r26, r22
     db2:	b7 1f       	adc	r27, r23
     db4:	fd 01       	movw	r30, r26
     db6:	13 e0       	ldi	r17, 0x03	; 3
     db8:	ee 0f       	add	r30, r30
     dba:	ff 1f       	adc	r31, r31
     dbc:	1a 95       	dec	r17
     dbe:	e1 f7       	brne	.-8      	; 0xdb8 <__stack+0x559>
     dc0:	ed 56       	subi	r30, 0x6D	; 109
     dc2:	fb 4f       	sbci	r31, 0xFB	; 251
     dc4:	31 83       	std	Z+1, r19	; 0x01
     dc6:	20 83       	st	Z, r18
			a[currx][curry][2]=curry+1;
     dc8:	8b 01       	movw	r16, r22
     dca:	0f 5f       	subi	r16, 0xFF	; 255
     dcc:	1f 4f       	sbci	r17, 0xFF	; 255
     dce:	93 e0       	ldi	r25, 0x03	; 3
     dd0:	aa 0f       	add	r26, r26
     dd2:	bb 1f       	adc	r27, r27
     dd4:	9a 95       	dec	r25
     dd6:	e1 f7       	brne	.-8      	; 0xdd0 <__stack+0x571>
     dd8:	fd 01       	movw	r30, r26
     dda:	eb 56       	subi	r30, 0x6B	; 107
     ddc:	fb 4f       	sbci	r31, 0xFB	; 251
     dde:	11 83       	std	Z+1, r17	; 0x01
     de0:	00 83       	st	Z, r16
			a[currx][curry][3]=1;
     de2:	af 56       	subi	r26, 0x6F	; 111
     de4:	bb 4f       	sbci	r27, 0xFB	; 251
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	17 96       	adiw	r26, 0x07	; 7
     dec:	9c 93       	st	X, r25
     dee:	8e 93       	st	-X, r24
     df0:	16 97       	sbiw	r26, 0x06	; 6
			a[currx-1][curry+1][1]=currx;
     df2:	b3 e0       	ldi	r27, 0x03	; 3
     df4:	22 0f       	add	r18, r18
     df6:	33 1f       	adc	r19, r19
     df8:	ba 95       	dec	r27
     dfa:	e1 f7       	brne	.-8      	; 0xdf4 <__stack+0x595>
     dfc:	20 0f       	add	r18, r16
     dfe:	31 1f       	adc	r19, r17
     e00:	f9 01       	movw	r30, r18
     e02:	a3 e0       	ldi	r26, 0x03	; 3
     e04:	ee 0f       	add	r30, r30
     e06:	ff 1f       	adc	r31, r31
     e08:	aa 95       	dec	r26
     e0a:	e1 f7       	brne	.-8      	; 0xe04 <__stack+0x5a5>
     e0c:	ed 56       	subi	r30, 0x6D	; 109
     e0e:	fb 4f       	sbci	r31, 0xFB	; 251
     e10:	51 83       	std	Z+1, r21	; 0x01
     e12:	40 83       	st	Z, r20
			a[currx-1][curry+1][2]=curry;
     e14:	93 e0       	ldi	r25, 0x03	; 3
     e16:	22 0f       	add	r18, r18
     e18:	33 1f       	adc	r19, r19
     e1a:	9a 95       	dec	r25
     e1c:	e1 f7       	brne	.-8      	; 0xe16 <__stack+0x5b7>
     e1e:	f9 01       	movw	r30, r18
     e20:	eb 56       	subi	r30, 0x6B	; 107
     e22:	fb 4f       	sbci	r31, 0xFB	; 251
     e24:	71 83       	std	Z+1, r23	; 0x01
     e26:	60 83       	st	Z, r22
			a[currx-1][curry+1][3]=2;
     e28:	2f 56       	subi	r18, 0x6F	; 111
     e2a:	3b 4f       	sbci	r19, 0xFB	; 251
     e2c:	82 e0       	ldi	r24, 0x02	; 2
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	e9 01       	movw	r28, r18
     e32:	9f 83       	std	Y+7, r25	; 0x07
     e34:	8e 83       	std	Y+6, r24	; 0x06
     e36:	57 c0       	rjmp	.+174    	; 0xee6 <__stack+0x687>
		}
		
		else if(ori==4)
     e38:	24 97       	sbiw	r28, 0x04	; 4
     e3a:	09 f0       	breq	.+2      	; 0xe3e <__stack+0x5df>
     e3c:	54 c0       	rjmp	.+168    	; 0xee6 <__stack+0x687>
		{
			a[currx][curry][1]=currx-1;
     e3e:	60 91 ff 00 	lds	r22, 0x00FF
     e42:	70 91 00 01 	lds	r23, 0x0100
     e46:	40 91 fd 00 	lds	r20, 0x00FD
     e4a:	50 91 fe 00 	lds	r21, 0x00FE
     e4e:	9a 01       	movw	r18, r20
     e50:	21 50       	subi	r18, 0x01	; 1
     e52:	30 40       	sbci	r19, 0x00	; 0
     e54:	da 01       	movw	r26, r20
     e56:	03 e0       	ldi	r16, 0x03	; 3
     e58:	aa 0f       	add	r26, r26
     e5a:	bb 1f       	adc	r27, r27
     e5c:	0a 95       	dec	r16
     e5e:	e1 f7       	brne	.-8      	; 0xe58 <__stack+0x5f9>
     e60:	a6 0f       	add	r26, r22
     e62:	b7 1f       	adc	r27, r23
     e64:	fd 01       	movw	r30, r26
     e66:	13 e0       	ldi	r17, 0x03	; 3
     e68:	ee 0f       	add	r30, r30
     e6a:	ff 1f       	adc	r31, r31
     e6c:	1a 95       	dec	r17
     e6e:	e1 f7       	brne	.-8      	; 0xe68 <__stack+0x609>
     e70:	ed 56       	subi	r30, 0x6D	; 109
     e72:	fb 4f       	sbci	r31, 0xFB	; 251
     e74:	31 83       	std	Z+1, r19	; 0x01
     e76:	20 83       	st	Z, r18
			a[currx][curry][2]=curry-1;
     e78:	8b 01       	movw	r16, r22
     e7a:	01 50       	subi	r16, 0x01	; 1
     e7c:	10 40       	sbci	r17, 0x00	; 0
     e7e:	93 e0       	ldi	r25, 0x03	; 3
     e80:	aa 0f       	add	r26, r26
     e82:	bb 1f       	adc	r27, r27
     e84:	9a 95       	dec	r25
     e86:	e1 f7       	brne	.-8      	; 0xe80 <__stack+0x621>
     e88:	fd 01       	movw	r30, r26
     e8a:	eb 56       	subi	r30, 0x6B	; 107
     e8c:	fb 4f       	sbci	r31, 0xFB	; 251
     e8e:	11 83       	std	Z+1, r17	; 0x01
     e90:	00 83       	st	Z, r16
			a[currx][curry][3]=2;
     e92:	af 56       	subi	r26, 0x6F	; 111
     e94:	bb 4f       	sbci	r27, 0xFB	; 251
     e96:	82 e0       	ldi	r24, 0x02	; 2
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	17 96       	adiw	r26, 0x07	; 7
     e9c:	9c 93       	st	X, r25
     e9e:	8e 93       	st	-X, r24
     ea0:	16 97       	sbiw	r26, 0x06	; 6
			a[currx-1][curry-1][1]=currx;
     ea2:	b3 e0       	ldi	r27, 0x03	; 3
     ea4:	22 0f       	add	r18, r18
     ea6:	33 1f       	adc	r19, r19
     ea8:	ba 95       	dec	r27
     eaa:	e1 f7       	brne	.-8      	; 0xea4 <__stack+0x645>
     eac:	20 0f       	add	r18, r16
     eae:	31 1f       	adc	r19, r17
     eb0:	f9 01       	movw	r30, r18
     eb2:	a3 e0       	ldi	r26, 0x03	; 3
     eb4:	ee 0f       	add	r30, r30
     eb6:	ff 1f       	adc	r31, r31
     eb8:	aa 95       	dec	r26
     eba:	e1 f7       	brne	.-8      	; 0xeb4 <__stack+0x655>
     ebc:	ed 56       	subi	r30, 0x6D	; 109
     ebe:	fb 4f       	sbci	r31, 0xFB	; 251
     ec0:	51 83       	std	Z+1, r21	; 0x01
     ec2:	40 83       	st	Z, r20
			a[currx-1][curry-1][2]=curry;
     ec4:	e3 e0       	ldi	r30, 0x03	; 3
     ec6:	22 0f       	add	r18, r18
     ec8:	33 1f       	adc	r19, r19
     eca:	ea 95       	dec	r30
     ecc:	e1 f7       	brne	.-8      	; 0xec6 <__stack+0x667>
     ece:	f9 01       	movw	r30, r18
     ed0:	eb 56       	subi	r30, 0x6B	; 107
     ed2:	fb 4f       	sbci	r31, 0xFB	; 251
     ed4:	71 83       	std	Z+1, r23	; 0x01
     ed6:	60 83       	st	Z, r22
			a[currx-1][curry-1][3]=1;
     ed8:	2f 56       	subi	r18, 0x6F	; 111
     eda:	3b 4f       	sbci	r19, 0xFB	; 251
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	f9 01       	movw	r30, r18
     ee2:	97 83       	std	Z+7, r25	; 0x07
     ee4:	86 83       	std	Z+6, r24	; 0x06
		}
	}
	bridgeflag=0;
     ee6:	10 92 0c 01 	sts	0x010C, r1
     eea:	10 92 0b 01 	sts	0x010B, r1
}
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	1f 91       	pop	r17
     ef4:	0f 91       	pop	r16
     ef6:	ff 90       	pop	r15
     ef8:	ef 90       	pop	r14
     efa:	08 95       	ret

00000efc <conventionmatch>:

void conventionmatch()
{
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	80 91 8d 04 	lds	r24, 0x048D
     f04:	90 91 8e 04 	lds	r25, 0x048E
     f08:	21 e0       	ldi	r18, 0x01	; 1
     f0a:	30 e0       	ldi	r19, 0x00	; 0
		{	
			a[it][jt][2]=7-a[it][jt][2];
		}
	}*/

	for(it=1;it<=8;it++)
     f0c:	6c e3       	ldi	r22, 0x3C	; 60
     f0e:	70 e0       	ldi	r23, 0x00	; 0
     f10:	47 c0       	rjmp	.+142    	; 0xfa0 <conventionmatch+0xa4>
     f12:	f9 01       	movw	r30, r18
     f14:	96 e0       	ldi	r25, 0x06	; 6
     f16:	ee 0f       	add	r30, r30
     f18:	ff 1f       	adc	r31, r31
     f1a:	9a 95       	dec	r25
     f1c:	e1 f7       	brne	.-8      	; 0xf16 <conventionmatch+0x1a>
     f1e:	ef 56       	subi	r30, 0x6F	; 111
     f20:	fb 4f       	sbci	r31, 0xFB	; 251
     f22:	e9 01       	movw	r28, r18
     f24:	cc 0f       	add	r28, r28
     f26:	dd 1f       	adc	r29, r29
     f28:	c9 01       	movw	r24, r18
     f2a:	b3 e0       	ldi	r27, 0x03	; 3
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	ba 95       	dec	r27
     f32:	e1 f7       	brne	.-8      	; 0xf2c <conventionmatch+0x30>
     f34:	c8 0f       	add	r28, r24
     f36:	d9 1f       	adc	r29, r25
     f38:	cc 0f       	add	r28, r28
     f3a:	dd 1f       	adc	r29, r29
     f3c:	cb 53       	subi	r28, 0x3B	; 59
     f3e:	dc 4f       	sbci	r29, 0xFC	; 252
     f40:	26 9f       	mul	r18, r22
     f42:	d0 01       	movw	r26, r0
     f44:	27 9f       	mul	r18, r23
     f46:	b0 0d       	add	r27, r0
     f48:	36 9f       	mul	r19, r22
     f4a:	b0 0d       	add	r27, r0
     f4c:	11 24       	eor	r1, r1
     f4e:	ab 59       	subi	r26, 0x9B	; 155
     f50:	be 4f       	sbci	r27, 0xFE	; 254
     f52:	40 e0       	ldi	r20, 0x00	; 0
     f54:	50 e0       	ldi	r21, 0x00	; 0
     f56:	19 c0       	rjmp	.+50     	; 0xf8a <conventionmatch+0x8e>
	{
		for(jt=1;jt<=8;jt++)
		{
			test[it][jt]=a[it-1][jt-1][0];
     f58:	e8 54       	subi	r30, 0x48	; 72
     f5a:	f0 40       	sbci	r31, 0x00	; 0
     f5c:	81 91       	ld	r24, Z+
     f5e:	91 91       	ld	r25, Z+
     f60:	89 93       	st	Y+, r24
     f62:	99 93       	st	Y+, r25
			bridge[it][jt][0]=a[it-1][jt-1][1];
     f64:	81 91       	ld	r24, Z+
     f66:	91 91       	ld	r25, Z+
     f68:	11 96       	adiw	r26, 0x01	; 1
     f6a:	9c 93       	st	X, r25
     f6c:	8e 93       	st	-X, r24
			bridge[it][jt][1]=a[it-1][jt-1][2];
     f6e:	81 91       	ld	r24, Z+
     f70:	91 91       	ld	r25, Z+
     f72:	13 96       	adiw	r26, 0x03	; 3
     f74:	9c 93       	st	X, r25
     f76:	8e 93       	st	-X, r24
     f78:	12 97       	sbiw	r26, 0x02	; 2
			bridge[it][jt][2]=a[it-1][jt-1][3];
     f7a:	80 81       	ld	r24, Z
     f7c:	91 81       	ldd	r25, Z+1	; 0x01
     f7e:	ee 5b       	subi	r30, 0xBE	; 190
     f80:	ff 4f       	sbci	r31, 0xFF	; 255
     f82:	15 96       	adiw	r26, 0x05	; 5
     f84:	9c 93       	st	X, r25
     f86:	8e 93       	st	-X, r24
     f88:	14 97       	sbiw	r26, 0x04	; 4
     f8a:	4f 5f       	subi	r20, 0xFF	; 255
     f8c:	5f 4f       	sbci	r21, 0xFF	; 255
     f8e:	38 96       	adiw	r30, 0x08	; 8
     f90:	16 96       	adiw	r26, 0x06	; 6
		}
	}*/

	for(it=1;it<=8;it++)
	{
		for(jt=1;jt<=8;jt++)
     f92:	49 30       	cpi	r20, 0x09	; 9
     f94:	51 05       	cpc	r21, r1
     f96:	01 f7       	brne	.-64     	; 0xf58 <conventionmatch+0x5c>
     f98:	2f 5f       	subi	r18, 0xFF	; 255
     f9a:	3f 4f       	sbci	r19, 0xFF	; 255
     f9c:	89 e0       	ldi	r24, 0x09	; 9
     f9e:	90 e0       	ldi	r25, 0x00	; 0
		{	
			a[it][jt][2]=7-a[it][jt][2];
		}
	}*/

	for(it=1;it<=8;it++)
     fa0:	29 30       	cpi	r18, 0x09	; 9
     fa2:	31 05       	cpc	r19, r1
     fa4:	08 f4       	brcc	.+2      	; 0xfa8 <conventionmatch+0xac>
     fa6:	b5 cf       	rjmp	.-150    	; 0xf12 <conventionmatch+0x16>
     fa8:	90 93 8e 04 	sts	0x048E, r25
     fac:	80 93 8d 04 	sts	0x048D, r24
     fb0:	30 93 8c 04 	sts	0x048C, r19
     fb4:	20 93 8b 04 	sts	0x048B, r18
			bridge[it][jt][0]=a[it-1][jt-1][1];
			bridge[it][jt][1]=a[it-1][jt-1][2];
			bridge[it][jt][2]=a[it-1][jt-1][3];
		}
	}
}	
     fb8:	df 91       	pop	r29
     fba:	cf 91       	pop	r28
     fbc:	08 95       	ret

00000fbe <turn>:


void turn (char dir)        //  used for taking turns at intersections

{
    switch (dir)
     fbe:	8e 34       	cpi	r24, 0x4E	; 78
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <turn+0x6>
     fc2:	a9 c0       	rjmp	.+338    	; 0x1116 <turn+0x158>
     fc4:	8f 34       	cpi	r24, 0x4F	; 79
     fc6:	20 f4       	brcc	.+8      	; 0xfd0 <turn+0x12>
     fc8:	8c 34       	cpi	r24, 0x4C	; 76
     fca:	09 f0       	breq	.+2      	; 0xfce <turn+0x10>
     fcc:	a8 c0       	rjmp	.+336    	; 0x111e <turn+0x160>
     fce:	06 c0       	rjmp	.+12     	; 0xfdc <turn+0x1e>
     fd0:	82 35       	cpi	r24, 0x52	; 82
     fd2:	a1 f1       	breq	.+104    	; 0x103c <turn+0x7e>
     fd4:	85 35       	cpi	r24, 0x55	; 85
     fd6:	09 f0       	breq	.+2      	; 0xfda <turn+0x1c>
     fd8:	a2 c0       	rjmp	.+324    	; 0x111e <turn+0x160>
     fda:	5e c0       	rjmp	.+188    	; 0x1098 <turn+0xda>
	{
	
	 case 'L':
	   PORTD &=~(1<<4);
     fdc:	94 98       	cbi	0x12, 4	; 18
       PORTD |=(1<<5);    // left turn 
     fde:	95 9a       	sbi	0x12, 5	; 18
       PORTD |=(1<<6);
     fe0:	96 9a       	sbi	0x12, 6	; 18
       PORTD &=~(1<<7); 
     fe2:	97 98       	cbi	0x12, 7	; 18
     fe4:	8c ea       	ldi	r24, 0xAC	; 172
     fe6:	9d e0       	ldi	r25, 0x0D	; 13
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fe8:	20 e9       	ldi	r18, 0x90	; 144
     fea:	31 e0       	ldi	r19, 0x01	; 1
     fec:	f9 01       	movw	r30, r18
     fee:	31 97       	sbiw	r30, 0x01	; 1
     ff0:	f1 f7       	brne	.-4      	; 0xfee <turn+0x30>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff4:	d9 f7       	brne	.-10     	; 0xfec <turn+0x2e>
       _delay_ms(350);
	   
       while(!(PINA&(1<<3))) ;
     ff6:	cb 9b       	sbis	0x19, 3	; 25
     ff8:	fe cf       	rjmp	.-4      	; 0xff6 <turn+0x38>
     ffa:	84 ef       	ldi	r24, 0xF4	; 244
     ffc:	91 e0       	ldi	r25, 0x01	; 1
     ffe:	20 e9       	ldi	r18, 0x90	; 144
    1000:	31 e0       	ldi	r19, 0x01	; 1
    1002:	f9 01       	movw	r30, r18
    1004:	31 97       	sbiw	r30, 0x01	; 1
    1006:	f1 f7       	brne	.-4      	; 0x1004 <turn+0x46>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1008:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    100a:	d9 f7       	brne	.-10     	; 0x1002 <turn+0x44>
	  _delay_ms(50);
          PORTD |=(1<<4);
    100c:	94 9a       	sbi	0x12, 4	; 18
          PORTD |=(1<<5);    // stop as the 3th sensor senses the line 
    100e:	95 9a       	sbi	0x12, 5	; 18
          PORTD |=(1<<6);
    1010:	96 9a       	sbi	0x12, 6	; 18
          PORTD |=(1<<7);
    1012:	97 9a       	sbi	0x12, 7	; 18
	   
	   if(ori==2)
    1014:	80 91 72 00 	lds	r24, 0x0072
    1018:	90 91 73 00 	lds	r25, 0x0073
    101c:	82 30       	cpi	r24, 0x02	; 2
    101e:	91 05       	cpc	r25, r1
    1020:	09 f4       	brne	.+2      	; 0x1024 <turn+0x66>
    1022:	6d c0       	rjmp	.+218    	; 0x10fe <turn+0x140>
	   ori=1;
	   else if(ori==3)
    1024:	83 30       	cpi	r24, 0x03	; 3
    1026:	91 05       	cpc	r25, r1
    1028:	09 f4       	brne	.+2      	; 0x102c <turn+0x6e>
    102a:	6e c0       	rjmp	.+220    	; 0x1108 <turn+0x14a>
	   ori=2;
	   else if(ori==1)
    102c:	81 30       	cpi	r24, 0x01	; 1
    102e:	91 05       	cpc	r25, r1
    1030:	09 f4       	brne	.+2      	; 0x1034 <turn+0x76>
    1032:	5f c0       	rjmp	.+190    	; 0x10f2 <turn+0x134>
	   ori=4;
	   else if(ori==4)
    1034:	04 97       	sbiw	r24, 0x04	; 4
    1036:	09 f0       	breq	.+2      	; 0x103a <turn+0x7c>
    1038:	72 c0       	rjmp	.+228    	; 0x111e <turn+0x160>
    103a:	55 c0       	rjmp	.+170    	; 0x10e6 <turn+0x128>
	   break;
		 
		 
     case 'R' : 
	   
	   PORTD |=(1<<4);
    103c:	94 9a       	sbi	0x12, 4	; 18
       PORTD &=~(1<<5);
    103e:	95 98       	cbi	0x12, 5	; 18
       PORTD &=~(1<<6);   // right turn
    1040:	96 98       	cbi	0x12, 6	; 18
       PORTD |=(1<<7);   
    1042:	97 9a       	sbi	0x12, 7	; 18
    1044:	8c ea       	ldi	r24, 0xAC	; 172
    1046:	9d e0       	ldi	r25, 0x0D	; 13
    1048:	20 e9       	ldi	r18, 0x90	; 144
    104a:	31 e0       	ldi	r19, 0x01	; 1
    104c:	f9 01       	movw	r30, r18
    104e:	31 97       	sbiw	r30, 0x01	; 1
    1050:	f1 f7       	brne	.-4      	; 0x104e <turn+0x90>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1052:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1054:	d9 f7       	brne	.-10     	; 0x104c <turn+0x8e>
       _delay_ms(350);
	   
	   while(!(PINA&(1<<3))) ;
    1056:	cb 9b       	sbis	0x19, 3	; 25
    1058:	fe cf       	rjmp	.-4      	; 0x1056 <turn+0x98>
    105a:	84 ef       	ldi	r24, 0xF4	; 244
    105c:	91 e0       	ldi	r25, 0x01	; 1
    105e:	20 e9       	ldi	r18, 0x90	; 144
    1060:	31 e0       	ldi	r19, 0x01	; 1
    1062:	f9 01       	movw	r30, r18
    1064:	31 97       	sbiw	r30, 0x01	; 1
    1066:	f1 f7       	brne	.-4      	; 0x1064 <turn+0xa6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1068:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    106a:	d9 f7       	brne	.-10     	; 0x1062 <turn+0xa4>
	   	  _delay_ms(50);

          PORTD |=(1<<4);
    106c:	94 9a       	sbi	0x12, 4	; 18
          PORTD |=(1<<5);    // stop as the 3nd sensor senses the line 
    106e:	95 9a       	sbi	0x12, 5	; 18
          PORTD |=(1<<6);
    1070:	96 9a       	sbi	0x12, 6	; 18
          PORTD |=(1<<7);
    1072:	97 9a       	sbi	0x12, 7	; 18
       
	   if(ori==1)
    1074:	80 91 72 00 	lds	r24, 0x0072
    1078:	90 91 73 00 	lds	r25, 0x0073
    107c:	81 30       	cpi	r24, 0x01	; 1
    107e:	91 05       	cpc	r25, r1
    1080:	09 f4       	brne	.+2      	; 0x1084 <turn+0xc6>
    1082:	42 c0       	rjmp	.+132    	; 0x1108 <turn+0x14a>
	   ori=2;
	   else if(ori==2)
    1084:	82 30       	cpi	r24, 0x02	; 2
    1086:	91 05       	cpc	r25, r1
    1088:	71 f1       	breq	.+92     	; 0x10e6 <turn+0x128>
	   ori=3;  
	   else if(ori==3)
    108a:	83 30       	cpi	r24, 0x03	; 3
    108c:	91 05       	cpc	r25, r1
    108e:	89 f1       	breq	.+98     	; 0x10f2 <turn+0x134>
	   ori=4;
	   else if(ori==4)
    1090:	04 97       	sbiw	r24, 0x04	; 4
    1092:	09 f0       	breq	.+2      	; 0x1096 <turn+0xd8>
    1094:	44 c0       	rjmp	.+136    	; 0x111e <turn+0x160>
    1096:	33 c0       	rjmp	.+102    	; 0x10fe <turn+0x140>

 	 
	 case 'U' :
	   
	   
	   PORTD |= (1<<4);
    1098:	94 9a       	sbi	0x12, 4	; 18
       PORTD &=~ (1<<5);
    109a:	95 98       	cbi	0x12, 5	; 18
       PORTD &=~ (1<<6);    // U -turn
    109c:	96 98       	cbi	0x12, 6	; 18
       PORTD |= (1<<7);
    109e:	97 9a       	sbi	0x12, 7	; 18
    10a0:	88 eb       	ldi	r24, 0xB8	; 184
    10a2:	9b e0       	ldi	r25, 0x0B	; 11
    10a4:	20 e9       	ldi	r18, 0x90	; 144
    10a6:	31 e0       	ldi	r19, 0x01	; 1
    10a8:	f9 01       	movw	r30, r18
    10aa:	31 97       	sbiw	r30, 0x01	; 1
    10ac:	f1 f7       	brne	.-4      	; 0x10aa <turn+0xec>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10b0:	d9 f7       	brne	.-10     	; 0x10a8 <turn+0xea>
	   
	   _delay_ms(300);
	   
	   while(!(PINA&(1<<3)));
    10b2:	cb 9b       	sbis	0x19, 3	; 25
    10b4:	fe cf       	rjmp	.-4      	; 0x10b2 <turn+0xf4>
	   while((PINA&(1<<3)));
    10b6:	cb 99       	sbic	0x19, 3	; 25
    10b8:	fe cf       	rjmp	.-4      	; 0x10b6 <turn+0xf8>
	   while(!(PINA&(1<<3)));
    10ba:	cb 9b       	sbis	0x19, 3	; 25
    10bc:	fe cf       	rjmp	.-4      	; 0x10ba <turn+0xfc>
    10be:	84 ef       	ldi	r24, 0xF4	; 244
    10c0:	91 e0       	ldi	r25, 0x01	; 1
    10c2:	20 e9       	ldi	r18, 0x90	; 144
    10c4:	31 e0       	ldi	r19, 0x01	; 1
    10c6:	f9 01       	movw	r30, r18
    10c8:	31 97       	sbiw	r30, 0x01	; 1
    10ca:	f1 f7       	brne	.-4      	; 0x10c8 <turn+0x10a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ce:	d9 f7       	brne	.-10     	; 0x10c6 <turn+0x108>
	   	  _delay_ms(50);

          PORTD |=(1<<4);
    10d0:	94 9a       	sbi	0x12, 4	; 18
          PORTD |=(1<<5);    // stop as the 5th sensor senses the line 
    10d2:	95 9a       	sbi	0x12, 5	; 18
          PORTD |=(1<<6);
    10d4:	96 9a       	sbi	0x12, 6	; 18
          PORTD |=(1<<7);
    10d6:	97 9a       	sbi	0x12, 7	; 18
       
        if(ori==1)
    10d8:	80 91 72 00 	lds	r24, 0x0072
    10dc:	90 91 73 00 	lds	r25, 0x0073
    10e0:	81 30       	cpi	r24, 0x01	; 1
    10e2:	91 05       	cpc	r25, r1
    10e4:	19 f4       	brne	.+6      	; 0x10ec <turn+0x12e>
		ori=3;
    10e6:	83 e0       	ldi	r24, 0x03	; 3
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	10 c0       	rjmp	.+32     	; 0x110c <turn+0x14e>
		else if(ori==2)
    10ec:	82 30       	cpi	r24, 0x02	; 2
    10ee:	91 05       	cpc	r25, r1
    10f0:	19 f4       	brne	.+6      	; 0x10f8 <turn+0x13a>
	    ori=4;  
    10f2:	84 e0       	ldi	r24, 0x04	; 4
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	0a c0       	rjmp	.+20     	; 0x110c <turn+0x14e>
	    else if(ori==3)
    10f8:	83 30       	cpi	r24, 0x03	; 3
    10fa:	91 05       	cpc	r25, r1
    10fc:	19 f4       	brne	.+6      	; 0x1104 <turn+0x146>
	    ori=1;
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	04 c0       	rjmp	.+8      	; 0x110c <turn+0x14e>
	    else if(ori==4)
    1104:	04 97       	sbiw	r24, 0x04	; 4
    1106:	59 f4       	brne	.+22     	; 0x111e <turn+0x160>
	    ori=2;
    1108:	82 e0       	ldi	r24, 0x02	; 2
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	90 93 73 00 	sts	0x0073, r25
    1110:	80 93 72 00 	sts	0x0072, r24
    1114:	08 95       	ret
	    break ;                 // go straight i.e follow the line ,no turn
		
		
	 case 'N':
	    
		  PORTD |=(1<<4);
    1116:	94 9a       	sbi	0x12, 4	; 18
          PORTD |=(1<<5);    
    1118:	95 9a       	sbi	0x12, 5	; 18
          PORTD |=(1<<6);
    111a:	96 9a       	sbi	0x12, 6	; 18
          PORTD |=(1<<7);
    111c:	97 9a       	sbi	0x12, 7	; 18
    111e:	08 95       	ret

00001120 <update>:
}


void update()
{
 if(f2==0)
    1120:	80 91 03 01 	lds	r24, 0x0103
    1124:	90 91 04 01 	lds	r25, 0x0104
    1128:	89 2b       	or	r24, r25
    112a:	c1 f5       	brne	.+112    	; 0x119c <update+0x7c>
 { 
   if(ori==1)
    112c:	80 91 72 00 	lds	r24, 0x0072
    1130:	90 91 73 00 	lds	r25, 0x0073
    1134:	81 30       	cpi	r24, 0x01	; 1
    1136:	91 05       	cpc	r25, r1
    1138:	31 f4       	brne	.+12     	; 0x1146 <update+0x26>
   currx++;
    113a:	80 91 fd 00 	lds	r24, 0x00FD
    113e:	90 91 fe 00 	lds	r25, 0x00FE
    1142:	01 96       	adiw	r24, 0x01	; 1
    1144:	11 c0       	rjmp	.+34     	; 0x1168 <update+0x48>
   else if(ori==2)
    1146:	82 30       	cpi	r24, 0x02	; 2
    1148:	91 05       	cpc	r25, r1
    114a:	31 f4       	brne	.+12     	; 0x1158 <update+0x38>
   curry++;
    114c:	80 91 ff 00 	lds	r24, 0x00FF
    1150:	90 91 00 01 	lds	r25, 0x0100
    1154:	01 96       	adiw	r24, 0x01	; 1
    1156:	14 c0       	rjmp	.+40     	; 0x1180 <update+0x60>
   else if(ori==3)
    1158:	83 30       	cpi	r24, 0x03	; 3
    115a:	91 05       	cpc	r25, r1
    115c:	51 f4       	brne	.+20     	; 0x1172 <update+0x52>
   currx--;
    115e:	80 91 fd 00 	lds	r24, 0x00FD
    1162:	90 91 fe 00 	lds	r25, 0x00FE
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	90 93 fe 00 	sts	0x00FE, r25
    116c:	80 93 fd 00 	sts	0x00FD, r24
    1170:	0b c0       	rjmp	.+22     	; 0x1188 <update+0x68>
   else if(ori==4)
    1172:	04 97       	sbiw	r24, 0x04	; 4
    1174:	49 f4       	brne	.+18     	; 0x1188 <update+0x68>
   curry--;
    1176:	80 91 ff 00 	lds	r24, 0x00FF
    117a:	90 91 00 01 	lds	r25, 0x0100
    117e:	01 97       	sbiw	r24, 0x01	; 1
    1180:	90 93 00 01 	sts	0x0100, r25
    1184:	80 93 ff 00 	sts	0x00FF, r24
   
   f2=1;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	90 93 04 01 	sts	0x0104, r25
    1190:	80 93 03 01 	sts	0x0103, r24
   PORTD^=(1<<1);
    1194:	82 b3       	in	r24, 0x12	; 18
    1196:	92 e0       	ldi	r25, 0x02	; 2
    1198:	89 27       	eor	r24, r25
    119a:	82 bb       	out	0x12, r24	; 18
    119c:	08 95       	ret

0000119e <decide>:
 }
}

char decide()
{  
   if(currx==0 && curry == 7)
    119e:	80 91 fd 00 	lds	r24, 0x00FD
    11a2:	90 91 fe 00 	lds	r25, 0x00FE
    11a6:	00 97       	sbiw	r24, 0x00	; 0
    11a8:	51 f4       	brne	.+20     	; 0x11be <decide+0x20>
    11aa:	80 91 ff 00 	lds	r24, 0x00FF
    11ae:	90 91 00 01 	lds	r25, 0x0100
    11b2:	07 97       	sbiw	r24, 0x07	; 7
    11b4:	11 f0       	breq	.+4      	; 0x11ba <decide+0x1c>
    11b6:	82 e5       	ldi	r24, 0x52	; 82
    11b8:	08 95       	ret
    11ba:	8e e4       	ldi	r24, 0x4E	; 78
    11bc:	08 95       	ret
   return 'N'; 
   else if(currx==0)
   return 'R';
   else if(currx==7)
    11be:	07 97       	sbiw	r24, 0x07	; 7
    11c0:	11 f0       	breq	.+4      	; 0x11c6 <decide+0x28>
    11c2:	83 e5       	ldi	r24, 0x53	; 83
    11c4:	08 95       	ret
    11c6:	8c e4       	ldi	r24, 0x4C	; 76
   return 'L';  
   else if(currx<7&&currx>0)
   return 'S';
   else
   return 'S';
}
    11c8:	08 95       	ret

000011ca <inch>:

void inch() 
   {    
	   PORTD |= (1<<4);
    11ca:	94 9a       	sbi	0x12, 4	; 18
       PORTD &=~(1<<5);
    11cc:	95 98       	cbi	0x12, 5	; 18
       PORTD |= (1<<6);   // going  inch forward
    11ce:	96 9a       	sbi	0x12, 6	; 18
       PORTD &=~(1<<7);
    11d0:	97 98       	cbi	0x12, 7	; 18
    11d2:	84 ec       	ldi	r24, 0xC4	; 196
    11d4:	99 e0       	ldi	r25, 0x09	; 9
    11d6:	20 e9       	ldi	r18, 0x90	; 144
    11d8:	31 e0       	ldi	r19, 0x01	; 1
    11da:	f9 01       	movw	r30, r18
    11dc:	31 97       	sbiw	r30, 0x01	; 1
    11de:	f1 f7       	brne	.-4      	; 0x11dc <inch+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e2:	d9 f7       	brne	.-10     	; 0x11da <inch+0x10>
	   _delay_ms(250);
	   PORTD |= (1<<4);
    11e4:	94 9a       	sbi	0x12, 4	; 18
       PORTD |=(1<<5);
    11e6:	95 9a       	sbi	0x12, 5	; 18
       PORTD |= (1<<6);  
    11e8:	96 9a       	sbi	0x12, 6	; 18
       PORTD |=(1<<7);
    11ea:	97 9a       	sbi	0x12, 7	; 18
    }
    11ec:	08 95       	ret

000011ee <inchb>:


void inchb() 
   {    
	   PORTD &=~ (1<<4);
    11ee:	94 98       	cbi	0x12, 4	; 18
       PORTD |=(1<<5);
    11f0:	95 9a       	sbi	0x12, 5	; 18
       PORTD &=~ (1<<6);   // going  inch backward 
    11f2:	96 98       	cbi	0x12, 6	; 18
       PORTD |=(1<<7);
    11f4:	97 9a       	sbi	0x12, 7	; 18
    11f6:	88 eb       	ldi	r24, 0xB8	; 184
    11f8:	9b e0       	ldi	r25, 0x0B	; 11
    11fa:	20 e9       	ldi	r18, 0x90	; 144
    11fc:	31 e0       	ldi	r19, 0x01	; 1
    11fe:	f9 01       	movw	r30, r18
    1200:	31 97       	sbiw	r30, 0x01	; 1
    1202:	f1 f7       	brne	.-4      	; 0x1200 <inchb+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1204:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1206:	d9 f7       	brne	.-10     	; 0x11fe <inchb+0x10>
	   _delay_ms(300);
	   PORTD |= (1<<4);
    1208:	94 9a       	sbi	0x12, 4	; 18
       PORTD |=(1<<5);
    120a:	95 9a       	sbi	0x12, 5	; 18
       PORTD |= (1<<6);  
    120c:	96 9a       	sbi	0x12, 6	; 18
       PORTD |=(1<<7);
    120e:	97 9a       	sbi	0x12, 7	; 18
    }
    1210:	08 95       	ret

00001212 <linefollower1>:
void linefollower1()
{
   
   while(1)
   {
      if((PINA & (1<<2))&&(PINA & (1<<3))&&(PINA & (1<<4))) //111== forward
    1212:	ca 9b       	sbis	0x19, 2	; 25
    1214:	07 c0       	rjmp	.+14     	; 0x1224 <linefollower1+0x12>
    1216:	cb 9b       	sbis	0x19, 3	; 25
    1218:	05 c0       	rjmp	.+10     	; 0x1224 <linefollower1+0x12>
    121a:	cc 9b       	sbis	0x19, 4	; 25
    121c:	03 c0       	rjmp	.+6      	; 0x1224 <linefollower1+0x12>
   { 
      
       
             
       PORTD |= (1<<4);
    121e:	94 9a       	sbi	0x12, 4	; 18
       PORTD &=~(1<<5);
    1220:	95 98       	cbi	0x12, 5	; 18
    1222:	08 c0       	rjmp	.+16     	; 0x1234 <linefollower1+0x22>
       PORTD |= (1<<6);
       PORTD &=~(1<<7);
       
   }
   
   else if ((PINA & (1<<2))&&(PINA & (1<<3)) && !(PINA & (1<<4))) // 110 - slight left
    1224:	ca 9b       	sbis	0x19, 2	; 25
    1226:	09 c0       	rjmp	.+18     	; 0x123a <linefollower1+0x28>
    1228:	cb 9b       	sbis	0x19, 3	; 25
    122a:	07 c0       	rjmp	.+14     	; 0x123a <linefollower1+0x28>
    122c:	cc 99       	sbic	0x19, 4	; 25
    122e:	05 c0       	rjmp	.+10     	; 0x123a <linefollower1+0x28>
   {
       PORTD |=(1<<4);
    1230:	94 9a       	sbi	0x12, 4	; 18
       PORTD |=(1<<5);
    1232:	95 9a       	sbi	0x12, 5	; 18
       PORTD |=(1<<6);
    1234:	96 9a       	sbi	0x12, 6	; 18
       PORTD &=~(1<<7);  
    1236:	97 98       	cbi	0x12, 7	; 18
    1238:	ec cf       	rjmp	.-40     	; 0x1212 <linefollower1>
	 
	 
   }
   
   else if (!(PINA & (1<<2))&&(PINA & (1<<3)) && (PINA & (1<<4))) // 011 - slight right
    123a:	ca 99       	sbic	0x19, 2	; 25
    123c:	08 c0       	rjmp	.+16     	; 0x124e <linefollower1+0x3c>
    123e:	cb 9b       	sbis	0x19, 3	; 25
    1240:	06 c0       	rjmp	.+12     	; 0x124e <linefollower1+0x3c>
    1242:	cc 9b       	sbis	0x19, 4	; 25
    1244:	04 c0       	rjmp	.+8      	; 0x124e <linefollower1+0x3c>
   {
       PORTD |=(1<<4);
    1246:	94 9a       	sbi	0x12, 4	; 18
       PORTD &=~(1<<5);
    1248:	95 98       	cbi	0x12, 5	; 18
       PORTD |=(1<<6);
    124a:	96 9a       	sbi	0x12, 6	; 18
    124c:	09 c0       	rjmp	.+18     	; 0x1260 <linefollower1+0x4e>
       PORTD |=(1<<7);     
	 
   }
   
   else if(!(PINA & (1<<2))&&!(PINA & (1<<3)) && (PINA & (1<<4)))// 001  = right  
    124e:	ca 99       	sbic	0x19, 2	; 25
    1250:	09 c0       	rjmp	.+18     	; 0x1264 <linefollower1+0x52>
    1252:	cb 99       	sbic	0x19, 3	; 25
    1254:	07 c0       	rjmp	.+14     	; 0x1264 <linefollower1+0x52>
    1256:	cc 9b       	sbis	0x19, 4	; 25
    1258:	05 c0       	rjmp	.+10     	; 0x1264 <linefollower1+0x52>
   { 
     
      
       PORTD |=(1<<4);
    125a:	94 9a       	sbi	0x12, 4	; 18
       PORTD &=~(1<<5);
    125c:	95 98       	cbi	0x12, 5	; 18
       PORTD &=~(1<<6);
    125e:	96 98       	cbi	0x12, 6	; 18
       PORTD |=(1<<7);     
    1260:	97 9a       	sbi	0x12, 7	; 18
    1262:	d7 cf       	rjmp	.-82     	; 0x1212 <linefollower1>
   }
    
  
      
   else if((PINA & (1<<2))&&!(PINA & (1<<3)) && !(PINA & (1<<4)))// 100 - left
    1264:	ca 9b       	sbis	0x19, 2	; 25
    1266:	06 c0       	rjmp	.+12     	; 0x1274 <linefollower1+0x62>
    1268:	cb 99       	sbic	0x19, 3	; 25
    126a:	04 c0       	rjmp	.+8      	; 0x1274 <linefollower1+0x62>
    126c:	cc 99       	sbic	0x19, 4	; 25
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <linefollower1+0x62>
   { 
   
       PORTD &=~(1<<4);
    1270:	94 98       	cbi	0x12, 4	; 18
    1272:	df cf       	rjmp	.-66     	; 0x1232 <linefollower1+0x20>
   }
   
   
  
	
	else if (!(PINA & (1<<1))&&(PINA & (1<<2))&&(PINA & (1<<3)) && (PINA & (1<<4))&&(PINA & (1<<5))) // 01111  - right    
    1274:	c9 99       	sbic	0x19, 1	; 25
    1276:	0a c0       	rjmp	.+20     	; 0x128c <linefollower1+0x7a>
    1278:	ca 9b       	sbis	0x19, 2	; 25
    127a:	08 c0       	rjmp	.+16     	; 0x128c <linefollower1+0x7a>
    127c:	cb 9b       	sbis	0x19, 3	; 25
    127e:	06 c0       	rjmp	.+12     	; 0x128c <linefollower1+0x7a>
    1280:	cc 9b       	sbis	0x19, 4	; 25
    1282:	04 c0       	rjmp	.+8      	; 0x128c <linefollower1+0x7a>
    1284:	cd 9b       	sbis	0x19, 5	; 25
    1286:	02 c0       	rjmp	.+4      	; 0x128c <linefollower1+0x7a>
	turn('R') ;
    1288:	82 e5       	ldi	r24, 0x52	; 82
    128a:	21 c0       	rjmp	.+66     	; 0x12ce <linefollower1+0xbc>
	
	else if ((PINA & (1<<1))&&(PINA & (1<<2))&&(PINA & (1<<3)) && (PINA & (1<<4))&&!(PINA & (1<<5))) // 11110 - left  
    128c:	c9 9b       	sbis	0x19, 1	; 25
    128e:	0a c0       	rjmp	.+20     	; 0x12a4 <linefollower1+0x92>
    1290:	ca 9b       	sbis	0x19, 2	; 25
    1292:	08 c0       	rjmp	.+16     	; 0x12a4 <linefollower1+0x92>
    1294:	cb 9b       	sbis	0x19, 3	; 25
    1296:	06 c0       	rjmp	.+12     	; 0x12a4 <linefollower1+0x92>
    1298:	cc 9b       	sbis	0x19, 4	; 25
    129a:	04 c0       	rjmp	.+8      	; 0x12a4 <linefollower1+0x92>
    129c:	cd 99       	sbic	0x19, 5	; 25
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <linefollower1+0x92>
	turn('L');
    12a0:	8c e4       	ldi	r24, 0x4C	; 76
    12a2:	15 c0       	rjmp	.+42     	; 0x12ce <linefollower1+0xbc>
	
	else if ((PINA & (1<<1))&&(PINA & (1<<2))&&(PINA & (1<<3)) && (PINA & (1<<4))&&(PINA & (1<<5))) // 11111 - + junction
    12a4:	c9 9b       	sbis	0x19, 1	; 25
    12a6:	08 c0       	rjmp	.+16     	; 0x12b8 <linefollower1+0xa6>
    12a8:	ca 9b       	sbis	0x19, 2	; 25
    12aa:	06 c0       	rjmp	.+12     	; 0x12b8 <linefollower1+0xa6>
    12ac:	cb 9b       	sbis	0x19, 3	; 25
    12ae:	04 c0       	rjmp	.+8      	; 0x12b8 <linefollower1+0xa6>
    12b0:	cc 9b       	sbis	0x19, 4	; 25
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <linefollower1+0xa6>
    12b4:	cd 99       	sbic	0x19, 5	; 25
    12b6:	0e c0       	rjmp	.+28     	; 0x12d4 <linefollower1+0xc2>
	return;
	
    else if (!(PINA & (1<<1))&&!(PINA & (1<<2))&&!(PINA & (1<<3))&&!(PINA & (1<<4))&&!(PINA & (1<<5)))// 00000- dead end 
    12b8:	c9 99       	sbic	0x19, 1	; 25
    12ba:	ab cf       	rjmp	.-170    	; 0x1212 <linefollower1>
    12bc:	ca 99       	sbic	0x19, 2	; 25
    12be:	a9 cf       	rjmp	.-174    	; 0x1212 <linefollower1>
    12c0:	cb 99       	sbic	0x19, 3	; 25
    12c2:	a7 cf       	rjmp	.-178    	; 0x1212 <linefollower1>
    12c4:	cc 99       	sbic	0x19, 4	; 25
    12c6:	a5 cf       	rjmp	.-182    	; 0x1212 <linefollower1>
    12c8:	cd 99       	sbic	0x19, 5	; 25
    12ca:	a3 cf       	rjmp	.-186    	; 0x1212 <linefollower1>
    turn('U');
    12cc:	85 e5       	ldi	r24, 0x55	; 85
    12ce:	0e 94 df 07 	call	0xfbe	; 0xfbe <turn>
    12d2:	9f cf       	rjmp	.-194    	; 0x1212 <linefollower1>
    12d4:	08 95       	ret

000012d6 <near>:
}

	

int near(int i,int j)
{
    12d6:	9c 01       	movw	r18, r24
if(test[i][j]==100)
    12d8:	fc 01       	movw	r30, r24
    12da:	ee 0f       	add	r30, r30
    12dc:	ff 1f       	adc	r31, r31
    12de:	c9 01       	movw	r24, r18
    12e0:	b3 e0       	ldi	r27, 0x03	; 3
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	ba 95       	dec	r27
    12e8:	e1 f7       	brne	.-8      	; 0x12e2 <near+0xc>
    12ea:	e8 0f       	add	r30, r24
    12ec:	f9 1f       	adc	r31, r25
    12ee:	e6 0f       	add	r30, r22
    12f0:	f7 1f       	adc	r31, r23
    12f2:	ee 0f       	add	r30, r30
    12f4:	ff 1f       	adc	r31, r31
    12f6:	ed 53       	subi	r30, 0x3D	; 61
    12f8:	fc 4f       	sbci	r31, 0xFC	; 252
    12fa:	80 81       	ld	r24, Z
    12fc:	91 81       	ldd	r25, Z+1	; 0x01
    12fe:	84 36       	cpi	r24, 0x64	; 100
    1300:	91 05       	cpc	r25, r1
    1302:	39 f0       	breq	.+14     	; 0x1312 <near+0x3c>
{	
	//lcd_char('Q');
	//_delay_ms(100);
	return 100;
}
else if(test[i][j]==30)
    1304:	8e 31       	cpi	r24, 0x1E	; 30
    1306:	91 05       	cpc	r25, r1
    1308:	39 f4       	brne	.+14     	; 0x1318 <near+0x42>
	{
	//lcd_char('R');
	//_delay_ms(100);
		test[i][j]=100;
    130a:	84 e6       	ldi	r24, 0x64	; 100
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	91 83       	std	Z+1, r25	; 0x01
    1310:	80 83       	st	Z, r24
    1312:	a4 e6       	ldi	r26, 0x64	; 100
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	b9 c0       	rjmp	.+370    	; 0x148a <near+0x1b4>
		return 100;
	}
else if(test[i][j]==0)
    1318:	89 2b       	or	r24, r25
    131a:	19 f4       	brne	.+6      	; 0x1322 <near+0x4c>
    131c:	a0 e0       	ldi	r26, 0x00	; 0
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	b4 c0       	rjmp	.+360    	; 0x148a <near+0x1b4>
    1322:	c9 01       	movw	r24, r18
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	dc 01       	movw	r26, r24
    1328:	f3 e0       	ldi	r31, 0x03	; 3
    132a:	aa 0f       	add	r26, r26
    132c:	bb 1f       	adc	r27, r27
    132e:	fa 95       	dec	r31
    1330:	e1 f7       	brne	.-8      	; 0x132a <near+0x54>
    1332:	88 0f       	add	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	a8 0f       	add	r26, r24
    1338:	b9 1f       	adc	r27, r25
    133a:	a6 0f       	add	r26, r22
    133c:	b7 1f       	adc	r27, r23
    133e:	aa 0f       	add	r26, r26
    1340:	bb 1f       	adc	r27, r27
    1342:	ad 53       	subi	r26, 0x3D	; 61
    1344:	bc 4f       	sbci	r27, 0xFC	; 252
    1346:	c9 01       	movw	r24, r18
    1348:	01 96       	adiw	r24, 0x01	; 1
    134a:	fc 01       	movw	r30, r24
    134c:	43 e0       	ldi	r20, 0x03	; 3
    134e:	ee 0f       	add	r30, r30
    1350:	ff 1f       	adc	r31, r31
    1352:	4a 95       	dec	r20
    1354:	e1 f7       	brne	.-8      	; 0x134e <near+0x78>
    1356:	88 0f       	add	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	e8 0f       	add	r30, r24
    135c:	f9 1f       	adc	r31, r25
    135e:	e6 0f       	add	r30, r22
    1360:	f7 1f       	adc	r31, r23
    1362:	ee 0f       	add	r30, r30
    1364:	ff 1f       	adc	r31, r31
    1366:	ed 53       	subi	r30, 0x3D	; 61
    1368:	fc 4f       	sbci	r31, 0xFC	; 252
    136a:	01 90       	ld	r0, Z+
    136c:	f0 81       	ld	r31, Z
    136e:	e0 2d       	mov	r30, r0
    1370:	4d 91       	ld	r20, X+
    1372:	5c 91       	ld	r21, X
    1374:	e4 17       	cp	r30, r20
    1376:	f5 07       	cpc	r31, r21
    1378:	0c f4       	brge	.+2      	; 0x137c <near+0xa6>
    137a:	af 01       	movw	r20, r30
    137c:	db 01       	movw	r26, r22
    137e:	aa 0f       	add	r26, r26
    1380:	bb 1f       	adc	r27, r27
    1382:	a6 0f       	add	r26, r22
    1384:	b7 1f       	adc	r27, r23
    1386:	aa 0f       	add	r26, r26
    1388:	bb 1f       	adc	r27, r27
    138a:	8c e3       	ldi	r24, 0x3C	; 60
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	fc 01       	movw	r30, r24
    1390:	2e 9f       	mul	r18, r30
    1392:	c0 01       	movw	r24, r0
    1394:	2f 9f       	mul	r18, r31
    1396:	90 0d       	add	r25, r0
    1398:	3e 9f       	mul	r19, r30
    139a:	90 0d       	add	r25, r0
    139c:	11 24       	eor	r1, r1
    139e:	a8 0f       	add	r26, r24
    13a0:	b9 1f       	adc	r27, r25
    13a2:	ab 59       	subi	r26, 0x9B	; 155
    13a4:	be 4f       	sbci	r27, 0xFE	; 254
    13a6:	8c 91       	ld	r24, X
    13a8:	11 96       	adiw	r26, 0x01	; 1
    13aa:	9c 91       	ld	r25, X
    13ac:	11 97       	sbiw	r26, 0x01	; 1
    13ae:	fc 01       	movw	r30, r24
    13b0:	ee 0f       	add	r30, r30
    13b2:	ff 1f       	adc	r31, r31
    13b4:	ee 0f       	add	r30, r30
    13b6:	ff 1f       	adc	r31, r31
    13b8:	ee 0f       	add	r30, r30
    13ba:	ff 1f       	adc	r31, r31
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	e8 0f       	add	r30, r24
    13c2:	f9 1f       	adc	r31, r25
    13c4:	12 96       	adiw	r26, 0x02	; 2
    13c6:	8d 91       	ld	r24, X+
    13c8:	9c 91       	ld	r25, X
    13ca:	13 97       	sbiw	r26, 0x03	; 3
    13cc:	e8 0f       	add	r30, r24
    13ce:	f9 1f       	adc	r31, r25
    13d0:	ee 0f       	add	r30, r30
    13d2:	ff 1f       	adc	r31, r31
    13d4:	ed 53       	subi	r30, 0x3D	; 61
    13d6:	fc 4f       	sbci	r31, 0xFC	; 252
    13d8:	01 90       	ld	r0, Z+
    13da:	f0 81       	ld	r31, Z
    13dc:	e0 2d       	mov	r30, r0
    13de:	da 01       	movw	r26, r20
    13e0:	e4 17       	cp	r30, r20
    13e2:	f5 07       	cpc	r31, r21
    13e4:	0c f4       	brge	.+2      	; 0x13e8 <near+0x112>
    13e6:	df 01       	movw	r26, r30
    13e8:	f9 01       	movw	r30, r18
    13ea:	ee 0f       	add	r30, r30
    13ec:	ff 1f       	adc	r31, r31
    13ee:	c9 01       	movw	r24, r18
    13f0:	43 e0       	ldi	r20, 0x03	; 3
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	4a 95       	dec	r20
    13f8:	e1 f7       	brne	.-8      	; 0x13f2 <near+0x11c>
    13fa:	e8 0f       	add	r30, r24
    13fc:	f9 1f       	adc	r31, r25
    13fe:	e6 0f       	add	r30, r22
    1400:	f7 1f       	adc	r31, r23
    1402:	ee 0f       	add	r30, r30
    1404:	ff 1f       	adc	r31, r31
    1406:	ef 53       	subi	r30, 0x3F	; 63
    1408:	fc 4f       	sbci	r31, 0xFC	; 252
    140a:	01 90       	ld	r0, Z+
    140c:	f0 81       	ld	r31, Z
    140e:	e0 2d       	mov	r30, r0
    1410:	ea 17       	cp	r30, r26
    1412:	fb 07       	cpc	r31, r27
    1414:	0c f4       	brge	.+2      	; 0x1418 <near+0x142>
    1416:	df 01       	movw	r26, r30
    1418:	f9 01       	movw	r30, r18
    141a:	ee 0f       	add	r30, r30
    141c:	ff 1f       	adc	r31, r31
    141e:	c9 01       	movw	r24, r18
    1420:	43 e0       	ldi	r20, 0x03	; 3
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	4a 95       	dec	r20
    1428:	e1 f7       	brne	.-8      	; 0x1422 <near+0x14c>
    142a:	e8 0f       	add	r30, r24
    142c:	f9 1f       	adc	r31, r25
    142e:	e6 0f       	add	r30, r22
    1430:	f7 1f       	adc	r31, r23
    1432:	ee 0f       	add	r30, r30
    1434:	ff 1f       	adc	r31, r31
    1436:	eb 53       	subi	r30, 0x3B	; 59
    1438:	fc 4f       	sbci	r31, 0xFC	; 252
    143a:	01 90       	ld	r0, Z+
    143c:	f0 81       	ld	r31, Z
    143e:	e0 2d       	mov	r30, r0
    1440:	cd 01       	movw	r24, r26
    1442:	ea 17       	cp	r30, r26
    1444:	fb 07       	cpc	r31, r27
    1446:	0c f4       	brge	.+2      	; 0x144a <near+0x174>
    1448:	cf 01       	movw	r24, r30
    144a:	f9 01       	movw	r30, r18
    144c:	ee 0f       	add	r30, r30
    144e:	ff 1f       	adc	r31, r31
    1450:	43 e0       	ldi	r20, 0x03	; 3
    1452:	22 0f       	add	r18, r18
    1454:	33 1f       	adc	r19, r19
    1456:	4a 95       	dec	r20
    1458:	e1 f7       	brne	.-8      	; 0x1452 <near+0x17c>
		min=c;
		if(d<min)
		min=d;
		if(e<min)
		min=e;
	if(min==100)
    145a:	84 36       	cpi	r24, 0x64	; 100
    145c:	91 05       	cpc	r25, r1
    145e:	49 f4       	brne	.+18     	; 0x1472 <near+0x19c>
	{
		test[i][j]=100;
    1460:	e2 0f       	add	r30, r18
    1462:	f3 1f       	adc	r31, r19
    1464:	e6 0f       	add	r30, r22
    1466:	f7 1f       	adc	r31, r23
    1468:	ee 0f       	add	r30, r30
    146a:	ff 1f       	adc	r31, r31
    146c:	ed 53       	subi	r30, 0x3D	; 61
    146e:	fc 4f       	sbci	r31, 0xFC	; 252
    1470:	4e cf       	rjmp	.-356    	; 0x130e <near+0x38>
		return 100;
	}
	else
	{
		test[i][j]=min+1;
    1472:	dc 01       	movw	r26, r24
    1474:	11 96       	adiw	r26, 0x01	; 1
    1476:	e2 0f       	add	r30, r18
    1478:	f3 1f       	adc	r31, r19
    147a:	e6 0f       	add	r30, r22
    147c:	f7 1f       	adc	r31, r23
    147e:	ee 0f       	add	r30, r30
    1480:	ff 1f       	adc	r31, r31
    1482:	ed 53       	subi	r30, 0x3D	; 61
    1484:	fc 4f       	sbci	r31, 0xFC	; 252
    1486:	b1 83       	std	Z+1, r27	; 0x01
    1488:	a0 83       	st	Z, r26
		return min+1;
	}
}
}
    148a:	cd 01       	movw	r24, r26
    148c:	08 95       	ret

0000148e <findpath>:
void findpath(void)
{
    148e:	2f 92       	push	r2
    1490:	3f 92       	push	r3
    1492:	4f 92       	push	r4
    1494:	5f 92       	push	r5
    1496:	6f 92       	push	r6
    1498:	7f 92       	push	r7
    149a:	8f 92       	push	r8
    149c:	9f 92       	push	r9
    149e:	af 92       	push	r10
    14a0:	bf 92       	push	r11
    14a2:	cf 92       	push	r12
    14a4:	df 92       	push	r13
    14a6:	ef 92       	push	r14
    14a8:	ff 92       	push	r15
    14aa:	0f 93       	push	r16
    14ac:	1f 93       	push	r17
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
lcd_string("Y:");
cc=y;
lcd_showvalue(test[x][y]);
_delay_ms(900);*/
int a,b,c,d,e,min,bx,by;
	a=test[x][y-1];
    14b2:	60 91 f6 00 	lds	r22, 0x00F6
    14b6:	70 91 f7 00 	lds	r23, 0x00F7
    14ba:	40 91 f8 00 	lds	r20, 0x00F8
    14be:	50 91 f9 00 	lds	r21, 0x00F9
    14c2:	db 01       	movw	r26, r22
    14c4:	aa 0f       	add	r26, r26
    14c6:	bb 1f       	adc	r27, r27
    14c8:	cb 01       	movw	r24, r22
    14ca:	33 e0       	ldi	r19, 0x03	; 3
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	3a 95       	dec	r19
    14d2:	e1 f7       	brne	.-8      	; 0x14cc <findpath+0x3e>
    14d4:	a8 0f       	add	r26, r24
    14d6:	b9 1f       	adc	r27, r25
    14d8:	fd 01       	movw	r30, r26
    14da:	e4 0f       	add	r30, r20
    14dc:	f5 1f       	adc	r31, r21
    14de:	ee 0f       	add	r30, r30
    14e0:	ff 1f       	adc	r31, r31
    14e2:	ef 53       	subi	r30, 0x3F	; 63
    14e4:	fc 4f       	sbci	r31, 0xFC	; 252
    14e6:	40 80       	ld	r4, Z
    14e8:	51 80       	ldd	r5, Z+1	; 0x01
	b=test[x][y+1];
    14ea:	4a 01       	movw	r8, r20
    14ec:	08 94       	sec
    14ee:	81 1c       	adc	r8, r1
    14f0:	91 1c       	adc	r9, r1
    14f2:	a8 0d       	add	r26, r8
    14f4:	b9 1d       	adc	r27, r9
    14f6:	aa 0f       	add	r26, r26
    14f8:	bb 1f       	adc	r27, r27
    14fa:	ad 53       	subi	r26, 0x3D	; 61
    14fc:	bc 4f       	sbci	r27, 0xFC	; 252
    14fe:	ed 90       	ld	r14, X+
    1500:	fc 90       	ld	r15, X
	c=test[x-1][y];
    1502:	5b 01       	movw	r10, r22
    1504:	08 94       	sec
    1506:	a1 08       	sbc	r10, r1
    1508:	b1 08       	sbc	r11, r1
    150a:	f5 01       	movw	r30, r10
    150c:	ee 0f       	add	r30, r30
    150e:	ff 1f       	adc	r31, r31
    1510:	c5 01       	movw	r24, r10
    1512:	03 e0       	ldi	r16, 0x03	; 3
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	0a 95       	dec	r16
    151a:	e1 f7       	brne	.-8      	; 0x1514 <findpath+0x86>
    151c:	e8 0f       	add	r30, r24
    151e:	f9 1f       	adc	r31, r25
    1520:	e4 0f       	add	r30, r20
    1522:	f5 1f       	adc	r31, r21
    1524:	ee 0f       	add	r30, r30
    1526:	ff 1f       	adc	r31, r31
    1528:	ed 53       	subi	r30, 0x3D	; 61
    152a:	fc 4f       	sbci	r31, 0xFC	; 252
    152c:	00 81       	ld	r16, Z
    152e:	11 81       	ldd	r17, Z+1	; 0x01
	d=test[x+1][y];
    1530:	6b 01       	movw	r12, r22
    1532:	08 94       	sec
    1534:	c1 1c       	adc	r12, r1
    1536:	d1 1c       	adc	r13, r1
    1538:	f6 01       	movw	r30, r12
    153a:	ee 0f       	add	r30, r30
    153c:	ff 1f       	adc	r31, r31
    153e:	c6 01       	movw	r24, r12
    1540:	a3 e0       	ldi	r26, 0x03	; 3
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	aa 95       	dec	r26
    1548:	e1 f7       	brne	.-8      	; 0x1542 <findpath+0xb4>
    154a:	e8 0f       	add	r30, r24
    154c:	f9 1f       	adc	r31, r25
    154e:	e4 0f       	add	r30, r20
    1550:	f5 1f       	adc	r31, r21
    1552:	ee 0f       	add	r30, r30
    1554:	ff 1f       	adc	r31, r31
    1556:	ed 53       	subi	r30, 0x3D	; 61
    1558:	fc 4f       	sbci	r31, 0xFC	; 252
    155a:	c0 81       	ld	r28, Z
    155c:	d1 81       	ldd	r29, Z+1	; 0x01
	e=test[bridge[x][y][0]][bridge[x][y][1]];
    155e:	fa 01       	movw	r30, r20
    1560:	ee 0f       	add	r30, r30
    1562:	ff 1f       	adc	r31, r31
    1564:	e4 0f       	add	r30, r20
    1566:	f5 1f       	adc	r31, r21
    1568:	ee 0f       	add	r30, r30
    156a:	ff 1f       	adc	r31, r31
    156c:	8c e3       	ldi	r24, 0x3C	; 60
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	9c 01       	movw	r18, r24
    1572:	62 9f       	mul	r22, r18
    1574:	c0 01       	movw	r24, r0
    1576:	63 9f       	mul	r22, r19
    1578:	90 0d       	add	r25, r0
    157a:	72 9f       	mul	r23, r18
    157c:	90 0d       	add	r25, r0
    157e:	11 24       	eor	r1, r1
    1580:	e8 0f       	add	r30, r24
    1582:	f9 1f       	adc	r31, r25
    1584:	eb 59       	subi	r30, 0x9B	; 155
    1586:	fe 4f       	sbci	r31, 0xFE	; 254
    1588:	a0 81       	ld	r26, Z
    158a:	b1 81       	ldd	r27, Z+1	; 0x01
    158c:	62 80       	ldd	r6, Z+2	; 0x02
    158e:	73 80       	ldd	r7, Z+3	; 0x03
    1590:	fd 01       	movw	r30, r26
    1592:	ee 0f       	add	r30, r30
    1594:	ff 1f       	adc	r31, r31
    1596:	cd 01       	movw	r24, r26
    1598:	33 e0       	ldi	r19, 0x03	; 3
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	3a 95       	dec	r19
    15a0:	e1 f7       	brne	.-8      	; 0x159a <findpath+0x10c>
    15a2:	e8 0f       	add	r30, r24
    15a4:	f9 1f       	adc	r31, r25
    15a6:	e6 0d       	add	r30, r6
    15a8:	f7 1d       	adc	r31, r7
    15aa:	ee 0f       	add	r30, r30
    15ac:	ff 1f       	adc	r31, r31
    15ae:	ed 53       	subi	r30, 0x3D	; 61
    15b0:	fc 4f       	sbci	r31, 0xFC	; 252
    15b2:	20 80       	ld	r2, Z
    15b4:	31 80       	ldd	r3, Z+1	; 0x01
		min=a;
			if(ori_m==1)
    15b6:	20 91 f4 00 	lds	r18, 0x00F4
    15ba:	30 91 f5 00 	lds	r19, 0x00F5
    15be:	21 30       	cpi	r18, 0x01	; 1
    15c0:	31 05       	cpc	r19, r1
    15c2:	41 f4       	brne	.+16     	; 0x15d4 <findpath+0x146>
			path[pointer]='R';
    15c4:	e0 91 0d 01 	lds	r30, 0x010D
    15c8:	f0 91 0e 01 	lds	r31, 0x010E
    15cc:	e8 5e       	subi	r30, 0xE8	; 232
    15ce:	fe 4f       	sbci	r31, 0xFE	; 254
    15d0:	82 e5       	ldi	r24, 0x52	; 82
    15d2:	20 c0       	rjmp	.+64     	; 0x1614 <findpath+0x186>
			if(ori_m==2)
    15d4:	22 30       	cpi	r18, 0x02	; 2
    15d6:	31 05       	cpc	r19, r1
    15d8:	41 f4       	brne	.+16     	; 0x15ea <findpath+0x15c>
			path[pointer]='S';
    15da:	e0 91 0d 01 	lds	r30, 0x010D
    15de:	f0 91 0e 01 	lds	r31, 0x010E
    15e2:	e8 5e       	subi	r30, 0xE8	; 232
    15e4:	fe 4f       	sbci	r31, 0xFE	; 254
    15e6:	83 e5       	ldi	r24, 0x53	; 83
    15e8:	15 c0       	rjmp	.+42     	; 0x1614 <findpath+0x186>
			if(ori_m==3)
    15ea:	23 30       	cpi	r18, 0x03	; 3
    15ec:	31 05       	cpc	r19, r1
    15ee:	41 f4       	brne	.+16     	; 0x1600 <findpath+0x172>
			path[pointer]='L';
    15f0:	e0 91 0d 01 	lds	r30, 0x010D
    15f4:	f0 91 0e 01 	lds	r31, 0x010E
    15f8:	e8 5e       	subi	r30, 0xE8	; 232
    15fa:	fe 4f       	sbci	r31, 0xFE	; 254
    15fc:	8c e4       	ldi	r24, 0x4C	; 76
    15fe:	0a c0       	rjmp	.+20     	; 0x1614 <findpath+0x186>
			if(ori_m==4)
    1600:	24 30       	cpi	r18, 0x04	; 4
    1602:	31 05       	cpc	r19, r1
    1604:	41 f4       	brne	.+16     	; 0x1616 <findpath+0x188>
			path[pointer]='U';
    1606:	e0 91 0d 01 	lds	r30, 0x010D
    160a:	f0 91 0e 01 	lds	r31, 0x010E
    160e:	e8 5e       	subi	r30, 0xE8	; 232
    1610:	fe 4f       	sbci	r31, 0xFE	; 254
    1612:	85 e5       	ldi	r24, 0x55	; 85
    1614:	80 83       	st	Z, r24
		
		if(b<a)
    1616:	e4 14       	cp	r14, r4
    1618:	f5 04       	cpc	r15, r5
    161a:	14 f0       	brlt	.+4      	; 0x1620 <findpath+0x192>
    161c:	c2 01       	movw	r24, r4
    161e:	2d c0       	rjmp	.+90     	; 0x167a <findpath+0x1ec>
		{
			min=b;
			if(ori_m==1)
    1620:	21 30       	cpi	r18, 0x01	; 1
    1622:	31 05       	cpc	r19, r1
    1624:	41 f4       	brne	.+16     	; 0x1636 <findpath+0x1a8>
			path[pointer]='L';
    1626:	e0 91 0d 01 	lds	r30, 0x010D
    162a:	f0 91 0e 01 	lds	r31, 0x010E
    162e:	e8 5e       	subi	r30, 0xE8	; 232
    1630:	fe 4f       	sbci	r31, 0xFE	; 254
    1632:	8c e4       	ldi	r24, 0x4C	; 76
    1634:	20 c0       	rjmp	.+64     	; 0x1676 <findpath+0x1e8>
			if(ori_m==2)
    1636:	22 30       	cpi	r18, 0x02	; 2
    1638:	31 05       	cpc	r19, r1
    163a:	41 f4       	brne	.+16     	; 0x164c <findpath+0x1be>
			path[pointer]='U';
    163c:	e0 91 0d 01 	lds	r30, 0x010D
    1640:	f0 91 0e 01 	lds	r31, 0x010E
    1644:	e8 5e       	subi	r30, 0xE8	; 232
    1646:	fe 4f       	sbci	r31, 0xFE	; 254
    1648:	85 e5       	ldi	r24, 0x55	; 85
    164a:	15 c0       	rjmp	.+42     	; 0x1676 <findpath+0x1e8>
			if(ori_m==3)
    164c:	23 30       	cpi	r18, 0x03	; 3
    164e:	31 05       	cpc	r19, r1
    1650:	41 f4       	brne	.+16     	; 0x1662 <findpath+0x1d4>
			path[pointer]='R';
    1652:	e0 91 0d 01 	lds	r30, 0x010D
    1656:	f0 91 0e 01 	lds	r31, 0x010E
    165a:	e8 5e       	subi	r30, 0xE8	; 232
    165c:	fe 4f       	sbci	r31, 0xFE	; 254
    165e:	82 e5       	ldi	r24, 0x52	; 82
    1660:	0a c0       	rjmp	.+20     	; 0x1676 <findpath+0x1e8>
			if(ori_m==4)
    1662:	24 30       	cpi	r18, 0x04	; 4
    1664:	31 05       	cpc	r19, r1
    1666:	41 f4       	brne	.+16     	; 0x1678 <findpath+0x1ea>
			path[pointer]='S';
    1668:	e0 91 0d 01 	lds	r30, 0x010D
    166c:	f0 91 0e 01 	lds	r31, 0x010E
    1670:	e8 5e       	subi	r30, 0xE8	; 232
    1672:	fe 4f       	sbci	r31, 0xFE	; 254
    1674:	83 e5       	ldi	r24, 0x53	; 83
    1676:	80 83       	st	Z, r24
    1678:	c7 01       	movw	r24, r14
		}
		
		if(c<min)
    167a:	08 17       	cp	r16, r24
    167c:	19 07       	cpc	r17, r25
    167e:	6c f5       	brge	.+90     	; 0x16da <findpath+0x24c>
		{
			min=c;
			if(ori_m==1)
    1680:	21 30       	cpi	r18, 0x01	; 1
    1682:	31 05       	cpc	r19, r1
    1684:	41 f4       	brne	.+16     	; 0x1696 <findpath+0x208>
			path[pointer]='U';
    1686:	e0 91 0d 01 	lds	r30, 0x010D
    168a:	f0 91 0e 01 	lds	r31, 0x010E
    168e:	e8 5e       	subi	r30, 0xE8	; 232
    1690:	fe 4f       	sbci	r31, 0xFE	; 254
    1692:	85 e5       	ldi	r24, 0x55	; 85
    1694:	20 c0       	rjmp	.+64     	; 0x16d6 <findpath+0x248>
			if(ori_m==2)
    1696:	22 30       	cpi	r18, 0x02	; 2
    1698:	31 05       	cpc	r19, r1
    169a:	41 f4       	brne	.+16     	; 0x16ac <findpath+0x21e>
			path[pointer]='R';
    169c:	e0 91 0d 01 	lds	r30, 0x010D
    16a0:	f0 91 0e 01 	lds	r31, 0x010E
    16a4:	e8 5e       	subi	r30, 0xE8	; 232
    16a6:	fe 4f       	sbci	r31, 0xFE	; 254
    16a8:	82 e5       	ldi	r24, 0x52	; 82
    16aa:	15 c0       	rjmp	.+42     	; 0x16d6 <findpath+0x248>
			if(ori_m==3)
    16ac:	23 30       	cpi	r18, 0x03	; 3
    16ae:	31 05       	cpc	r19, r1
    16b0:	41 f4       	brne	.+16     	; 0x16c2 <findpath+0x234>
			path[pointer]='S';
    16b2:	e0 91 0d 01 	lds	r30, 0x010D
    16b6:	f0 91 0e 01 	lds	r31, 0x010E
    16ba:	e8 5e       	subi	r30, 0xE8	; 232
    16bc:	fe 4f       	sbci	r31, 0xFE	; 254
    16be:	83 e5       	ldi	r24, 0x53	; 83
    16c0:	0a c0       	rjmp	.+20     	; 0x16d6 <findpath+0x248>
			if(ori_m==4)
    16c2:	24 30       	cpi	r18, 0x04	; 4
    16c4:	31 05       	cpc	r19, r1
    16c6:	41 f4       	brne	.+16     	; 0x16d8 <findpath+0x24a>
			path[pointer]='L';
    16c8:	e0 91 0d 01 	lds	r30, 0x010D
    16cc:	f0 91 0e 01 	lds	r31, 0x010E
    16d0:	e8 5e       	subi	r30, 0xE8	; 232
    16d2:	fe 4f       	sbci	r31, 0xFE	; 254
    16d4:	8c e4       	ldi	r24, 0x4C	; 76
    16d6:	80 83       	st	Z, r24
    16d8:	c8 01       	movw	r24, r16
		}
		if(d<min)
    16da:	c8 17       	cp	r28, r24
    16dc:	d9 07       	cpc	r29, r25
    16de:	6c f5       	brge	.+90     	; 0x173a <findpath+0x2ac>
		{
			min=d;
			if(ori_m==1)
    16e0:	21 30       	cpi	r18, 0x01	; 1
    16e2:	31 05       	cpc	r19, r1
    16e4:	41 f4       	brne	.+16     	; 0x16f6 <findpath+0x268>
			path[pointer]='S';
    16e6:	e0 91 0d 01 	lds	r30, 0x010D
    16ea:	f0 91 0e 01 	lds	r31, 0x010E
    16ee:	e8 5e       	subi	r30, 0xE8	; 232
    16f0:	fe 4f       	sbci	r31, 0xFE	; 254
    16f2:	83 e5       	ldi	r24, 0x53	; 83
    16f4:	20 c0       	rjmp	.+64     	; 0x1736 <findpath+0x2a8>
			if(ori_m==2)
    16f6:	22 30       	cpi	r18, 0x02	; 2
    16f8:	31 05       	cpc	r19, r1
    16fa:	41 f4       	brne	.+16     	; 0x170c <findpath+0x27e>
			path[pointer]='L';
    16fc:	e0 91 0d 01 	lds	r30, 0x010D
    1700:	f0 91 0e 01 	lds	r31, 0x010E
    1704:	e8 5e       	subi	r30, 0xE8	; 232
    1706:	fe 4f       	sbci	r31, 0xFE	; 254
    1708:	8c e4       	ldi	r24, 0x4C	; 76
    170a:	15 c0       	rjmp	.+42     	; 0x1736 <findpath+0x2a8>
			if(ori_m==3)
    170c:	23 30       	cpi	r18, 0x03	; 3
    170e:	31 05       	cpc	r19, r1
    1710:	41 f4       	brne	.+16     	; 0x1722 <findpath+0x294>
			path[pointer]='U';
    1712:	e0 91 0d 01 	lds	r30, 0x010D
    1716:	f0 91 0e 01 	lds	r31, 0x010E
    171a:	e8 5e       	subi	r30, 0xE8	; 232
    171c:	fe 4f       	sbci	r31, 0xFE	; 254
    171e:	85 e5       	ldi	r24, 0x55	; 85
    1720:	0a c0       	rjmp	.+20     	; 0x1736 <findpath+0x2a8>
			if(ori_m==4)
    1722:	24 30       	cpi	r18, 0x04	; 4
    1724:	31 05       	cpc	r19, r1
    1726:	41 f4       	brne	.+16     	; 0x1738 <findpath+0x2aa>
			path[pointer]='R';
    1728:	e0 91 0d 01 	lds	r30, 0x010D
    172c:	f0 91 0e 01 	lds	r31, 0x010E
    1730:	e8 5e       	subi	r30, 0xE8	; 232
    1732:	fe 4f       	sbci	r31, 0xFE	; 254
    1734:	82 e5       	ldi	r24, 0x52	; 82
    1736:	80 83       	st	Z, r24
    1738:	ce 01       	movw	r24, r28
		}
		if(e<min)
    173a:	28 16       	cp	r2, r24
    173c:	39 06       	cpc	r3, r25
    173e:	0c f0       	brlt	.+2      	; 0x1742 <findpath+0x2b4>
    1740:	89 c2       	rjmp	.+1298   	; 0x1c54 <findpath+0x7c6>
		{
			min=e;
			bx=bridge[x][y][0]-x;
    1742:	cd 01       	movw	r24, r26
    1744:	86 1b       	sub	r24, r22
    1746:	97 0b       	sbc	r25, r23
			by=bridge[x][y][1]-y;
    1748:	d3 01       	movw	r26, r6
    174a:	a4 1b       	sub	r26, r20
    174c:	b5 0b       	sbc	r27, r21
			if(bx==1 && by==1)
    174e:	81 30       	cpi	r24, 0x01	; 1
    1750:	91 05       	cpc	r25, r1
    1752:	09 f0       	breq	.+2      	; 0x1756 <findpath+0x2c8>
    1754:	33 c1       	rjmp	.+614    	; 0x19bc <findpath+0x52e>
    1756:	a1 30       	cpi	r26, 0x01	; 1
    1758:	b1 05       	cpc	r27, r1
    175a:	09 f0       	breq	.+2      	; 0x175e <findpath+0x2d0>
    175c:	e3 c2       	rjmp	.+1478   	; 0x1d24 <findpath+0x896>
			{
				if(bridge[x][y][2]==1)
    175e:	fa 01       	movw	r30, r20
    1760:	ee 0f       	add	r30, r30
    1762:	ff 1f       	adc	r31, r31
    1764:	e4 0f       	add	r30, r20
    1766:	f5 1f       	adc	r31, r21
    1768:	ee 0f       	add	r30, r30
    176a:	ff 1f       	adc	r31, r31
    176c:	8c e3       	ldi	r24, 0x3C	; 60
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	ac 01       	movw	r20, r24
    1772:	64 9f       	mul	r22, r20
    1774:	c0 01       	movw	r24, r0
    1776:	65 9f       	mul	r22, r21
    1778:	90 0d       	add	r25, r0
    177a:	74 9f       	mul	r23, r20
    177c:	90 0d       	add	r25, r0
    177e:	11 24       	eor	r1, r1
    1780:	e8 0f       	add	r30, r24
    1782:	f9 1f       	adc	r31, r25
    1784:	eb 59       	subi	r30, 0x9B	; 155
    1786:	fe 4f       	sbci	r31, 0xFE	; 254
    1788:	44 81       	ldd	r20, Z+4	; 0x04
    178a:	55 81       	ldd	r21, Z+5	; 0x05
    178c:	41 30       	cpi	r20, 0x01	; 1
    178e:	51 05       	cpc	r21, r1
    1790:	b1 f5       	brne	.+108    	; 0x17fe <findpath+0x370>
				{
					if(ori_m==1)
    1792:	21 30       	cpi	r18, 0x01	; 1
    1794:	31 05       	cpc	r19, r1
    1796:	41 f4       	brne	.+16     	; 0x17a8 <findpath+0x31a>
					{
						path[pointer]='L';
    1798:	e0 91 0d 01 	lds	r30, 0x010D
    179c:	f0 91 0e 01 	lds	r31, 0x010E
    17a0:	e8 5e       	subi	r30, 0xE8	; 232
    17a2:	fe 4f       	sbci	r31, 0xFE	; 254
    17a4:	8c e4       	ldi	r24, 0x4C	; 76
    17a6:	21 c0       	rjmp	.+66     	; 0x17ea <findpath+0x35c>
						path[pointer+1]='R';
						path[pointer+2]='R';
					}
					if(ori_m==2)
    17a8:	22 30       	cpi	r18, 0x02	; 2
    17aa:	31 05       	cpc	r19, r1
    17ac:	41 f4       	brne	.+16     	; 0x17be <findpath+0x330>
					{
						path[pointer]='U';
    17ae:	e0 91 0d 01 	lds	r30, 0x010D
    17b2:	f0 91 0e 01 	lds	r31, 0x010E
    17b6:	e8 5e       	subi	r30, 0xE8	; 232
    17b8:	fe 4f       	sbci	r31, 0xFE	; 254
    17ba:	85 e5       	ldi	r24, 0x55	; 85
    17bc:	16 c0       	rjmp	.+44     	; 0x17ea <findpath+0x35c>
						path[pointer+1]='R';
						path[pointer+2]='R';
					}
					if(ori_m==3)
    17be:	23 30       	cpi	r18, 0x03	; 3
    17c0:	31 05       	cpc	r19, r1
    17c2:	49 f4       	brne	.+18     	; 0x17d6 <findpath+0x348>
					{
						path[pointer]='R';
    17c4:	e0 91 0d 01 	lds	r30, 0x010D
    17c8:	f0 91 0e 01 	lds	r31, 0x010E
    17cc:	e8 5e       	subi	r30, 0xE8	; 232
    17ce:	fe 4f       	sbci	r31, 0xFE	; 254
    17d0:	82 e5       	ldi	r24, 0x52	; 82
    17d2:	80 83       	st	Z, r24
    17d4:	0c c0       	rjmp	.+24     	; 0x17ee <findpath+0x360>
						path[pointer+1]='R';
						path[pointer+2]='R';
					}
					if(ori_m==4)
    17d6:	24 30       	cpi	r18, 0x04	; 4
    17d8:	31 05       	cpc	r19, r1
    17da:	59 f4       	brne	.+22     	; 0x17f2 <findpath+0x364>
					{
						path[pointer]='S';
    17dc:	e0 91 0d 01 	lds	r30, 0x010D
    17e0:	f0 91 0e 01 	lds	r31, 0x010E
    17e4:	e8 5e       	subi	r30, 0xE8	; 232
    17e6:	fe 4f       	sbci	r31, 0xFE	; 254
    17e8:	83 e5       	ldi	r24, 0x53	; 83
    17ea:	80 83       	st	Z, r24
						path[pointer+1]='R';
    17ec:	82 e5       	ldi	r24, 0x52	; 82
    17ee:	81 83       	std	Z+1, r24	; 0x01
						path[pointer+2]='R';
    17f0:	82 83       	std	Z+2, r24	; 0x02
					}
					ori_m=1;
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	90 93 f5 00 	sts	0x00F5, r25
    17fa:	80 93 f4 00 	sts	0x00F4, r24
				}
				if(bridge[x][y][2]==2)
    17fe:	42 30       	cpi	r20, 0x02	; 2
    1800:	51 05       	cpc	r21, r1
    1802:	c9 f5       	brne	.+114    	; 0x1876 <findpath+0x3e8>
				{
					if(ori_m==1)
    1804:	80 91 f4 00 	lds	r24, 0x00F4
    1808:	90 91 f5 00 	lds	r25, 0x00F5
    180c:	81 30       	cpi	r24, 0x01	; 1
    180e:	91 05       	cpc	r25, r1
    1810:	41 f4       	brne	.+16     	; 0x1822 <findpath+0x394>
					{
						path[pointer]='S';
    1812:	e0 91 0d 01 	lds	r30, 0x010D
    1816:	f0 91 0e 01 	lds	r31, 0x010E
    181a:	e8 5e       	subi	r30, 0xE8	; 232
    181c:	fe 4f       	sbci	r31, 0xFE	; 254
    181e:	83 e5       	ldi	r24, 0x53	; 83
    1820:	20 c0       	rjmp	.+64     	; 0x1862 <findpath+0x3d4>
						path[pointer+1]='L';
						path[pointer+2]='L';
					}
					if(ori_m==2)
    1822:	82 30       	cpi	r24, 0x02	; 2
    1824:	91 05       	cpc	r25, r1
    1826:	49 f4       	brne	.+18     	; 0x183a <findpath+0x3ac>
					{
						path[pointer]='L';
    1828:	e0 91 0d 01 	lds	r30, 0x010D
    182c:	f0 91 0e 01 	lds	r31, 0x010E
    1830:	e8 5e       	subi	r30, 0xE8	; 232
    1832:	fe 4f       	sbci	r31, 0xFE	; 254
    1834:	8c e4       	ldi	r24, 0x4C	; 76
    1836:	80 83       	st	Z, r24
    1838:	16 c0       	rjmp	.+44     	; 0x1866 <findpath+0x3d8>
						path[pointer+1]='L';
						path[pointer+2]='L';
					}
					if(ori_m==3)
    183a:	83 30       	cpi	r24, 0x03	; 3
    183c:	91 05       	cpc	r25, r1
    183e:	41 f4       	brne	.+16     	; 0x1850 <findpath+0x3c2>
					{
						path[pointer]='U';
    1840:	e0 91 0d 01 	lds	r30, 0x010D
    1844:	f0 91 0e 01 	lds	r31, 0x010E
    1848:	e8 5e       	subi	r30, 0xE8	; 232
    184a:	fe 4f       	sbci	r31, 0xFE	; 254
    184c:	85 e5       	ldi	r24, 0x55	; 85
    184e:	09 c0       	rjmp	.+18     	; 0x1862 <findpath+0x3d4>
						path[pointer+1]='L';
						path[pointer+2]='L';
					}
					if(ori_m==4)
    1850:	04 97       	sbiw	r24, 0x04	; 4
    1852:	59 f4       	brne	.+22     	; 0x186a <findpath+0x3dc>
					{
						path[pointer]='R';
    1854:	e0 91 0d 01 	lds	r30, 0x010D
    1858:	f0 91 0e 01 	lds	r31, 0x010E
    185c:	e8 5e       	subi	r30, 0xE8	; 232
    185e:	fe 4f       	sbci	r31, 0xFE	; 254
    1860:	82 e5       	ldi	r24, 0x52	; 82
    1862:	80 83       	st	Z, r24
						path[pointer+1]='L';
    1864:	8c e4       	ldi	r24, 0x4C	; 76
    1866:	81 83       	std	Z+1, r24	; 0x01
						path[pointer+2]='L';
    1868:	82 83       	std	Z+2, r24	; 0x02
					}
					ori_m=4;
    186a:	84 e0       	ldi	r24, 0x04	; 4
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	90 93 f5 00 	sts	0x00F5, r25
    1872:	80 93 f4 00 	sts	0x00F4, r24
				}
				x=x+1;
    1876:	d0 92 f7 00 	sts	0x00F7, r13
    187a:	c0 92 f6 00 	sts	0x00F6, r12
				y=y+1;
    187e:	90 92 f9 00 	sts	0x00F9, r9
    1882:	80 92 f8 00 	sts	0x00F8, r8
    1886:	4e c2       	rjmp	.+1180   	; 0x1d24 <findpath+0x896>
			}
			if(bx==1 && by==-1)
			{
				if(bridge[x][y][2]==1)
    1888:	40 91 f6 00 	lds	r20, 0x00F6
    188c:	50 91 f7 00 	lds	r21, 0x00F7
    1890:	20 91 f8 00 	lds	r18, 0x00F8
    1894:	30 91 f9 00 	lds	r19, 0x00F9
    1898:	f9 01       	movw	r30, r18
    189a:	ee 0f       	add	r30, r30
    189c:	ff 1f       	adc	r31, r31
    189e:	e2 0f       	add	r30, r18
    18a0:	f3 1f       	adc	r31, r19
    18a2:	ee 0f       	add	r30, r30
    18a4:	ff 1f       	adc	r31, r31
    18a6:	8c e3       	ldi	r24, 0x3C	; 60
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	bc 01       	movw	r22, r24
    18ac:	46 9f       	mul	r20, r22
    18ae:	c0 01       	movw	r24, r0
    18b0:	47 9f       	mul	r20, r23
    18b2:	90 0d       	add	r25, r0
    18b4:	56 9f       	mul	r21, r22
    18b6:	90 0d       	add	r25, r0
    18b8:	11 24       	eor	r1, r1
    18ba:	e8 0f       	add	r30, r24
    18bc:	f9 1f       	adc	r31, r25
    18be:	eb 59       	subi	r30, 0x9B	; 155
    18c0:	fe 4f       	sbci	r31, 0xFE	; 254
    18c2:	64 81       	ldd	r22, Z+4	; 0x04
    18c4:	75 81       	ldd	r23, Z+5	; 0x05
    18c6:	61 30       	cpi	r22, 0x01	; 1
    18c8:	71 05       	cpc	r23, r1
    18ca:	c9 f5       	brne	.+114    	; 0x193e <findpath+0x4b0>
				{
					if(ori_m==1)
    18cc:	80 91 f4 00 	lds	r24, 0x00F4
    18d0:	90 91 f5 00 	lds	r25, 0x00F5
    18d4:	81 30       	cpi	r24, 0x01	; 1
    18d6:	91 05       	cpc	r25, r1
    18d8:	41 f4       	brne	.+16     	; 0x18ea <findpath+0x45c>
					{
						path[pointer]='R';
    18da:	e0 91 0d 01 	lds	r30, 0x010D
    18de:	f0 91 0e 01 	lds	r31, 0x010E
    18e2:	e8 5e       	subi	r30, 0xE8	; 232
    18e4:	fe 4f       	sbci	r31, 0xFE	; 254
    18e6:	82 e5       	ldi	r24, 0x52	; 82
    18e8:	20 c0       	rjmp	.+64     	; 0x192a <findpath+0x49c>
						path[pointer+1]='L';
						path[pointer+2]='L';
					}
					if(ori_m==2)
    18ea:	82 30       	cpi	r24, 0x02	; 2
    18ec:	91 05       	cpc	r25, r1
    18ee:	41 f4       	brne	.+16     	; 0x1900 <findpath+0x472>
					{
						path[pointer]='S';
    18f0:	e0 91 0d 01 	lds	r30, 0x010D
    18f4:	f0 91 0e 01 	lds	r31, 0x010E
    18f8:	e8 5e       	subi	r30, 0xE8	; 232
    18fa:	fe 4f       	sbci	r31, 0xFE	; 254
    18fc:	83 e5       	ldi	r24, 0x53	; 83
    18fe:	15 c0       	rjmp	.+42     	; 0x192a <findpath+0x49c>
						path[pointer+1]='L';
						path[pointer+2]='L';
					}
					if(ori_m==3)
    1900:	83 30       	cpi	r24, 0x03	; 3
    1902:	91 05       	cpc	r25, r1
    1904:	49 f4       	brne	.+18     	; 0x1918 <findpath+0x48a>
					{
						path[pointer]='L';
    1906:	e0 91 0d 01 	lds	r30, 0x010D
    190a:	f0 91 0e 01 	lds	r31, 0x010E
    190e:	e8 5e       	subi	r30, 0xE8	; 232
    1910:	fe 4f       	sbci	r31, 0xFE	; 254
    1912:	8c e4       	ldi	r24, 0x4C	; 76
    1914:	80 83       	st	Z, r24
    1916:	0b c0       	rjmp	.+22     	; 0x192e <findpath+0x4a0>
						path[pointer+1]='L';
						path[pointer+2]='L';
					}
					if(ori_m==4)
    1918:	04 97       	sbiw	r24, 0x04	; 4
    191a:	59 f4       	brne	.+22     	; 0x1932 <findpath+0x4a4>
					{
						path[pointer]='U';
    191c:	e0 91 0d 01 	lds	r30, 0x010D
    1920:	f0 91 0e 01 	lds	r31, 0x010E
    1924:	e8 5e       	subi	r30, 0xE8	; 232
    1926:	fe 4f       	sbci	r31, 0xFE	; 254
    1928:	85 e5       	ldi	r24, 0x55	; 85
    192a:	80 83       	st	Z, r24
						path[pointer+1]='L';
    192c:	8c e4       	ldi	r24, 0x4C	; 76
    192e:	81 83       	std	Z+1, r24	; 0x01
						path[pointer+2]='L';
    1930:	82 83       	std	Z+2, r24	; 0x02
					}
					ori_m=1;
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	90 93 f5 00 	sts	0x00F5, r25
    193a:	80 93 f4 00 	sts	0x00F4, r24
				}
				if(bridge[x][y][2]==2)
    193e:	62 30       	cpi	r22, 0x02	; 2
    1940:	71 05       	cpc	r23, r1
    1942:	c9 f5       	brne	.+114    	; 0x19b6 <findpath+0x528>
				{
					if(ori_m==1)
    1944:	80 91 f4 00 	lds	r24, 0x00F4
    1948:	90 91 f5 00 	lds	r25, 0x00F5
    194c:	81 30       	cpi	r24, 0x01	; 1
    194e:	91 05       	cpc	r25, r1
    1950:	41 f4       	brne	.+16     	; 0x1962 <findpath+0x4d4>
					{
						path[pointer]='S';
    1952:	e0 91 0d 01 	lds	r30, 0x010D
    1956:	f0 91 0e 01 	lds	r31, 0x010E
    195a:	e8 5e       	subi	r30, 0xE8	; 232
    195c:	fe 4f       	sbci	r31, 0xFE	; 254
    195e:	83 e5       	ldi	r24, 0x53	; 83
    1960:	15 c0       	rjmp	.+42     	; 0x198c <findpath+0x4fe>
						path[pointer+1]='R';
						path[pointer+2]='R';
					}
					if(ori_m==2)
    1962:	82 30       	cpi	r24, 0x02	; 2
    1964:	91 05       	cpc	r25, r1
    1966:	41 f4       	brne	.+16     	; 0x1978 <findpath+0x4ea>
					{
						path[pointer]='L';
    1968:	e0 91 0d 01 	lds	r30, 0x010D
    196c:	f0 91 0e 01 	lds	r31, 0x010E
    1970:	e8 5e       	subi	r30, 0xE8	; 232
    1972:	fe 4f       	sbci	r31, 0xFE	; 254
    1974:	8c e4       	ldi	r24, 0x4C	; 76
    1976:	0a c0       	rjmp	.+20     	; 0x198c <findpath+0x4fe>
						path[pointer+1]='R';
						path[pointer+2]='R';
					}
					if(ori_m==3)
    1978:	83 30       	cpi	r24, 0x03	; 3
    197a:	91 05       	cpc	r25, r1
    197c:	51 f4       	brne	.+20     	; 0x1992 <findpath+0x504>
					{
						path[pointer]='U';
    197e:	e0 91 0d 01 	lds	r30, 0x010D
    1982:	f0 91 0e 01 	lds	r31, 0x010E
    1986:	e8 5e       	subi	r30, 0xE8	; 232
    1988:	fe 4f       	sbci	r31, 0xFE	; 254
    198a:	85 e5       	ldi	r24, 0x55	; 85
    198c:	80 83       	st	Z, r24
						path[pointer+1]='R';
    198e:	82 e5       	ldi	r24, 0x52	; 82
    1990:	0a c0       	rjmp	.+20     	; 0x19a6 <findpath+0x518>
						path[pointer+2]='R';
					}
					if(ori_m==4)
    1992:	04 97       	sbiw	r24, 0x04	; 4
    1994:	51 f4       	brne	.+20     	; 0x19aa <findpath+0x51c>
					{
						path[pointer]='R';
    1996:	e0 91 0d 01 	lds	r30, 0x010D
    199a:	f0 91 0e 01 	lds	r31, 0x010E
    199e:	e8 5e       	subi	r30, 0xE8	; 232
    19a0:	fe 4f       	sbci	r31, 0xFE	; 254
    19a2:	82 e5       	ldi	r24, 0x52	; 82
    19a4:	80 83       	st	Z, r24
						path[pointer+1]='R';
    19a6:	81 83       	std	Z+1, r24	; 0x01
						path[pointer+2]='R';
    19a8:	82 83       	std	Z+2, r24	; 0x02
					}
					ori_m=2;
    19aa:	82 e0       	ldi	r24, 0x02	; 2
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	90 93 f5 00 	sts	0x00F5, r25
    19b2:	80 93 f4 00 	sts	0x00F4, r24
				}
				x=x+1;
    19b6:	4f 5f       	subi	r20, 0xFF	; 255
    19b8:	5f 4f       	sbci	r21, 0xFF	; 255
    19ba:	38 c1       	rjmp	.+624    	; 0x1c2c <findpath+0x79e>
				y=y-1;
			}
			if(bx==-1 && by==1)
    19bc:	8f 5f       	subi	r24, 0xFF	; 255
    19be:	9f 4f       	sbci	r25, 0xFF	; 255
    19c0:	09 f0       	breq	.+2      	; 0x19c4 <findpath+0x536>
    19c2:	3e c1       	rjmp	.+636    	; 0x1c40 <findpath+0x7b2>
    19c4:	a1 30       	cpi	r26, 0x01	; 1
    19c6:	b1 05       	cpc	r27, r1
    19c8:	09 f0       	breq	.+2      	; 0x19cc <findpath+0x53e>
    19ca:	b1 c1       	rjmp	.+866    	; 0x1d2e <findpath+0x8a0>
			{
				if(bridge[x][y][2]==1)
    19cc:	fa 01       	movw	r30, r20
    19ce:	ee 0f       	add	r30, r30
    19d0:	ff 1f       	adc	r31, r31
    19d2:	e4 0f       	add	r30, r20
    19d4:	f5 1f       	adc	r31, r21
    19d6:	ee 0f       	add	r30, r30
    19d8:	ff 1f       	adc	r31, r31
    19da:	8c e3       	ldi	r24, 0x3C	; 60
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	ac 01       	movw	r20, r24
    19e0:	64 9f       	mul	r22, r20
    19e2:	c0 01       	movw	r24, r0
    19e4:	65 9f       	mul	r22, r21
    19e6:	90 0d       	add	r25, r0
    19e8:	74 9f       	mul	r23, r20
    19ea:	90 0d       	add	r25, r0
    19ec:	11 24       	eor	r1, r1
    19ee:	e8 0f       	add	r30, r24
    19f0:	f9 1f       	adc	r31, r25
    19f2:	eb 59       	subi	r30, 0x9B	; 155
    19f4:	fe 4f       	sbci	r31, 0xFE	; 254
    19f6:	44 81       	ldd	r20, Z+4	; 0x04
    19f8:	55 81       	ldd	r21, Z+5	; 0x05
    19fa:	41 30       	cpi	r20, 0x01	; 1
    19fc:	51 05       	cpc	r21, r1
    19fe:	c1 f5       	brne	.+112    	; 0x1a70 <findpath+0x5e2>
				{
					if(ori_m==1)
    1a00:	21 30       	cpi	r18, 0x01	; 1
    1a02:	31 05       	cpc	r19, r1
    1a04:	59 f4       	brne	.+22     	; 0x1a1c <findpath+0x58e>
					{
						path[pointer]='L';
    1a06:	e0 91 0d 01 	lds	r30, 0x010D
    1a0a:	f0 91 0e 01 	lds	r31, 0x010E
    1a0e:	e8 5e       	subi	r30, 0xE8	; 232
    1a10:	fe 4f       	sbci	r31, 0xFE	; 254
    1a12:	8c e4       	ldi	r24, 0x4C	; 76
    1a14:	80 83       	st	Z, r24
						path[pointer+1]='L';
    1a16:	81 83       	std	Z+1, r24	; 0x01
						path[pointer+2]='L';
    1a18:	82 83       	std	Z+2, r24	; 0x02
    1a1a:	16 c0       	rjmp	.+44     	; 0x1a48 <findpath+0x5ba>
					}
					if(ori_m==2)
    1a1c:	22 30       	cpi	r18, 0x02	; 2
    1a1e:	31 05       	cpc	r19, r1
    1a20:	41 f4       	brne	.+16     	; 0x1a32 <findpath+0x5a4>
					{
						path[pointer]='U';
    1a22:	e0 91 0d 01 	lds	r30, 0x010D
    1a26:	f0 91 0e 01 	lds	r31, 0x010E
    1a2a:	e8 5e       	subi	r30, 0xE8	; 232
    1a2c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a2e:	85 e5       	ldi	r24, 0x55	; 85
    1a30:	15 c0       	rjmp	.+42     	; 0x1a5c <findpath+0x5ce>
						path[pointer+1]='L';
						path[pointer+2]='L';
					}
					if(ori_m==3)
    1a32:	23 30       	cpi	r18, 0x03	; 3
    1a34:	31 05       	cpc	r19, r1
    1a36:	41 f4       	brne	.+16     	; 0x1a48 <findpath+0x5ba>
					{
						path[pointer]='R';
    1a38:	e0 91 0d 01 	lds	r30, 0x010D
    1a3c:	f0 91 0e 01 	lds	r31, 0x010E
    1a40:	e8 5e       	subi	r30, 0xE8	; 232
    1a42:	fe 4f       	sbci	r31, 0xFE	; 254
    1a44:	82 e5       	ldi	r24, 0x52	; 82
    1a46:	0a c0       	rjmp	.+20     	; 0x1a5c <findpath+0x5ce>
						path[pointer+1]='L';
						path[pointer+2]='L';
					}
					if(ori_m==4)
    1a48:	24 30       	cpi	r18, 0x04	; 4
    1a4a:	31 05       	cpc	r19, r1
    1a4c:	59 f4       	brne	.+22     	; 0x1a64 <findpath+0x5d6>
					{
						path[pointer]='S';
    1a4e:	e0 91 0d 01 	lds	r30, 0x010D
    1a52:	f0 91 0e 01 	lds	r31, 0x010E
    1a56:	e8 5e       	subi	r30, 0xE8	; 232
    1a58:	fe 4f       	sbci	r31, 0xFE	; 254
    1a5a:	83 e5       	ldi	r24, 0x53	; 83
    1a5c:	80 83       	st	Z, r24
						path[pointer+1]='L';
    1a5e:	8c e4       	ldi	r24, 0x4C	; 76
    1a60:	81 83       	std	Z+1, r24	; 0x01
						path[pointer+2]='L';
    1a62:	82 83       	std	Z+2, r24	; 0x02
					}
					ori_m=3;
    1a64:	83 e0       	ldi	r24, 0x03	; 3
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	90 93 f5 00 	sts	0x00F5, r25
    1a6c:	80 93 f4 00 	sts	0x00F4, r24
				}
				if(bridge[x][y][2]==2)
    1a70:	42 30       	cpi	r20, 0x02	; 2
    1a72:	51 05       	cpc	r21, r1
    1a74:	c9 f5       	brne	.+114    	; 0x1ae8 <findpath+0x65a>
				{
					if(ori_m==1)
    1a76:	80 91 f4 00 	lds	r24, 0x00F4
    1a7a:	90 91 f5 00 	lds	r25, 0x00F5
    1a7e:	81 30       	cpi	r24, 0x01	; 1
    1a80:	91 05       	cpc	r25, r1
    1a82:	41 f4       	brne	.+16     	; 0x1a94 <findpath+0x606>
					{
						path[pointer]='U';
    1a84:	e0 91 0d 01 	lds	r30, 0x010D
    1a88:	f0 91 0e 01 	lds	r31, 0x010E
    1a8c:	e8 5e       	subi	r30, 0xE8	; 232
    1a8e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a90:	85 e5       	ldi	r24, 0x55	; 85
    1a92:	20 c0       	rjmp	.+64     	; 0x1ad4 <findpath+0x646>
						path[pointer+1]='R';
						path[pointer+2]='R';
					}
					if(ori_m==2)
    1a94:	82 30       	cpi	r24, 0x02	; 2
    1a96:	91 05       	cpc	r25, r1
    1a98:	49 f4       	brne	.+18     	; 0x1aac <findpath+0x61e>
					{
						path[pointer]='R';
    1a9a:	e0 91 0d 01 	lds	r30, 0x010D
    1a9e:	f0 91 0e 01 	lds	r31, 0x010E
    1aa2:	e8 5e       	subi	r30, 0xE8	; 232
    1aa4:	fe 4f       	sbci	r31, 0xFE	; 254
    1aa6:	82 e5       	ldi	r24, 0x52	; 82
    1aa8:	80 83       	st	Z, r24
    1aaa:	16 c0       	rjmp	.+44     	; 0x1ad8 <findpath+0x64a>
						path[pointer+1]='R';
						path[pointer+2]='R';
					}
					if(ori_m==3)
    1aac:	83 30       	cpi	r24, 0x03	; 3
    1aae:	91 05       	cpc	r25, r1
    1ab0:	41 f4       	brne	.+16     	; 0x1ac2 <findpath+0x634>
					{
						path[pointer]='S';
    1ab2:	e0 91 0d 01 	lds	r30, 0x010D
    1ab6:	f0 91 0e 01 	lds	r31, 0x010E
    1aba:	e8 5e       	subi	r30, 0xE8	; 232
    1abc:	fe 4f       	sbci	r31, 0xFE	; 254
    1abe:	83 e5       	ldi	r24, 0x53	; 83
    1ac0:	09 c0       	rjmp	.+18     	; 0x1ad4 <findpath+0x646>
						path[pointer+1]='R';
						path[pointer+2]='R';
					}
					if(ori_m==4)
    1ac2:	04 97       	sbiw	r24, 0x04	; 4
    1ac4:	59 f4       	brne	.+22     	; 0x1adc <findpath+0x64e>
					{
						path[pointer]='L';
    1ac6:	e0 91 0d 01 	lds	r30, 0x010D
    1aca:	f0 91 0e 01 	lds	r31, 0x010E
    1ace:	e8 5e       	subi	r30, 0xE8	; 232
    1ad0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ad2:	8c e4       	ldi	r24, 0x4C	; 76
    1ad4:	80 83       	st	Z, r24
						path[pointer+1]='R';
    1ad6:	82 e5       	ldi	r24, 0x52	; 82
    1ad8:	81 83       	std	Z+1, r24	; 0x01
						path[pointer+2]='R';
    1ada:	82 83       	std	Z+2, r24	; 0x02
					}
					ori_m=4;
    1adc:	84 e0       	ldi	r24, 0x04	; 4
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	90 93 f5 00 	sts	0x00F5, r25
    1ae4:	80 93 f4 00 	sts	0x00F4, r24
				}
				x=x-1;
    1ae8:	b0 92 f7 00 	sts	0x00F7, r11
    1aec:	a0 92 f6 00 	sts	0x00F6, r10
				y=y+1;
    1af0:	90 92 f9 00 	sts	0x00F9, r9
    1af4:	80 92 f8 00 	sts	0x00F8, r8
    1af8:	1a c1       	rjmp	.+564    	; 0x1d2e <findpath+0x8a0>
			}	
			if(bx==-1 && by==-1)
			{
				if(bridge[x][y][2]==1)
    1afa:	40 91 f6 00 	lds	r20, 0x00F6
    1afe:	50 91 f7 00 	lds	r21, 0x00F7
    1b02:	20 91 f8 00 	lds	r18, 0x00F8
    1b06:	30 91 f9 00 	lds	r19, 0x00F9
    1b0a:	f9 01       	movw	r30, r18
    1b0c:	ee 0f       	add	r30, r30
    1b0e:	ff 1f       	adc	r31, r31
    1b10:	e2 0f       	add	r30, r18
    1b12:	f3 1f       	adc	r31, r19
    1b14:	ee 0f       	add	r30, r30
    1b16:	ff 1f       	adc	r31, r31
    1b18:	8c e3       	ldi	r24, 0x3C	; 60
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	bc 01       	movw	r22, r24
    1b1e:	46 9f       	mul	r20, r22
    1b20:	c0 01       	movw	r24, r0
    1b22:	47 9f       	mul	r20, r23
    1b24:	90 0d       	add	r25, r0
    1b26:	56 9f       	mul	r21, r22
    1b28:	90 0d       	add	r25, r0
    1b2a:	11 24       	eor	r1, r1
    1b2c:	e8 0f       	add	r30, r24
    1b2e:	f9 1f       	adc	r31, r25
    1b30:	eb 59       	subi	r30, 0x9B	; 155
    1b32:	fe 4f       	sbci	r31, 0xFE	; 254
    1b34:	64 81       	ldd	r22, Z+4	; 0x04
    1b36:	75 81       	ldd	r23, Z+5	; 0x05
    1b38:	61 30       	cpi	r22, 0x01	; 1
    1b3a:	71 05       	cpc	r23, r1
    1b3c:	c9 f5       	brne	.+114    	; 0x1bb0 <findpath+0x722>
				{
					if(ori_m==1)
    1b3e:	80 91 f4 00 	lds	r24, 0x00F4
    1b42:	90 91 f5 00 	lds	r25, 0x00F5
    1b46:	81 30       	cpi	r24, 0x01	; 1
    1b48:	91 05       	cpc	r25, r1
    1b4a:	49 f4       	brne	.+18     	; 0x1b5e <findpath+0x6d0>
					{
						path[pointer]='R';
    1b4c:	e0 91 0d 01 	lds	r30, 0x010D
    1b50:	f0 91 0e 01 	lds	r31, 0x010E
    1b54:	e8 5e       	subi	r30, 0xE8	; 232
    1b56:	fe 4f       	sbci	r31, 0xFE	; 254
    1b58:	82 e5       	ldi	r24, 0x52	; 82
    1b5a:	80 83       	st	Z, r24
    1b5c:	21 c0       	rjmp	.+66     	; 0x1ba0 <findpath+0x712>
						path[pointer+1]='R';
						path[pointer+2]='R';
					}
					if(ori_m==2)
    1b5e:	82 30       	cpi	r24, 0x02	; 2
    1b60:	91 05       	cpc	r25, r1
    1b62:	41 f4       	brne	.+16     	; 0x1b74 <findpath+0x6e6>
					{
						path[pointer]='S';
    1b64:	e0 91 0d 01 	lds	r30, 0x010D
    1b68:	f0 91 0e 01 	lds	r31, 0x010E
    1b6c:	e8 5e       	subi	r30, 0xE8	; 232
    1b6e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b70:	83 e5       	ldi	r24, 0x53	; 83
    1b72:	14 c0       	rjmp	.+40     	; 0x1b9c <findpath+0x70e>
						path[pointer+1]='R';
						path[pointer+2]='R';
					}
					if(ori_m==3)
    1b74:	83 30       	cpi	r24, 0x03	; 3
    1b76:	91 05       	cpc	r25, r1
    1b78:	41 f4       	brne	.+16     	; 0x1b8a <findpath+0x6fc>
					{
						path[pointer]='L';
    1b7a:	e0 91 0d 01 	lds	r30, 0x010D
    1b7e:	f0 91 0e 01 	lds	r31, 0x010E
    1b82:	e8 5e       	subi	r30, 0xE8	; 232
    1b84:	fe 4f       	sbci	r31, 0xFE	; 254
    1b86:	8c e4       	ldi	r24, 0x4C	; 76
    1b88:	09 c0       	rjmp	.+18     	; 0x1b9c <findpath+0x70e>
						path[pointer+1]='R';
						path[pointer+2]='R';
					}
					if(ori_m==4)
    1b8a:	04 97       	sbiw	r24, 0x04	; 4
    1b8c:	59 f4       	brne	.+22     	; 0x1ba4 <findpath+0x716>
					{
						path[pointer]='U';
    1b8e:	e0 91 0d 01 	lds	r30, 0x010D
    1b92:	f0 91 0e 01 	lds	r31, 0x010E
    1b96:	e8 5e       	subi	r30, 0xE8	; 232
    1b98:	fe 4f       	sbci	r31, 0xFE	; 254
    1b9a:	85 e5       	ldi	r24, 0x55	; 85
    1b9c:	80 83       	st	Z, r24
						path[pointer+1]='R';
    1b9e:	82 e5       	ldi	r24, 0x52	; 82
    1ba0:	81 83       	std	Z+1, r24	; 0x01
						path[pointer+2]='R';
    1ba2:	82 83       	std	Z+2, r24	; 0x02
					}
					ori_m=3;
    1ba4:	83 e0       	ldi	r24, 0x03	; 3
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	90 93 f5 00 	sts	0x00F5, r25
    1bac:	80 93 f4 00 	sts	0x00F4, r24
				}
				if(bridge[x][y][2]==2)
    1bb0:	62 30       	cpi	r22, 0x02	; 2
    1bb2:	71 05       	cpc	r23, r1
    1bb4:	c9 f5       	brne	.+114    	; 0x1c28 <findpath+0x79a>
				{
					if(ori_m==1)
    1bb6:	80 91 f4 00 	lds	r24, 0x00F4
    1bba:	90 91 f5 00 	lds	r25, 0x00F5
    1bbe:	81 30       	cpi	r24, 0x01	; 1
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	41 f4       	brne	.+16     	; 0x1bd4 <findpath+0x746>
					{
						path[pointer]='U';
    1bc4:	e0 91 0d 01 	lds	r30, 0x010D
    1bc8:	f0 91 0e 01 	lds	r31, 0x010E
    1bcc:	e8 5e       	subi	r30, 0xE8	; 232
    1bce:	fe 4f       	sbci	r31, 0xFE	; 254
    1bd0:	85 e5       	ldi	r24, 0x55	; 85
    1bd2:	15 c0       	rjmp	.+42     	; 0x1bfe <findpath+0x770>
						path[pointer+1]='L';
						path[pointer+2]='L';
					}
					if(ori_m==2)
    1bd4:	82 30       	cpi	r24, 0x02	; 2
    1bd6:	91 05       	cpc	r25, r1
    1bd8:	41 f4       	brne	.+16     	; 0x1bea <findpath+0x75c>
					{
						path[pointer]='R';
    1bda:	e0 91 0d 01 	lds	r30, 0x010D
    1bde:	f0 91 0e 01 	lds	r31, 0x010E
    1be2:	e8 5e       	subi	r30, 0xE8	; 232
    1be4:	fe 4f       	sbci	r31, 0xFE	; 254
    1be6:	82 e5       	ldi	r24, 0x52	; 82
    1be8:	0a c0       	rjmp	.+20     	; 0x1bfe <findpath+0x770>
						path[pointer+1]='L';
						path[pointer+2]='L';
					}
					if(ori_m==3)
    1bea:	83 30       	cpi	r24, 0x03	; 3
    1bec:	91 05       	cpc	r25, r1
    1bee:	51 f4       	brne	.+20     	; 0x1c04 <findpath+0x776>
					{
						path[pointer]='S';
    1bf0:	e0 91 0d 01 	lds	r30, 0x010D
    1bf4:	f0 91 0e 01 	lds	r31, 0x010E
    1bf8:	e8 5e       	subi	r30, 0xE8	; 232
    1bfa:	fe 4f       	sbci	r31, 0xFE	; 254
    1bfc:	83 e5       	ldi	r24, 0x53	; 83
    1bfe:	80 83       	st	Z, r24
						path[pointer+1]='L';
    1c00:	8c e4       	ldi	r24, 0x4C	; 76
    1c02:	0a c0       	rjmp	.+20     	; 0x1c18 <findpath+0x78a>
						path[pointer+2]='L';
					}
					if(ori_m==4)
    1c04:	04 97       	sbiw	r24, 0x04	; 4
    1c06:	51 f4       	brne	.+20     	; 0x1c1c <findpath+0x78e>
					{
						path[pointer]='L';
    1c08:	e0 91 0d 01 	lds	r30, 0x010D
    1c0c:	f0 91 0e 01 	lds	r31, 0x010E
    1c10:	e8 5e       	subi	r30, 0xE8	; 232
    1c12:	fe 4f       	sbci	r31, 0xFE	; 254
    1c14:	8c e4       	ldi	r24, 0x4C	; 76
    1c16:	80 83       	st	Z, r24
						path[pointer+1]='L';
    1c18:	81 83       	std	Z+1, r24	; 0x01
						path[pointer+2]='L';
    1c1a:	82 83       	std	Z+2, r24	; 0x02
					}
					ori_m=2;
    1c1c:	82 e0       	ldi	r24, 0x02	; 2
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	90 93 f5 00 	sts	0x00F5, r25
    1c24:	80 93 f4 00 	sts	0x00F4, r24
				}
				x=x-1;
    1c28:	41 50       	subi	r20, 0x01	; 1
    1c2a:	50 40       	sbci	r21, 0x00	; 0
    1c2c:	50 93 f7 00 	sts	0x00F7, r21
    1c30:	40 93 f6 00 	sts	0x00F6, r20
				y=y-1;
    1c34:	21 50       	subi	r18, 0x01	; 1
    1c36:	30 40       	sbci	r19, 0x00	; 0
    1c38:	30 93 f9 00 	sts	0x00F9, r19
    1c3c:	20 93 f8 00 	sts	0x00F8, r18
			}
			pointer=pointer+3;
    1c40:	80 91 0d 01 	lds	r24, 0x010D
    1c44:	90 91 0e 01 	lds	r25, 0x010E
    1c48:	03 96       	adiw	r24, 0x03	; 3
    1c4a:	90 93 0e 01 	sts	0x010E, r25
    1c4e:	80 93 0d 01 	sts	0x010D, r24
    1c52:	c1 01       	movw	r24, r2
		}
		if(a==min)
    1c54:	48 16       	cp	r4, r24
    1c56:	59 06       	cpc	r5, r25
    1c58:	a9 f4       	brne	.+42     	; 0x1c84 <findpath+0x7f6>
		{
			ori_m=2;	
    1c5a:	82 e0       	ldi	r24, 0x02	; 2
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	90 93 f5 00 	sts	0x00F5, r25
    1c62:	80 93 f4 00 	sts	0x00F4, r24
			pointer++;
    1c66:	80 91 0d 01 	lds	r24, 0x010D
    1c6a:	90 91 0e 01 	lds	r25, 0x010E
    1c6e:	01 96       	adiw	r24, 0x01	; 1
    1c70:	90 93 0e 01 	sts	0x010E, r25
    1c74:	80 93 0d 01 	sts	0x010D, r24
			y=y-1;
    1c78:	80 91 f8 00 	lds	r24, 0x00F8
    1c7c:	90 91 f9 00 	lds	r25, 0x00F9
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	17 c0       	rjmp	.+46     	; 0x1cb2 <findpath+0x824>
		}
		else if(b==min)
    1c84:	e8 16       	cp	r14, r24
    1c86:	f9 06       	cpc	r15, r25
    1c88:	c9 f4       	brne	.+50     	; 0x1cbc <findpath+0x82e>
		{
			ori_m=4;
    1c8a:	84 e0       	ldi	r24, 0x04	; 4
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	90 93 f5 00 	sts	0x00F5, r25
    1c92:	80 93 f4 00 	sts	0x00F4, r24
			pointer++;
    1c96:	80 91 0d 01 	lds	r24, 0x010D
    1c9a:	90 91 0e 01 	lds	r25, 0x010E
    1c9e:	01 96       	adiw	r24, 0x01	; 1
    1ca0:	90 93 0e 01 	sts	0x010E, r25
    1ca4:	80 93 0d 01 	sts	0x010D, r24
			y=y+1;
    1ca8:	80 91 f8 00 	lds	r24, 0x00F8
    1cac:	90 91 f9 00 	lds	r25, 0x00F9
    1cb0:	01 96       	adiw	r24, 0x01	; 1
    1cb2:	90 93 f9 00 	sts	0x00F9, r25
    1cb6:	80 93 f8 00 	sts	0x00F8, r24
    1cba:	3e c0       	rjmp	.+124    	; 0x1d38 <findpath+0x8aa>
		}
		else if(c==min)
    1cbc:	08 17       	cp	r16, r24
    1cbe:	19 07       	cpc	r17, r25
    1cc0:	a9 f4       	brne	.+42     	; 0x1cec <findpath+0x85e>
		{
			ori_m=3;
    1cc2:	83 e0       	ldi	r24, 0x03	; 3
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	90 93 f5 00 	sts	0x00F5, r25
    1cca:	80 93 f4 00 	sts	0x00F4, r24
			pointer++;
    1cce:	80 91 0d 01 	lds	r24, 0x010D
    1cd2:	90 91 0e 01 	lds	r25, 0x010E
    1cd6:	01 96       	adiw	r24, 0x01	; 1
    1cd8:	90 93 0e 01 	sts	0x010E, r25
    1cdc:	80 93 0d 01 	sts	0x010D, r24
			x=x-1;
    1ce0:	80 91 f6 00 	lds	r24, 0x00F6
    1ce4:	90 91 f7 00 	lds	r25, 0x00F7
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	17 c0       	rjmp	.+46     	; 0x1d1a <findpath+0x88c>
		}
		else if(d==min)
    1cec:	c8 17       	cp	r28, r24
    1cee:	d9 07       	cpc	r29, r25
    1cf0:	19 f5       	brne	.+70     	; 0x1d38 <findpath+0x8aa>
		{
			ori_m=1;
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	90 93 f5 00 	sts	0x00F5, r25
    1cfa:	80 93 f4 00 	sts	0x00F4, r24
			pointer++;
    1cfe:	80 91 0d 01 	lds	r24, 0x010D
    1d02:	90 91 0e 01 	lds	r25, 0x010E
    1d06:	01 96       	adiw	r24, 0x01	; 1
    1d08:	90 93 0e 01 	sts	0x010E, r25
    1d0c:	80 93 0d 01 	sts	0x010D, r24
			x=x+1;
    1d10:	80 91 f6 00 	lds	r24, 0x00F6
    1d14:	90 91 f7 00 	lds	r25, 0x00F7
    1d18:	01 96       	adiw	r24, 0x01	; 1
    1d1a:	90 93 f7 00 	sts	0x00F7, r25
    1d1e:	80 93 f6 00 	sts	0x00F6, r24
    1d22:	0a c0       	rjmp	.+20     	; 0x1d38 <findpath+0x8aa>
					ori_m=4;
				}
				x=x+1;
				y=y+1;
			}
			if(bx==1 && by==-1)
    1d24:	af 5f       	subi	r26, 0xFF	; 255
    1d26:	bf 4f       	sbci	r27, 0xFF	; 255
    1d28:	09 f0       	breq	.+2      	; 0x1d2c <findpath+0x89e>
    1d2a:	8a cf       	rjmp	.-236    	; 0x1c40 <findpath+0x7b2>
    1d2c:	ad cd       	rjmp	.-1190   	; 0x1888 <findpath+0x3fa>
					ori_m=4;
				}
				x=x-1;
				y=y+1;
			}	
			if(bx==-1 && by==-1)
    1d2e:	af 5f       	subi	r26, 0xFF	; 255
    1d30:	bf 4f       	sbci	r27, 0xFF	; 255
    1d32:	09 f0       	breq	.+2      	; 0x1d36 <findpath+0x8a8>
    1d34:	85 cf       	rjmp	.-246    	; 0x1c40 <findpath+0x7b2>
    1d36:	e1 ce       	rjmp	.-574    	; 0x1afa <findpath+0x66c>
		}
	/*lcd_gotoxy2(0);
lcd_string("near");

lcd_showvalue1(min);*/	
}
    1d38:	df 91       	pop	r29
    1d3a:	cf 91       	pop	r28
    1d3c:	1f 91       	pop	r17
    1d3e:	0f 91       	pop	r16
    1d40:	ff 90       	pop	r15
    1d42:	ef 90       	pop	r14
    1d44:	df 90       	pop	r13
    1d46:	cf 90       	pop	r12
    1d48:	bf 90       	pop	r11
    1d4a:	af 90       	pop	r10
    1d4c:	9f 90       	pop	r9
    1d4e:	8f 90       	pop	r8
    1d50:	7f 90       	pop	r7
    1d52:	6f 90       	pop	r6
    1d54:	5f 90       	pop	r5
    1d56:	4f 90       	pop	r4
    1d58:	3f 90       	pop	r3
    1d5a:	2f 90       	pop	r2
    1d5c:	08 95       	ret

00001d5e <simplify>:
void simplify(void);
int near(int,int);
void findpath(void);
void place_obj(int);
void simplify()
{
    1d5e:	ef 92       	push	r14
    1d60:	ff 92       	push	r15
    1d62:	0f 93       	push	r16
    1d64:	1f 93       	push	r17
    1d66:	cf 93       	push	r28
    1d68:	df 93       	push	r29
// pure c code attached here
int j,pilot=0;
ori_m=3,x=8,y=6;
    1d6a:	83 e0       	ldi	r24, 0x03	; 3
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	90 93 f5 00 	sts	0x00F5, r25
    1d72:	80 93 f4 00 	sts	0x00F4, r24
    1d76:	88 e0       	ldi	r24, 0x08	; 8
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	90 93 f7 00 	sts	0x00F7, r25
    1d7e:	80 93 f6 00 	sts	0x00F6, r24
    1d82:	86 e0       	ldi	r24, 0x06	; 6
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	90 93 f9 00 	sts	0x00F9, r25
    1d8a:	80 93 f8 00 	sts	0x00F8, r24
    1d8e:	01 ed       	ldi	r16, 0xD1	; 209
    1d90:	14 e0       	ldi	r17, 0x04	; 4
    1d92:	b8 01       	movw	r22, r16
    1d94:	21 e0       	ldi	r18, 0x01	; 1
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 e0       	ldi	r20, 0x00	; 0
    1d9a:	50 e0       	ldi	r21, 0x00	; 0
    1d9c:	16 c0       	rjmp	.+44     	; 0x1dca <simplify+0x6c>
for(i=1;i<9;i++)
{
	for(j=1;j<9;j++)
	{
	if(a[i-1][j-1][0]==100)
    1d9e:	88 81       	ld	r24, Y
    1da0:	99 81       	ldd	r25, Y+1	; 0x01
    1da2:	84 36       	cpi	r24, 0x64	; 100
    1da4:	91 05       	cpc	r25, r1
    1da6:	19 f0       	breq	.+6      	; 0x1dae <simplify+0x50>
	{
		test[i][j]=100;
	}
	else
	{
		test[i][j]=maze[i-1][j-1];
    1da8:	8d 91       	ld	r24, X+
    1daa:	9c 91       	ld	r25, X
    1dac:	11 97       	sbiw	r26, 0x01	; 1
    1dae:	91 83       	std	Z+1, r25	; 0x01
    1db0:	80 83       	st	Z, r24
    1db2:	28 96       	adiw	r28, 0x08	; 8
    1db4:	32 96       	adiw	r30, 0x02	; 2
    1db6:	12 96       	adiw	r26, 0x02	; 2
// pure c code attached here
int j,pilot=0;
ori_m=3,x=8,y=6;
for(i=1;i<9;i++)
{
	for(j=1;j<9;j++)
    1db8:	c6 17       	cp	r28, r22
    1dba:	d7 07       	cpc	r29, r23
    1dbc:	81 f7       	brne	.-32     	; 0x1d9e <simplify+0x40>
    1dbe:	2f 5f       	subi	r18, 0xFF	; 255
    1dc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc2:	60 5c       	subi	r22, 0xC0	; 192
    1dc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc6:	4f 5f       	subi	r20, 0xFF	; 255
    1dc8:	5f 4f       	sbci	r21, 0xFF	; 255
void simplify()
{
// pure c code attached here
int j,pilot=0;
ori_m=3,x=8,y=6;
for(i=1;i<9;i++)
    1dca:	29 30       	cpi	r18, 0x09	; 9
    1dcc:	31 05       	cpc	r19, r1
    1dce:	04 f5       	brge	.+64     	; 0x1e10 <simplify+0xb2>
    1dd0:	ea 01       	movw	r28, r20
    1dd2:	86 e0       	ldi	r24, 0x06	; 6
    1dd4:	cc 0f       	add	r28, r28
    1dd6:	dd 1f       	adc	r29, r29
    1dd8:	8a 95       	dec	r24
    1dda:	e1 f7       	brne	.-8      	; 0x1dd4 <simplify+0x76>
    1ddc:	cf 56       	subi	r28, 0x6F	; 111
    1dde:	db 4f       	sbci	r29, 0xFB	; 251
    1de0:	f9 01       	movw	r30, r18
    1de2:	ee 0f       	add	r30, r30
    1de4:	ff 1f       	adc	r31, r31
    1de6:	c9 01       	movw	r24, r18
    1de8:	a3 e0       	ldi	r26, 0x03	; 3
    1dea:	88 0f       	add	r24, r24
    1dec:	99 1f       	adc	r25, r25
    1dee:	aa 95       	dec	r26
    1df0:	e1 f7       	brne	.-8      	; 0x1dea <simplify+0x8c>
    1df2:	e8 0f       	add	r30, r24
    1df4:	f9 1f       	adc	r31, r25
    1df6:	ee 0f       	add	r30, r30
    1df8:	ff 1f       	adc	r31, r31
    1dfa:	eb 53       	subi	r30, 0x3B	; 59
    1dfc:	fc 4f       	sbci	r31, 0xFC	; 252
    1dfe:	da 01       	movw	r26, r20
    1e00:	84 e0       	ldi	r24, 0x04	; 4
    1e02:	aa 0f       	add	r26, r26
    1e04:	bb 1f       	adc	r27, r27
    1e06:	8a 95       	dec	r24
    1e08:	e1 f7       	brne	.-8      	; 0x1e02 <simplify+0xa4>
    1e0a:	ac 58       	subi	r26, 0x8C	; 140
    1e0c:	bf 4f       	sbci	r27, 0xFF	; 255
    1e0e:	c7 cf       	rjmp	.-114    	; 0x1d9e <simplify+0x40>
		test[i][j]=maze[i-1][j-1];
	}
	
	}
}
	for(i=1;i<9;i++)
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	47 c0       	rjmp	.+142    	; 0x1ea4 <simplify+0x146>
	{
		count++;
    1e16:	80 91 13 01 	lds	r24, 0x0113
    1e1a:	90 91 14 01 	lds	r25, 0x0114
    1e1e:	01 96       	adiw	r24, 0x01	; 1
    1e20:	90 93 14 01 	sts	0x0114, r25
    1e24:	80 93 13 01 	sts	0x0113, r24
    1e28:	c1 e0       	ldi	r28, 0x01	; 1
    1e2a:	d0 e0       	ldi	r29, 0x00	; 0
	 	for(j=1;j<9;j++)
	 	{	
	 		count++;
    1e2c:	80 91 13 01 	lds	r24, 0x0113
    1e30:	90 91 14 01 	lds	r25, 0x0114
    1e34:	01 96       	adiw	r24, 0x01	; 1
    1e36:	90 93 14 01 	sts	0x0114, r25
    1e3a:	80 93 13 01 	sts	0x0113, r24
	 		update1=near(i,j);
    1e3e:	80 91 c1 03 	lds	r24, 0x03C1
    1e42:	90 91 c2 03 	lds	r25, 0x03C2
    1e46:	be 01       	movw	r22, r28
    1e48:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <near>
    1e4c:	80 93 ac 06 	sts	0x06AC, r24
    1e50:	90 93 ad 06 	sts	0x06AD, r25
	 		if(update1!=maze[i-1][j-1])
    1e54:	9c 01       	movw	r18, r24
    1e56:	e0 91 c1 03 	lds	r30, 0x03C1
    1e5a:	f0 91 c2 03 	lds	r31, 0x03C2
    1e5e:	31 97       	sbiw	r30, 0x01	; 1
    1e60:	21 97       	sbiw	r28, 0x01	; 1
    1e62:	73 e0       	ldi	r23, 0x03	; 3
    1e64:	ee 0f       	add	r30, r30
    1e66:	ff 1f       	adc	r31, r31
    1e68:	7a 95       	dec	r23
    1e6a:	e1 f7       	brne	.-8      	; 0x1e64 <simplify+0x106>
    1e6c:	ec 0f       	add	r30, r28
    1e6e:	fd 1f       	adc	r31, r29
    1e70:	21 96       	adiw	r28, 0x01	; 1
    1e72:	ee 0f       	add	r30, r30
    1e74:	ff 1f       	adc	r31, r31
    1e76:	ec 58       	subi	r30, 0x8C	; 140
    1e78:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7a:	80 81       	ld	r24, Z
    1e7c:	91 81       	ldd	r25, Z+1	; 0x01
    1e7e:	28 17       	cp	r18, r24
    1e80:	39 07       	cpc	r19, r25
    1e82:	39 f0       	breq	.+14     	; 0x1e92 <simplify+0x134>
	 		{
	 			maze[i-1][j-1]=update1;
    1e84:	31 83       	std	Z+1, r19	; 0x01
    1e86:	20 83       	st	Z, r18
	 			i=0;
    1e88:	10 92 c2 03 	sts	0x03C2, r1
    1e8c:	10 92 c1 03 	sts	0x03C1, r1
    1e90:	04 c0       	rjmp	.+8      	; 0x1e9a <simplify+0x13c>
	}
}
	for(i=1;i<9;i++)
	{
		count++;
	 	for(j=1;j<9;j++)
    1e92:	21 96       	adiw	r28, 0x01	; 1
    1e94:	c9 30       	cpi	r28, 0x09	; 9
    1e96:	d1 05       	cpc	r29, r1
    1e98:	49 f6       	brne	.-110    	; 0x1e2c <simplify+0xce>
		test[i][j]=maze[i-1][j-1];
	}
	
	}
}
	for(i=1;i<9;i++)
    1e9a:	80 91 c1 03 	lds	r24, 0x03C1
    1e9e:	90 91 c2 03 	lds	r25, 0x03C2
    1ea2:	01 96       	adiw	r24, 0x01	; 1
    1ea4:	90 93 c2 03 	sts	0x03C2, r25
    1ea8:	80 93 c1 03 	sts	0x03C1, r24
    1eac:	80 91 c1 03 	lds	r24, 0x03C1
    1eb0:	90 91 c2 03 	lds	r25, 0x03C2
    1eb4:	09 97       	sbiw	r24, 0x09	; 9
    1eb6:	0c f4       	brge	.+2      	; 0x1eba <simplify+0x15c>
    1eb8:	ae cf       	rjmp	.-164    	; 0x1e16 <simplify+0xb8>
    1eba:	02 c0       	rjmp	.+4      	; 0x1ec0 <simplify+0x162>
	 }
//printf("%d\n",count);
//display();
while(test[x][y]!=0)
{
findpath();
    1ebc:	0e 94 47 0a 	call	0x148e	; 0x148e <findpath>
	 		}
	 	}
	 }
//printf("%d\n",count);
//display();
while(test[x][y]!=0)
    1ec0:	80 91 f6 00 	lds	r24, 0x00F6
    1ec4:	90 91 f7 00 	lds	r25, 0x00F7
    1ec8:	fc 01       	movw	r30, r24
    1eca:	53 e0       	ldi	r21, 0x03	; 3
    1ecc:	ee 0f       	add	r30, r30
    1ece:	ff 1f       	adc	r31, r31
    1ed0:	5a 95       	dec	r21
    1ed2:	e1 f7       	brne	.-8      	; 0x1ecc <simplify+0x16e>
    1ed4:	88 0f       	add	r24, r24
    1ed6:	99 1f       	adc	r25, r25
    1ed8:	e8 0f       	add	r30, r24
    1eda:	f9 1f       	adc	r31, r25
    1edc:	80 91 f8 00 	lds	r24, 0x00F8
    1ee0:	90 91 f9 00 	lds	r25, 0x00F9
    1ee4:	e8 0f       	add	r30, r24
    1ee6:	f9 1f       	adc	r31, r25
    1ee8:	ee 0f       	add	r30, r30
    1eea:	ff 1f       	adc	r31, r31
    1eec:	ed 53       	subi	r30, 0x3D	; 61
    1eee:	fc 4f       	sbci	r31, 0xFC	; 252
    1ef0:	80 81       	ld	r24, Z
    1ef2:	91 81       	ldd	r25, Z+1	; 0x01
    1ef4:	89 2b       	or	r24, r25
    1ef6:	11 f7       	brne	.-60     	; 0x1ebc <simplify+0x15e>
    1ef8:	8f ef       	ldi	r24, 0xFF	; 255
    1efa:	9f ef       	ldi	r25, 0xFF	; 255
    1efc:	20 e9       	ldi	r18, 0x90	; 144
    1efe:	31 e0       	ldi	r19, 0x01	; 1
    1f00:	f9 01       	movw	r30, r18
    1f02:	31 97       	sbiw	r30, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <simplify+0x1a4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f06:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f08:	d9 f7       	brne	.-10     	; 0x1f00 <simplify+0x1a2>
{
findpath();
}
_delay_ms(10000);
lcd_gotoxy1(0);
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy1>
for(i=0;i<16;i++)
    1f10:	10 92 c2 03 	sts	0x03C2, r1
    1f14:	10 92 c1 03 	sts	0x03C1, r1
    1f18:	0e c0       	rjmp	.+28     	; 0x1f36 <simplify+0x1d8>
{
	lcd_char(path[i]);
    1f1a:	e8 5e       	subi	r30, 0xE8	; 232
    1f1c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f1e:	80 81       	ld	r24, Z
    1f20:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_char>
{
findpath();
}
_delay_ms(10000);
lcd_gotoxy1(0);
for(i=0;i<16;i++)
    1f24:	80 91 c1 03 	lds	r24, 0x03C1
    1f28:	90 91 c2 03 	lds	r25, 0x03C2
    1f2c:	01 96       	adiw	r24, 0x01	; 1
    1f2e:	90 93 c2 03 	sts	0x03C2, r25
    1f32:	80 93 c1 03 	sts	0x03C1, r24
    1f36:	e0 91 c1 03 	lds	r30, 0x03C1
    1f3a:	f0 91 c2 03 	lds	r31, 0x03C2
    1f3e:	e0 31       	cpi	r30, 0x10	; 16
    1f40:	f1 05       	cpc	r31, r1
    1f42:	5c f3       	brlt	.-42     	; 0x1f1a <simplify+0x1bc>
    1f44:	28 e1       	ldi	r18, 0x18	; 24
    1f46:	e2 2e       	mov	r14, r18
    1f48:	21 e0       	ldi	r18, 0x01	; 1
    1f4a:	f2 2e       	mov	r15, r18
    1f4c:	ac e4       	ldi	r26, 0x4C	; 76
    1f4e:	b1 e0       	ldi	r27, 0x01	; 1
    1f50:	f7 01       	movw	r30, r14
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	04 c0       	rjmp	.+8      	; 0x1f60 <simplify+0x202>
}

//place_obj(2);

for(i=0;i<25;i++)
path_centre[i]=path[i];
    1f58:	81 91       	ld	r24, Z+
    1f5a:	8d 93       	st	X+, r24
    1f5c:	2f 5f       	subi	r18, 0xFF	; 255
    1f5e:	3f 4f       	sbci	r19, 0xFF	; 255
	lcd_char(path[i]);
}

//place_obj(2);

for(i=0;i<25;i++)
    1f60:	29 31       	cpi	r18, 0x19	; 25
    1f62:	31 05       	cpc	r19, r1
    1f64:	cc f3       	brlt	.-14     	; 0x1f58 <simplify+0x1fa>
    1f66:	40 e0       	ldi	r20, 0x00	; 0
    1f68:	50 e0       	ldi	r21, 0x00	; 0
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	0b c0       	rjmp	.+22     	; 0x1f86 <simplify+0x228>
for(i=0;i<8;i++)
{
	for(j=0;j<8;j++)
	{
	
	maze[i][j]=pilot;
    1f70:	41 93       	st	Z+, r20
    1f72:	51 93       	st	Z+, r21
	pilot++;
    1f74:	4f 5f       	subi	r20, 0xFF	; 255
    1f76:	5f 4f       	sbci	r21, 0xFF	; 255
for(i=0;i<25;i++)
path_centre[i]=path[i];

for(i=0;i<8;i++)
{
	for(j=0;j<8;j++)
    1f78:	01 96       	adiw	r24, 0x01	; 1
    1f7a:	88 30       	cpi	r24, 0x08	; 8
    1f7c:	91 05       	cpc	r25, r1
    1f7e:	c1 f7       	brne	.-16     	; 0x1f70 <simplify+0x212>
void simplify(void);
int near(int,int);
void findpath(void);
void place_obj(int);
void simplify()
{
    1f80:	2f 5f       	subi	r18, 0xFF	; 255
    1f82:	3f 4f       	sbci	r19, 0xFF	; 255
    1f84:	a9 01       	movw	r20, r18
//place_obj(2);

for(i=0;i<25;i++)
path_centre[i]=path[i];

for(i=0;i<8;i++)
    1f86:	28 30       	cpi	r18, 0x08	; 8
    1f88:	31 05       	cpc	r19, r1
    1f8a:	5c f4       	brge	.+22     	; 0x1fa2 <simplify+0x244>
    1f8c:	f9 01       	movw	r30, r18
    1f8e:	94 e0       	ldi	r25, 0x04	; 4
    1f90:	ee 0f       	add	r30, r30
    1f92:	ff 1f       	adc	r31, r31
    1f94:	9a 95       	dec	r25
    1f96:	e1 f7       	brne	.-8      	; 0x1f90 <simplify+0x232>
    1f98:	ec 58       	subi	r30, 0x8C	; 140
    1f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	e7 cf       	rjmp	.-50     	; 0x1f70 <simplify+0x212>
    1fa2:	61 ed       	ldi	r22, 0xD1	; 209
    1fa4:	74 e0       	ldi	r23, 0x04	; 4
    1fa6:	21 e0       	ldi	r18, 0x01	; 1
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	40 e0       	ldi	r20, 0x00	; 0
    1fac:	50 e0       	ldi	r21, 0x00	; 0
    1fae:	16 c0       	rjmp	.+44     	; 0x1fdc <simplify+0x27e>
        };*/
for(i=1;i<9;i++)
{
	for(j=1;j<9;j++)
	{
	if(a[i-1][j-1][0]==100)
    1fb0:	88 81       	ld	r24, Y
    1fb2:	99 81       	ldd	r25, Y+1	; 0x01
    1fb4:	84 36       	cpi	r24, 0x64	; 100
    1fb6:	91 05       	cpc	r25, r1
    1fb8:	19 f0       	breq	.+6      	; 0x1fc0 <simplify+0x262>
	{
		test[i][j]=100;
	}
	else
	{
		test[i][j]=maze[i-1][j-1];
    1fba:	8d 91       	ld	r24, X+
    1fbc:	9c 91       	ld	r25, X
    1fbe:	11 97       	sbiw	r26, 0x01	; 1
    1fc0:	91 83       	std	Z+1, r25	; 0x01
    1fc2:	80 83       	st	Z, r24
    1fc4:	28 96       	adiw	r28, 0x08	; 8
    1fc6:	32 96       	adiw	r30, 0x02	; 2
    1fc8:	12 96       	adiw	r26, 0x02	; 2
			 {6,7,8,9,10,11,12,13},
			 {7,8,9,10,11,12,13,14},
        };*/
for(i=1;i<9;i++)
{
	for(j=1;j<9;j++)
    1fca:	c6 17       	cp	r28, r22
    1fcc:	d7 07       	cpc	r29, r23
    1fce:	81 f7       	brne	.-32     	; 0x1fb0 <simplify+0x252>
    1fd0:	2f 5f       	subi	r18, 0xFF	; 255
    1fd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd4:	60 5c       	subi	r22, 0xC0	; 192
    1fd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd8:	4f 5f       	subi	r20, 0xFF	; 255
    1fda:	5f 4f       	sbci	r21, 0xFF	; 255
			 {4,5,6,7,8,9,10,11},
			 {5,6,7,8,9,10,11,12},
			 {6,7,8,9,10,11,12,13},
			 {7,8,9,10,11,12,13,14},
        };*/
for(i=1;i<9;i++)
    1fdc:	29 30       	cpi	r18, 0x09	; 9
    1fde:	31 05       	cpc	r19, r1
    1fe0:	04 f5       	brge	.+64     	; 0x2022 <simplify+0x2c4>
    1fe2:	ea 01       	movw	r28, r20
    1fe4:	86 e0       	ldi	r24, 0x06	; 6
    1fe6:	cc 0f       	add	r28, r28
    1fe8:	dd 1f       	adc	r29, r29
    1fea:	8a 95       	dec	r24
    1fec:	e1 f7       	brne	.-8      	; 0x1fe6 <simplify+0x288>
    1fee:	cf 56       	subi	r28, 0x6F	; 111
    1ff0:	db 4f       	sbci	r29, 0xFB	; 251
    1ff2:	f9 01       	movw	r30, r18
    1ff4:	ee 0f       	add	r30, r30
    1ff6:	ff 1f       	adc	r31, r31
    1ff8:	c9 01       	movw	r24, r18
    1ffa:	a3 e0       	ldi	r26, 0x03	; 3
    1ffc:	88 0f       	add	r24, r24
    1ffe:	99 1f       	adc	r25, r25
    2000:	aa 95       	dec	r26
    2002:	e1 f7       	brne	.-8      	; 0x1ffc <simplify+0x29e>
    2004:	e8 0f       	add	r30, r24
    2006:	f9 1f       	adc	r31, r25
    2008:	ee 0f       	add	r30, r30
    200a:	ff 1f       	adc	r31, r31
    200c:	eb 53       	subi	r30, 0x3B	; 59
    200e:	fc 4f       	sbci	r31, 0xFC	; 252
    2010:	da 01       	movw	r26, r20
    2012:	84 e0       	ldi	r24, 0x04	; 4
    2014:	aa 0f       	add	r26, r26
    2016:	bb 1f       	adc	r27, r27
    2018:	8a 95       	dec	r24
    201a:	e1 f7       	brne	.-8      	; 0x2014 <simplify+0x2b6>
    201c:	ac 58       	subi	r26, 0x8C	; 140
    201e:	bf 4f       	sbci	r27, 0xFF	; 255
    2020:	c7 cf       	rjmp	.-114    	; 0x1fb0 <simplify+0x252>
	
	}
}
//for(step=0;step<pointer;step++)
//printf("%c\t",path[step]);
ori_m=3,x=8,y=6;
    2022:	83 e0       	ldi	r24, 0x03	; 3
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	90 93 f5 00 	sts	0x00F5, r25
    202a:	80 93 f4 00 	sts	0x00F4, r24
    202e:	88 e0       	ldi	r24, 0x08	; 8
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	90 93 f7 00 	sts	0x00F7, r25
    2036:	80 93 f6 00 	sts	0x00F6, r24
    203a:	86 e0       	ldi	r24, 0x06	; 6
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	90 93 f9 00 	sts	0x00F9, r25
    2042:	80 93 f8 00 	sts	0x00F8, r24


	for(i=1;i<9;i++)
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	47 c0       	rjmp	.+142    	; 0x20da <simplify+0x37c>
	{
		count++;
    204c:	80 91 13 01 	lds	r24, 0x0113
    2050:	90 91 14 01 	lds	r25, 0x0114
    2054:	01 96       	adiw	r24, 0x01	; 1
    2056:	90 93 14 01 	sts	0x0114, r25
    205a:	80 93 13 01 	sts	0x0113, r24
    205e:	c1 e0       	ldi	r28, 0x01	; 1
    2060:	d0 e0       	ldi	r29, 0x00	; 0
	 	for(j=1;j<9;j++)
	 	{	
	 		count++;
    2062:	80 91 13 01 	lds	r24, 0x0113
    2066:	90 91 14 01 	lds	r25, 0x0114
    206a:	01 96       	adiw	r24, 0x01	; 1
    206c:	90 93 14 01 	sts	0x0114, r25
    2070:	80 93 13 01 	sts	0x0113, r24
	 		update1=near(i,j);
    2074:	80 91 c1 03 	lds	r24, 0x03C1
    2078:	90 91 c2 03 	lds	r25, 0x03C2
    207c:	be 01       	movw	r22, r28
    207e:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <near>
    2082:	80 93 ac 06 	sts	0x06AC, r24
    2086:	90 93 ad 06 	sts	0x06AD, r25
	 		if(update1!=maze[i-1][j-1])
    208a:	9c 01       	movw	r18, r24
    208c:	e0 91 c1 03 	lds	r30, 0x03C1
    2090:	f0 91 c2 03 	lds	r31, 0x03C2
    2094:	31 97       	sbiw	r30, 0x01	; 1
    2096:	21 97       	sbiw	r28, 0x01	; 1
    2098:	53 e0       	ldi	r21, 0x03	; 3
    209a:	ee 0f       	add	r30, r30
    209c:	ff 1f       	adc	r31, r31
    209e:	5a 95       	dec	r21
    20a0:	e1 f7       	brne	.-8      	; 0x209a <simplify+0x33c>
    20a2:	ec 0f       	add	r30, r28
    20a4:	fd 1f       	adc	r31, r29
    20a6:	21 96       	adiw	r28, 0x01	; 1
    20a8:	ee 0f       	add	r30, r30
    20aa:	ff 1f       	adc	r31, r31
    20ac:	ec 58       	subi	r30, 0x8C	; 140
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	80 81       	ld	r24, Z
    20b2:	91 81       	ldd	r25, Z+1	; 0x01
    20b4:	28 17       	cp	r18, r24
    20b6:	39 07       	cpc	r19, r25
    20b8:	39 f0       	breq	.+14     	; 0x20c8 <simplify+0x36a>
	 		{
	 			maze[i-1][j-1]=update1;
    20ba:	31 83       	std	Z+1, r19	; 0x01
    20bc:	20 83       	st	Z, r18
	 			i=0;
    20be:	10 92 c2 03 	sts	0x03C2, r1
    20c2:	10 92 c1 03 	sts	0x03C1, r1
    20c6:	04 c0       	rjmp	.+8      	; 0x20d0 <simplify+0x372>


	for(i=1;i<9;i++)
	{
		count++;
	 	for(j=1;j<9;j++)
    20c8:	21 96       	adiw	r28, 0x01	; 1
    20ca:	c9 30       	cpi	r28, 0x09	; 9
    20cc:	d1 05       	cpc	r29, r1
    20ce:	49 f6       	brne	.-110    	; 0x2062 <simplify+0x304>
//for(step=0;step<pointer;step++)
//printf("%c\t",path[step]);
ori_m=3,x=8,y=6;


	for(i=1;i<9;i++)
    20d0:	80 91 c1 03 	lds	r24, 0x03C1
    20d4:	90 91 c2 03 	lds	r25, 0x03C2
    20d8:	01 96       	adiw	r24, 0x01	; 1
    20da:	90 93 c2 03 	sts	0x03C2, r25
    20de:	80 93 c1 03 	sts	0x03C1, r24
    20e2:	80 91 c1 03 	lds	r24, 0x03C1
    20e6:	90 91 c2 03 	lds	r25, 0x03C2
    20ea:	09 97       	sbiw	r24, 0x09	; 9
    20ec:	0c f4       	brge	.+2      	; 0x20f0 <simplify+0x392>
    20ee:	ae cf       	rjmp	.-164    	; 0x204c <simplify+0x2ee>
	 			i=0;
	 			break;
	 		}
	 	}
	 }
	pointer=0;
    20f0:	10 92 0e 01 	sts	0x010E, r1
    20f4:	10 92 0d 01 	sts	0x010D, r1
    20f8:	02 c0       	rjmp	.+4      	; 0x20fe <simplify+0x3a0>
while(test[x][y]!=0)
{
findpath();
    20fa:	0e 94 47 0a 	call	0x148e	; 0x148e <findpath>
	 			break;
	 		}
	 	}
	 }
	pointer=0;
while(test[x][y]!=0)
    20fe:	80 91 f6 00 	lds	r24, 0x00F6
    2102:	90 91 f7 00 	lds	r25, 0x00F7
    2106:	fc 01       	movw	r30, r24
    2108:	33 e0       	ldi	r19, 0x03	; 3
    210a:	ee 0f       	add	r30, r30
    210c:	ff 1f       	adc	r31, r31
    210e:	3a 95       	dec	r19
    2110:	e1 f7       	brne	.-8      	; 0x210a <simplify+0x3ac>
    2112:	88 0f       	add	r24, r24
    2114:	99 1f       	adc	r25, r25
    2116:	e8 0f       	add	r30, r24
    2118:	f9 1f       	adc	r31, r25
    211a:	80 91 f8 00 	lds	r24, 0x00F8
    211e:	90 91 f9 00 	lds	r25, 0x00F9
    2122:	e8 0f       	add	r30, r24
    2124:	f9 1f       	adc	r31, r25
    2126:	ee 0f       	add	r30, r30
    2128:	ff 1f       	adc	r31, r31
    212a:	ed 53       	subi	r30, 0x3D	; 61
    212c:	fc 4f       	sbci	r31, 0xFC	; 252
    212e:	80 81       	ld	r24, Z
    2130:	91 81       	ldd	r25, Z+1	; 0x01
    2132:	89 2b       	or	r24, r25
    2134:	11 f7       	brne	.-60     	; 0x20fa <simplify+0x39c>
    2136:	8f ef       	ldi	r24, 0xFF	; 255
    2138:	9f ef       	ldi	r25, 0xFF	; 255
    213a:	20 e9       	ldi	r18, 0x90	; 144
    213c:	31 e0       	ldi	r19, 0x01	; 1
    213e:	f9 01       	movw	r30, r18
    2140:	31 97       	sbiw	r30, 0x01	; 1
    2142:	f1 f7       	brne	.-4      	; 0x2140 <simplify+0x3e2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2144:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2146:	d9 f7       	brne	.-10     	; 0x213e <simplify+0x3e0>
{
findpath();
}

_delay_ms(10000);
lcd_gotoxy1(0);
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy1>
for(i=0;i<16;i++)
    214e:	10 92 c2 03 	sts	0x03C2, r1
    2152:	10 92 c1 03 	sts	0x03C1, r1
    2156:	0e c0       	rjmp	.+28     	; 0x2174 <simplify+0x416>
{
	lcd_char(path[i]);
    2158:	e8 5e       	subi	r30, 0xE8	; 232
    215a:	fe 4f       	sbci	r31, 0xFE	; 254
    215c:	80 81       	ld	r24, Z
    215e:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_char>
findpath();
}

_delay_ms(10000);
lcd_gotoxy1(0);
for(i=0;i<16;i++)
    2162:	80 91 c1 03 	lds	r24, 0x03C1
    2166:	90 91 c2 03 	lds	r25, 0x03C2
    216a:	01 96       	adiw	r24, 0x01	; 1
    216c:	90 93 c2 03 	sts	0x03C2, r25
    2170:	80 93 c1 03 	sts	0x03C1, r24
    2174:	e0 91 c1 03 	lds	r30, 0x03C1
    2178:	f0 91 c2 03 	lds	r31, 0x03C2
    217c:	e0 31       	cpi	r30, 0x10	; 16
    217e:	f1 05       	cpc	r31, r1
    2180:	5c f3       	brlt	.-42     	; 0x2158 <simplify+0x3fa>
    2182:	a1 e9       	ldi	r26, 0x91	; 145
    2184:	b6 e0       	ldi	r27, 0x06	; 6
    2186:	e8 e1       	ldi	r30, 0x18	; 24
    2188:	f1 e0       	ldi	r31, 0x01	; 1
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	04 c0       	rjmp	.+8      	; 0x2198 <simplify+0x43a>
{
	lcd_char(path[i]);
}

for(i=0;i<25;i++)
path_end_left[i]=path[i];
    2190:	81 91       	ld	r24, Z+
    2192:	8d 93       	st	X+, r24
    2194:	2f 5f       	subi	r18, 0xFF	; 255
    2196:	3f 4f       	sbci	r19, 0xFF	; 255
for(i=0;i<16;i++)
{
	lcd_char(path[i]);
}

for(i=0;i<25;i++)
    2198:	29 31       	cpi	r18, 0x19	; 25
    219a:	31 05       	cpc	r19, r1
    219c:	cc f3       	brlt	.-14     	; 0x2190 <simplify+0x432>
    219e:	40 e0       	ldi	r20, 0x00	; 0
    21a0:	50 e0       	ldi	r21, 0x00	; 0
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	0d c0       	rjmp	.+26     	; 0x21c2 <simplify+0x464>
for(i=0;i<8;i++)
{
	for(j=7;j>=0;j--)
	{
	
	maze[i][j]=pilot;
    21a8:	51 83       	std	Z+1, r21	; 0x01
    21aa:	40 83       	st	Z, r20
	pilot++;
    21ac:	4f 5f       	subi	r20, 0xFF	; 255
    21ae:	5f 4f       	sbci	r21, 0xFF	; 255
path_end_left[i]=path[i];
pilot=0;

for(i=0;i<8;i++)
{
	for(j=7;j>=0;j--)
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	32 97       	sbiw	r30, 0x02	; 2
    21b4:	6f ef       	ldi	r22, 0xFF	; 255
    21b6:	8f 3f       	cpi	r24, 0xFF	; 255
    21b8:	96 07       	cpc	r25, r22
    21ba:	b1 f7       	brne	.-20     	; 0x21a8 <simplify+0x44a>
void simplify(void);
int near(int,int);
void findpath(void);
void place_obj(int);
void simplify()
{
    21bc:	2f 5f       	subi	r18, 0xFF	; 255
    21be:	3f 4f       	sbci	r19, 0xFF	; 255
    21c0:	a9 01       	movw	r20, r18

for(i=0;i<25;i++)
path_end_left[i]=path[i];
pilot=0;

for(i=0;i<8;i++)
    21c2:	28 30       	cpi	r18, 0x08	; 8
    21c4:	31 05       	cpc	r19, r1
    21c6:	5c f4       	brge	.+22     	; 0x21de <simplify+0x480>
    21c8:	f9 01       	movw	r30, r18
    21ca:	84 e0       	ldi	r24, 0x04	; 4
    21cc:	ee 0f       	add	r30, r30
    21ce:	ff 1f       	adc	r31, r31
    21d0:	8a 95       	dec	r24
    21d2:	e1 f7       	brne	.-8      	; 0x21cc <simplify+0x46e>
    21d4:	ee 57       	subi	r30, 0x7E	; 126
    21d6:	ff 4f       	sbci	r31, 0xFF	; 255
    21d8:	87 e0       	ldi	r24, 0x07	; 7
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	e5 cf       	rjmp	.-54     	; 0x21a8 <simplify+0x44a>
			 {12,11,10,9,8,7,6,5},
			 {13,12,11,10,9,8,7,6},
			 {14,13,12,11,10,9,8,7}
           };*/

ori_m=3,x=8,y=6;
    21de:	83 e0       	ldi	r24, 0x03	; 3
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	90 93 f5 00 	sts	0x00F5, r25
    21e6:	80 93 f4 00 	sts	0x00F4, r24
    21ea:	88 e0       	ldi	r24, 0x08	; 8
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	90 93 f7 00 	sts	0x00F7, r25
    21f2:	80 93 f6 00 	sts	0x00F6, r24
    21f6:	86 e0       	ldi	r24, 0x06	; 6
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	90 93 f9 00 	sts	0x00F9, r25
    21fe:	80 93 f8 00 	sts	0x00F8, r24
    2202:	21 e0       	ldi	r18, 0x01	; 1
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	40 e0       	ldi	r20, 0x00	; 0
    2208:	50 e0       	ldi	r21, 0x00	; 0
    220a:	16 c0       	rjmp	.+44     	; 0x2238 <simplify+0x4da>
for(i=1;i<9;i++)
{
	for(j=1;j<9;j++)
	{
	if(a[i-1][j-1][0]==100)
    220c:	88 81       	ld	r24, Y
    220e:	99 81       	ldd	r25, Y+1	; 0x01
    2210:	84 36       	cpi	r24, 0x64	; 100
    2212:	91 05       	cpc	r25, r1
    2214:	19 f0       	breq	.+6      	; 0x221c <simplify+0x4be>
	{
		test[i][j]=100;
	}
	else
	{
		test[i][j]=maze[i-1][j-1];
    2216:	8d 91       	ld	r24, X+
    2218:	9c 91       	ld	r25, X
    221a:	11 97       	sbiw	r26, 0x01	; 1
    221c:	91 83       	std	Z+1, r25	; 0x01
    221e:	80 83       	st	Z, r24
    2220:	28 96       	adiw	r28, 0x08	; 8
    2222:	32 96       	adiw	r30, 0x02	; 2
    2224:	12 96       	adiw	r26, 0x02	; 2
           };*/

ori_m=3,x=8,y=6;
for(i=1;i<9;i++)
{
	for(j=1;j<9;j++)
    2226:	c0 17       	cp	r28, r16
    2228:	d1 07       	cpc	r29, r17
    222a:	81 f7       	brne	.-32     	; 0x220c <simplify+0x4ae>
    222c:	2f 5f       	subi	r18, 0xFF	; 255
    222e:	3f 4f       	sbci	r19, 0xFF	; 255
    2230:	00 5c       	subi	r16, 0xC0	; 192
    2232:	1f 4f       	sbci	r17, 0xFF	; 255
    2234:	4f 5f       	subi	r20, 0xFF	; 255
    2236:	5f 4f       	sbci	r21, 0xFF	; 255
			 {13,12,11,10,9,8,7,6},
			 {14,13,12,11,10,9,8,7}
           };*/

ori_m=3,x=8,y=6;
for(i=1;i<9;i++)
    2238:	29 30       	cpi	r18, 0x09	; 9
    223a:	31 05       	cpc	r19, r1
    223c:	04 f5       	brge	.+64     	; 0x227e <simplify+0x520>
    223e:	ea 01       	movw	r28, r20
    2240:	b6 e0       	ldi	r27, 0x06	; 6
    2242:	cc 0f       	add	r28, r28
    2244:	dd 1f       	adc	r29, r29
    2246:	ba 95       	dec	r27
    2248:	e1 f7       	brne	.-8      	; 0x2242 <simplify+0x4e4>
    224a:	cf 56       	subi	r28, 0x6F	; 111
    224c:	db 4f       	sbci	r29, 0xFB	; 251
    224e:	f9 01       	movw	r30, r18
    2250:	ee 0f       	add	r30, r30
    2252:	ff 1f       	adc	r31, r31
    2254:	c9 01       	movw	r24, r18
    2256:	73 e0       	ldi	r23, 0x03	; 3
    2258:	88 0f       	add	r24, r24
    225a:	99 1f       	adc	r25, r25
    225c:	7a 95       	dec	r23
    225e:	e1 f7       	brne	.-8      	; 0x2258 <simplify+0x4fa>
    2260:	e8 0f       	add	r30, r24
    2262:	f9 1f       	adc	r31, r25
    2264:	ee 0f       	add	r30, r30
    2266:	ff 1f       	adc	r31, r31
    2268:	eb 53       	subi	r30, 0x3B	; 59
    226a:	fc 4f       	sbci	r31, 0xFC	; 252
    226c:	da 01       	movw	r26, r20
    226e:	94 e0       	ldi	r25, 0x04	; 4
    2270:	aa 0f       	add	r26, r26
    2272:	bb 1f       	adc	r27, r27
    2274:	9a 95       	dec	r25
    2276:	e1 f7       	brne	.-8      	; 0x2270 <simplify+0x512>
    2278:	ac 58       	subi	r26, 0x8C	; 140
    227a:	bf 4f       	sbci	r27, 0xFF	; 255
    227c:	c7 cf       	rjmp	.-114    	; 0x220c <simplify+0x4ae>
	}
	
	}
}

	for(i=1;i<9;i++)
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	47 c0       	rjmp	.+142    	; 0x2312 <simplify+0x5b4>
	{
		count++;
    2284:	80 91 13 01 	lds	r24, 0x0113
    2288:	90 91 14 01 	lds	r25, 0x0114
    228c:	01 96       	adiw	r24, 0x01	; 1
    228e:	90 93 14 01 	sts	0x0114, r25
    2292:	80 93 13 01 	sts	0x0113, r24
    2296:	c1 e0       	ldi	r28, 0x01	; 1
    2298:	d0 e0       	ldi	r29, 0x00	; 0
	 	for(j=1;j<9;j++)
	 	{	
	 		count++;
    229a:	80 91 13 01 	lds	r24, 0x0113
    229e:	90 91 14 01 	lds	r25, 0x0114
    22a2:	01 96       	adiw	r24, 0x01	; 1
    22a4:	90 93 14 01 	sts	0x0114, r25
    22a8:	80 93 13 01 	sts	0x0113, r24
	 		update1=near(i,j);
    22ac:	80 91 c1 03 	lds	r24, 0x03C1
    22b0:	90 91 c2 03 	lds	r25, 0x03C2
    22b4:	be 01       	movw	r22, r28
    22b6:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <near>
    22ba:	80 93 ac 06 	sts	0x06AC, r24
    22be:	90 93 ad 06 	sts	0x06AD, r25
	 		if(update1!=maze[i-1][j-1])
    22c2:	9c 01       	movw	r18, r24
    22c4:	e0 91 c1 03 	lds	r30, 0x03C1
    22c8:	f0 91 c2 03 	lds	r31, 0x03C2
    22cc:	31 97       	sbiw	r30, 0x01	; 1
    22ce:	21 97       	sbiw	r28, 0x01	; 1
    22d0:	83 e0       	ldi	r24, 0x03	; 3
    22d2:	ee 0f       	add	r30, r30
    22d4:	ff 1f       	adc	r31, r31
    22d6:	8a 95       	dec	r24
    22d8:	e1 f7       	brne	.-8      	; 0x22d2 <simplify+0x574>
    22da:	ec 0f       	add	r30, r28
    22dc:	fd 1f       	adc	r31, r29
    22de:	21 96       	adiw	r28, 0x01	; 1
    22e0:	ee 0f       	add	r30, r30
    22e2:	ff 1f       	adc	r31, r31
    22e4:	ec 58       	subi	r30, 0x8C	; 140
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	80 81       	ld	r24, Z
    22ea:	91 81       	ldd	r25, Z+1	; 0x01
    22ec:	28 17       	cp	r18, r24
    22ee:	39 07       	cpc	r19, r25
    22f0:	39 f0       	breq	.+14     	; 0x2300 <simplify+0x5a2>
	 		{
	 			maze[i-1][j-1]=update1;
    22f2:	31 83       	std	Z+1, r19	; 0x01
    22f4:	20 83       	st	Z, r18
	 			i=0;
    22f6:	10 92 c2 03 	sts	0x03C2, r1
    22fa:	10 92 c1 03 	sts	0x03C1, r1
    22fe:	04 c0       	rjmp	.+8      	; 0x2308 <simplify+0x5aa>
}

	for(i=1;i<9;i++)
	{
		count++;
	 	for(j=1;j<9;j++)
    2300:	21 96       	adiw	r28, 0x01	; 1
    2302:	c9 30       	cpi	r28, 0x09	; 9
    2304:	d1 05       	cpc	r29, r1
    2306:	49 f6       	brne	.-110    	; 0x229a <simplify+0x53c>
	}
	
	}
}

	for(i=1;i<9;i++)
    2308:	80 91 c1 03 	lds	r24, 0x03C1
    230c:	90 91 c2 03 	lds	r25, 0x03C2
    2310:	01 96       	adiw	r24, 0x01	; 1
    2312:	90 93 c2 03 	sts	0x03C2, r25
    2316:	80 93 c1 03 	sts	0x03C1, r24
    231a:	80 91 c1 03 	lds	r24, 0x03C1
    231e:	90 91 c2 03 	lds	r25, 0x03C2
    2322:	09 97       	sbiw	r24, 0x09	; 9
    2324:	0c f4       	brge	.+2      	; 0x2328 <simplify+0x5ca>
    2326:	ae cf       	rjmp	.-164    	; 0x2284 <simplify+0x526>
	 			i=0;
	 			break;
	 		}
	 	}
	 }
	 pointer=0;
    2328:	10 92 0e 01 	sts	0x010E, r1
    232c:	10 92 0d 01 	sts	0x010D, r1
    2330:	02 c0       	rjmp	.+4      	; 0x2336 <simplify+0x5d8>
while(test[x][y]!=0)
{
findpath();
    2332:	0e 94 47 0a 	call	0x148e	; 0x148e <findpath>
	 			break;
	 		}
	 	}
	 }
	 pointer=0;
while(test[x][y]!=0)
    2336:	80 91 f6 00 	lds	r24, 0x00F6
    233a:	90 91 f7 00 	lds	r25, 0x00F7
    233e:	fc 01       	movw	r30, r24
    2340:	13 e0       	ldi	r17, 0x03	; 3
    2342:	ee 0f       	add	r30, r30
    2344:	ff 1f       	adc	r31, r31
    2346:	1a 95       	dec	r17
    2348:	e1 f7       	brne	.-8      	; 0x2342 <simplify+0x5e4>
    234a:	88 0f       	add	r24, r24
    234c:	99 1f       	adc	r25, r25
    234e:	e8 0f       	add	r30, r24
    2350:	f9 1f       	adc	r31, r25
    2352:	80 91 f8 00 	lds	r24, 0x00F8
    2356:	90 91 f9 00 	lds	r25, 0x00F9
    235a:	e8 0f       	add	r30, r24
    235c:	f9 1f       	adc	r31, r25
    235e:	ee 0f       	add	r30, r30
    2360:	ff 1f       	adc	r31, r31
    2362:	ed 53       	subi	r30, 0x3D	; 61
    2364:	fc 4f       	sbci	r31, 0xFC	; 252
    2366:	80 81       	ld	r24, Z
    2368:	91 81       	ldd	r25, Z+1	; 0x01
    236a:	89 2b       	or	r24, r25
    236c:	11 f7       	brne	.-60     	; 0x2332 <simplify+0x5d4>
    236e:	8f ef       	ldi	r24, 0xFF	; 255
    2370:	9f ef       	ldi	r25, 0xFF	; 255
    2372:	20 e9       	ldi	r18, 0x90	; 144
    2374:	31 e0       	ldi	r19, 0x01	; 1
    2376:	f9 01       	movw	r30, r18
    2378:	31 97       	sbiw	r30, 0x01	; 1
    237a:	f1 f7       	brne	.-4      	; 0x2378 <simplify+0x61a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    237c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237e:	d9 f7       	brne	.-10     	; 0x2376 <simplify+0x618>
{
findpath();
}

_delay_ms(10000);
lcd_gotoxy1(0);
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy1>
for(i=0;i<16;i++)
    2386:	10 92 c2 03 	sts	0x03C2, r1
    238a:	10 92 c1 03 	sts	0x03C1, r1
    238e:	0e c0       	rjmp	.+28     	; 0x23ac <simplify+0x64e>
{
	lcd_char(path[i]);
    2390:	e8 5e       	subi	r30, 0xE8	; 232
    2392:	fe 4f       	sbci	r31, 0xFE	; 254
    2394:	80 81       	ld	r24, Z
    2396:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_char>
findpath();
}

_delay_ms(10000);
lcd_gotoxy1(0);
for(i=0;i<16;i++)
    239a:	80 91 c1 03 	lds	r24, 0x03C1
    239e:	90 91 c2 03 	lds	r25, 0x03C2
    23a2:	01 96       	adiw	r24, 0x01	; 1
    23a4:	90 93 c2 03 	sts	0x03C2, r25
    23a8:	80 93 c1 03 	sts	0x03C1, r24
    23ac:	e0 91 c1 03 	lds	r30, 0x03C1
    23b0:	f0 91 c2 03 	lds	r31, 0x03C2
    23b4:	e0 31       	cpi	r30, 0x10	; 16
    23b6:	f1 05       	cpc	r31, r1
    23b8:	5c f3       	brlt	.-42     	; 0x2390 <simplify+0x632>
    23ba:	e1 e3       	ldi	r30, 0x31	; 49
    23bc:	f1 e0       	ldi	r31, 0x01	; 1
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	06 c0       	rjmp	.+12     	; 0x23d0 <simplify+0x672>
{
	lcd_char(path[i]);
}

for(i=0;i<25;i++)
path_end_right[i]=path[i];
    23c4:	d7 01       	movw	r26, r14
    23c6:	8d 91       	ld	r24, X+
    23c8:	7d 01       	movw	r14, r26
    23ca:	81 93       	st	Z+, r24
    23cc:	2f 5f       	subi	r18, 0xFF	; 255
    23ce:	3f 4f       	sbci	r19, 0xFF	; 255
for(i=0;i<16;i++)
{
	lcd_char(path[i]);
}

for(i=0;i<25;i++)
    23d0:	29 31       	cpi	r18, 0x19	; 25
    23d2:	31 05       	cpc	r19, r1
    23d4:	bc f3       	brlt	.-18     	; 0x23c4 <simplify+0x666>
    23d6:	30 93 c2 03 	sts	0x03C2, r19
    23da:	20 93 c1 03 	sts	0x03C1, r18
{
	lcd_char(path[i]);
}*/
//
//place_obj(2);
}
    23de:	df 91       	pop	r29
    23e0:	cf 91       	pop	r28
    23e2:	1f 91       	pop	r17
    23e4:	0f 91       	pop	r16
    23e6:	ff 90       	pop	r15
    23e8:	ef 90       	pop	r14
    23ea:	08 95       	ret

000023ec <reach>:


}

reach()
{  
    23ec:	0f 93       	push	r16
    23ee:	1f 93       	push	r17
    23f0:	cf 93       	push	r28
    23f2:	df 93       	push	r29
    23f4:	c0 e0       	ldi	r28, 0x00	; 0
    23f6:	d0 e0       	ldi	r29, 0x00	; 0
   linefollower();
   
   if(f2==0)
	{
		p++;
		f2=1;
    23f8:	01 e0       	ldi	r16, 0x01	; 1
    23fa:	10 e0       	ldi	r17, 0x00	; 0
{  
  int p=0;
  while(1)
   {
   
   linefollower();
    23fc:	0e 94 3d 13 	call	0x267a	; 0x267a <linefollower>
   
   if(f2==0)
    2400:	80 91 03 01 	lds	r24, 0x0103
    2404:	90 91 04 01 	lds	r25, 0x0104
    2408:	89 2b       	or	r24, r25
    240a:	29 f4       	brne	.+10     	; 0x2416 <reach+0x2a>
	{
		p++;
    240c:	21 96       	adiw	r28, 0x01	; 1
		f2=1;
    240e:	10 93 04 01 	sts	0x0104, r17
    2412:	00 93 03 01 	sts	0x0103, r16
    }
	 if(p==2)
    2416:	c2 30       	cpi	r28, 0x02	; 2
    2418:	d1 05       	cpc	r29, r1
    241a:	81 f7       	brne	.-32     	; 0x23fc <reach+0x10>
	 break;
	}
	inch();
    241c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <inch>
	turn('R');
    2420:	82 e5       	ldi	r24, 0x52	; 82
    2422:	0e 94 df 07 	call	0xfbe	; 0xfbe <turn>
	inchb();
    2426:	0e 94 f7 08 	call	0x11ee	; 0x11ee <inchb>
	//inchb();
	inchb();
    242a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <inchb>
	turn('N');
    242e:	8e e4       	ldi	r24, 0x4E	; 78
    2430:	0e 94 df 07 	call	0xfbe	; 0xfbe <turn>
	
  
}
    2434:	df 91       	pop	r29
    2436:	cf 91       	pop	r28
    2438:	1f 91       	pop	r17
    243a:	0f 91       	pop	r16
    243c:	08 95       	ret

0000243e <final_show>:
unsigned int flag=0;

final_show()
{
int tm=0;
reach();
    243e:	0e 94 f6 11 	call	0x23ec	; 0x23ec <reach>

while(1)
{
      if ((PINA&(1<<6)) && (PINA&(1<<7)))
    2442:	ce 9b       	sbis	0x19, 6	; 25
    2444:	0c c0       	rjmp	.+24     	; 0x245e <final_show+0x20>
    2446:	cf 9b       	sbis	0x19, 7	; 25
    2448:	0a c0       	rjmp	.+20     	; 0x245e <final_show+0x20>
	  {
	   
	   rec=1;
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	80 93 15 01 	sts	0x0115, r24
	   flag=1;
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	90 93 17 01 	sts	0x0117, r25
    2458:	80 93 16 01 	sts	0x0116, r24
    245c:	0b c0       	rjmp	.+22     	; 0x2474 <final_show+0x36>
	   break;
	  }
	  
	  else if((!(PINA&(1<<6))) && (PINA&(1<<7)))
    245e:	ce 99       	sbic	0x19, 6	; 25
    2460:	02 c0       	rjmp	.+4      	; 0x2466 <final_show+0x28>
    2462:	cf 99       	sbic	0x19, 7	; 25
    2464:	04 c0       	rjmp	.+8      	; 0x246e <final_show+0x30>
	  
	   rec=2;
	   break;
	  }
	  
	  else if((PINA&(1<<6)) && (!(PINA&(1<<7))))
    2466:	ce 9b       	sbis	0x19, 6	; 25
    2468:	ec cf       	rjmp	.-40     	; 0x2442 <final_show+0x4>
    246a:	cf 99       	sbic	0x19, 7	; 25
    246c:	ea cf       	rjmp	.-44     	; 0x2442 <final_show+0x4>
	  {
	   
       rec=2;
    246e:	82 e0       	ldi	r24, 0x02	; 2
    2470:	80 93 15 01 	sts	0x0115, r24
	   break;	
      }  

}
inch();
    2474:	0e 94 e5 08 	call	0x11ca	; 0x11ca <inch>
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	48 ec       	ldi	r20, 0xC8	; 200
    247e:	50 e0       	ldi	r21, 0x00	; 0

while(tm<4000)
       {
	   PORTB |= (1<<0);
    2480:	c0 9a       	sbi	0x18, 0	; 24
       PORTB &=~(1<<1);// holdin object
    2482:	c1 98       	cbi	0x18, 1	; 24
    2484:	ca 01       	movw	r24, r20
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	f1 f7       	brne	.-4      	; 0x2486 <final_show+0x48>
	   _delay_us(50);
	   PORTB |= (1<<0);
    248a:	c0 9a       	sbi	0x18, 0	; 24
       PORTB |= (1<<1);
    248c:	c1 9a       	sbi	0x18, 1	; 24
    248e:	ca 01       	movw	r24, r20
    2490:	01 97       	sbiw	r24, 0x01	; 1
    2492:	f1 f7       	brne	.-4      	; 0x2490 <final_show+0x52>
	   _delay_us(50);
	   tm++;
    2494:	2f 5f       	subi	r18, 0xFF	; 255
    2496:	3f 4f       	sbci	r19, 0xFF	; 255
	   PORTC|=(1<<3);
    2498:	ab 9a       	sbi	0x15, 3	; 21
      }  

}
inch();

while(tm<4000)
    249a:	8f e0       	ldi	r24, 0x0F	; 15
    249c:	20 3a       	cpi	r18, 0xA0	; 160
    249e:	38 07       	cpc	r19, r24
    24a0:	79 f7       	brne	.-34     	; 0x2480 <final_show+0x42>
	   tm++;
	   PORTC|=(1<<3);

	   }
	   tm=0;
	   PORTC&=~(1<<3);
    24a2:	ab 98       	cbi	0x15, 3	; 21
	   if ((PINA&(1<<6)) && (PINA&(1<<7)))
    24a4:	ce 9b       	sbis	0x19, 6	; 25
    24a6:	0c c0       	rjmp	.+24     	; 0x24c0 <final_show+0x82>
    24a8:	cf 9b       	sbis	0x19, 7	; 25
    24aa:	0a c0       	rjmp	.+20     	; 0x24c0 <final_show+0x82>
	  {
	  rec=1;
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	80 93 15 01 	sts	0x0115, r24
	  flag=1;
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	90 93 17 01 	sts	0x0117, r25
    24ba:	80 93 16 01 	sts	0x0116, r24
    24be:	03 c0       	rjmp	.+6      	; 0x24c6 <final_show+0x88>
	  }
	  else
	  {
	  rec=2;
    24c0:	82 e0       	ldi	r24, 0x02	; 2
    24c2:	80 93 15 01 	sts	0x0115, r24
	  }
inch();
    24c6:	0e 94 e5 08 	call	0x11ca	; 0x11ca <inch>

		//turn('U');
		
		
	   
place_obj(rec);
    24ca:	80 91 15 01 	lds	r24, 0x0115
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	0e 94 3c 14 	call	0x2878	; 0x2878 <place_obj>
turn('U');
    24d4:	85 e5       	ldi	r24, 0x55	; 85
    24d6:	0e 94 df 07 	call	0xfbe	; 0xfbe <turn>
inchb();
    24da:	0e 94 f7 08 	call	0x11ee	; 0x11ee <inchb>
inchb();
    24de:	0e 94 f7 08 	call	0x11ee	; 0x11ee <inchb>
inchb();
    24e2:	0e 94 f7 08 	call	0x11ee	; 0x11ee <inchb>

turn('N');
    24e6:	8e e4       	ldi	r24, 0x4E	; 78
    24e8:	0e 94 df 07 	call	0xfbe	; 0xfbe <turn>

while(1)
{
      if ((PINA&(1<<6)) && (PINA&(1<<7)))
    24ec:	ce 9b       	sbis	0x19, 6	; 25
    24ee:	0c c0       	rjmp	.+24     	; 0x2508 <final_show+0xca>
    24f0:	cf 9b       	sbis	0x19, 7	; 25
    24f2:	0a c0       	rjmp	.+20     	; 0x2508 <final_show+0xca>
	  {
	  if(flag==0) 
    24f4:	80 91 16 01 	lds	r24, 0x0116
    24f8:	90 91 17 01 	lds	r25, 0x0117
    24fc:	89 2b       	or	r24, r25
    24fe:	11 f4       	brne	.+4      	; 0x2504 <final_show+0xc6>
	   rec=1;
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	0b c0       	rjmp	.+22     	; 0x251a <final_show+0xdc>
	  else
	   rec=3;
    2504:	83 e0       	ldi	r24, 0x03	; 3
    2506:	09 c0       	rjmp	.+18     	; 0x251a <final_show+0xdc>
	   break;
	  }
	  
	  else if(!(PINA&(1<<6)) && (PINA&(1<<7)))
    2508:	ce 99       	sbic	0x19, 6	; 25
    250a:	02 c0       	rjmp	.+4      	; 0x2510 <final_show+0xd2>
    250c:	cf 99       	sbic	0x19, 7	; 25
    250e:	04 c0       	rjmp	.+8      	; 0x2518 <final_show+0xda>
	  
	   rec=2;
	   break;
	  }
	  
	  else if((PINA&(1<<6)) && !(PINA&(1<<7)))
    2510:	ce 9b       	sbis	0x19, 6	; 25
    2512:	ec cf       	rjmp	.-40     	; 0x24ec <final_show+0xae>
    2514:	cf 99       	sbic	0x19, 7	; 25
    2516:	ea cf       	rjmp	.-44     	; 0x24ec <final_show+0xae>
	  {
	   
       rec=2;
    2518:	82 e0       	ldi	r24, 0x02	; 2
    251a:	80 93 15 01 	sts	0x0115, r24
	   break;	
      }  

}
inch();
    251e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <inch>
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	48 ec       	ldi	r20, 0xC8	; 200
    2528:	50 e0       	ldi	r21, 0x00	; 0
 
while(tm<4000)
       {
	   PORTB |= (1<<0);
    252a:	c0 9a       	sbi	0x18, 0	; 24
       PORTB &=~(1<<1);// holdin object
    252c:	c1 98       	cbi	0x18, 1	; 24
    252e:	ca 01       	movw	r24, r20
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	f1 f7       	brne	.-4      	; 0x2530 <final_show+0xf2>
	   _delay_us(50);
	   PORTB |= (1<<0);
    2534:	c0 9a       	sbi	0x18, 0	; 24
       PORTB |= (1<<1);
    2536:	c1 9a       	sbi	0x18, 1	; 24
    2538:	ca 01       	movw	r24, r20
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	f1 f7       	brne	.-4      	; 0x253a <final_show+0xfc>
	   _delay_us(50);
	   tm++;
    253e:	2f 5f       	subi	r18, 0xFF	; 255
    2540:	3f 4f       	sbci	r19, 0xFF	; 255
	   PORTC|=(1<<3);
    2542:	ab 9a       	sbi	0x15, 3	; 21
      }  

}
inch();
 
while(tm<4000)
    2544:	8f e0       	ldi	r24, 0x0F	; 15
    2546:	20 3a       	cpi	r18, 0xA0	; 160
    2548:	38 07       	cpc	r19, r24
    254a:	79 f7       	brne	.-34     	; 0x252a <final_show+0xec>
	   tm++;
	   PORTC|=(1<<3);

	   }
	   tm=0;
	   PORTC&=~(1<<3);
    254c:	ab 98       	cbi	0x15, 3	; 21
	   if ((PINA&(1<<6)) && (PINA&(1<<7)))
    254e:	ce 9b       	sbis	0x19, 6	; 25
    2550:	12 c0       	rjmp	.+36     	; 0x2576 <final_show+0x138>
    2552:	cf 9b       	sbis	0x19, 7	; 25
    2554:	10 c0       	rjmp	.+32     	; 0x2576 <final_show+0x138>
	  {
	  if(flag==1)
    2556:	80 91 16 01 	lds	r24, 0x0116
    255a:	90 91 17 01 	lds	r25, 0x0117
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	11 f4       	brne	.+4      	; 0x2566 <final_show+0x128>
	  rec=3;
    2562:	83 e0       	ldi	r24, 0x03	; 3
    2564:	09 c0       	rjmp	.+18     	; 0x2578 <final_show+0x13a>
	  else
	  {
	  flag=1;
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	90 93 17 01 	sts	0x0117, r25
    256e:	80 93 16 01 	sts	0x0116, r24
	  rec=1;
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	01 c0       	rjmp	.+2      	; 0x2578 <final_show+0x13a>
	  }
	  }
	  else
	  {
	  rec=2;
    2576:	82 e0       	ldi	r24, 0x02	; 2
    2578:	80 93 15 01 	sts	0x0115, r24
	  }

	   turn('N');
    257c:	8e e4       	ldi	r24, 0x4E	; 78
    257e:	0e 94 df 07 	call	0xfbe	; 0xfbe <turn>
linefollower();
    2582:	0e 94 3d 13 	call	0x267a	; 0x267a <linefollower>
turn('N');
    2586:	8e e4       	ldi	r24, 0x4E	; 78
    2588:	0e 94 df 07 	call	0xfbe	; 0xfbe <turn>
inch();
    258c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <inch>

		//turn('U');


place_obj(rec);
    2590:	80 91 15 01 	lds	r24, 0x0115
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	0e 94 3c 14 	call	0x2878	; 0x2878 <place_obj>
turn('U');
    259a:	85 e5       	ldi	r24, 0x55	; 85
    259c:	0e 94 df 07 	call	0xfbe	; 0xfbe <turn>
inchb();
    25a0:	0e 94 f7 08 	call	0x11ee	; 0x11ee <inchb>
inchb();
    25a4:	0e 94 f7 08 	call	0x11ee	; 0x11ee <inchb>
inchb();
    25a8:	0e 94 f7 08 	call	0x11ee	; 0x11ee <inchb>

turn('N');
    25ac:	8e e4       	ldi	r24, 0x4E	; 78
    25ae:	0e 94 df 07 	call	0xfbe	; 0xfbe <turn>


while(1)
{
      if ((PINA&(1<<6)) && (PINA&(1<<7)))
    25b2:	ce 9b       	sbis	0x19, 6	; 25
    25b4:	0c c0       	rjmp	.+24     	; 0x25ce <final_show+0x190>
    25b6:	cf 9b       	sbis	0x19, 7	; 25
    25b8:	0a c0       	rjmp	.+20     	; 0x25ce <final_show+0x190>
	  {
	  if(flag==0) 
    25ba:	80 91 16 01 	lds	r24, 0x0116
    25be:	90 91 17 01 	lds	r25, 0x0117
    25c2:	89 2b       	or	r24, r25
    25c4:	11 f4       	brne	.+4      	; 0x25ca <final_show+0x18c>
	   rec=1;
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	0b c0       	rjmp	.+22     	; 0x25e0 <final_show+0x1a2>
	  else
	   rec=3;
    25ca:	83 e0       	ldi	r24, 0x03	; 3
    25cc:	09 c0       	rjmp	.+18     	; 0x25e0 <final_show+0x1a2>
	   break;
	  }
	  
	  else if(!(PINA&(1<<6)) && (PINA&(1<<7)))
    25ce:	ce 99       	sbic	0x19, 6	; 25
    25d0:	02 c0       	rjmp	.+4      	; 0x25d6 <final_show+0x198>
    25d2:	cf 99       	sbic	0x19, 7	; 25
    25d4:	04 c0       	rjmp	.+8      	; 0x25de <final_show+0x1a0>
	  
	   rec=2;
	   break;
	  }
	  
	  else if((PINA&(1<<6)) && !(PINA&(1<<7)))
    25d6:	ce 9b       	sbis	0x19, 6	; 25
    25d8:	ec cf       	rjmp	.-40     	; 0x25b2 <final_show+0x174>
    25da:	cf 99       	sbic	0x19, 7	; 25
    25dc:	ea cf       	rjmp	.-44     	; 0x25b2 <final_show+0x174>
	  {
	   
       rec=2;
    25de:	82 e0       	ldi	r24, 0x02	; 2
    25e0:	80 93 15 01 	sts	0x0115, r24
	   break;	
      }  

}
inch();
    25e4:	0e 94 e5 08 	call	0x11ca	; 0x11ca <inch>
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	48 ec       	ldi	r20, 0xC8	; 200
    25ee:	50 e0       	ldi	r21, 0x00	; 0

while(tm<4000)
       {
	   PORTB |= (1<<0);
    25f0:	c0 9a       	sbi	0x18, 0	; 24
       PORTB &=~(1<<1);// holdin object
    25f2:	c1 98       	cbi	0x18, 1	; 24
    25f4:	ca 01       	movw	r24, r20
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	f1 f7       	brne	.-4      	; 0x25f6 <final_show+0x1b8>
	   _delay_us(50);
	   PORTB |= (1<<0);
    25fa:	c0 9a       	sbi	0x18, 0	; 24
       PORTB |= (1<<1);
    25fc:	c1 9a       	sbi	0x18, 1	; 24
    25fe:	ca 01       	movw	r24, r20
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	f1 f7       	brne	.-4      	; 0x2600 <final_show+0x1c2>
	   _delay_us(50);
	   tm++;
    2604:	2f 5f       	subi	r18, 0xFF	; 255
    2606:	3f 4f       	sbci	r19, 0xFF	; 255
	   PORTC|=(1<<3);
    2608:	ab 9a       	sbi	0x15, 3	; 21
      }  

}
inch();

while(tm<4000)
    260a:	8f e0       	ldi	r24, 0x0F	; 15
    260c:	20 3a       	cpi	r18, 0xA0	; 160
    260e:	38 07       	cpc	r19, r24
    2610:	79 f7       	brne	.-34     	; 0x25f0 <final_show+0x1b2>
	   tm++;
	   PORTC|=(1<<3);

	   }
	   tm=0;
	   PORTC&=~(1<<3);
    2612:	ab 98       	cbi	0x15, 3	; 21
	   if ((PINA&(1<<6)) && (PINA&(1<<7)))
    2614:	ce 9b       	sbis	0x19, 6	; 25
    2616:	12 c0       	rjmp	.+36     	; 0x263c <final_show+0x1fe>
    2618:	cf 9b       	sbis	0x19, 7	; 25
    261a:	10 c0       	rjmp	.+32     	; 0x263c <final_show+0x1fe>
	  {
	  if(flag==1)
    261c:	80 91 16 01 	lds	r24, 0x0116
    2620:	90 91 17 01 	lds	r25, 0x0117
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	11 f4       	brne	.+4      	; 0x262c <final_show+0x1ee>
	  rec=3;
    2628:	83 e0       	ldi	r24, 0x03	; 3
    262a:	09 c0       	rjmp	.+18     	; 0x263e <final_show+0x200>
	  else
	  {
	  flag=1;
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	90 93 17 01 	sts	0x0117, r25
    2634:	80 93 16 01 	sts	0x0116, r24
	  rec=1;
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	01 c0       	rjmp	.+2      	; 0x263e <final_show+0x200>
	  }
	  }
	  else
	  {
	  rec=2;
    263c:	82 e0       	ldi	r24, 0x02	; 2
    263e:	80 93 15 01 	sts	0x0115, r24
	  }

	   turn('N');
    2642:	8e e4       	ldi	r24, 0x4E	; 78
    2644:	0e 94 df 07 	call	0xfbe	; 0xfbe <turn>
linefollower();
    2648:	0e 94 3d 13 	call	0x267a	; 0x267a <linefollower>
turn('N');
    264c:	8e e4       	ldi	r24, 0x4E	; 78
    264e:	0e 94 df 07 	call	0xfbe	; 0xfbe <turn>
inch();
    2652:	0e 94 e5 08 	call	0x11ca	; 0x11ca <inch>

		//turn('U');


place_obj(rec);
    2656:	80 91 15 01 	lds	r24, 0x0115
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	0e 94 3c 14 	call	0x2878	; 0x2878 <place_obj>
turn('U');
    2660:	85 e5       	ldi	r24, 0x55	; 85
    2662:	0e 94 df 07 	call	0xfbe	; 0xfbe <turn>
inchb();
    2666:	0e 94 f7 08 	call	0x11ee	; 0x11ee <inchb>
inchb();
    266a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <inchb>
inchb();
    266e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <inchb>

turn('N');
    2672:	8e e4       	ldi	r24, 0x4E	; 78
    2674:	0e 94 df 07 	call	0xfbe	; 0xfbe <turn>
}
    2678:	08 95       	ret

0000267a <linefollower>:




void linefollower ()
{
    267a:	ef 92       	push	r14
    267c:	ff 92       	push	r15
    267e:	0f 93       	push	r16
    2680:	1f 93       	push	r17
    2682:	cf 93       	push	r28
    2684:	df 93       	push	r29
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2686:	2a e1       	ldi	r18, 0x1A	; 26
    2688:	e2 2e       	mov	r14, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    268a:	0c e7       	ldi	r16, 0x7C	; 124
    268c:	11 e0       	ldi	r17, 0x01	; 1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    268e:	90 e5       	ldi	r25, 0x50	; 80
    2690:	f9 2e       	mov	r15, r25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2692:	c4 e5       	ldi	r28, 0x54	; 84
    2694:	d1 e0       	ldi	r29, 0x01	; 1
   while(1)
   {
    
	 if(!(PINB&(1<<5)))
    2696:	b5 99       	sbic	0x16, 5	; 22
    2698:	09 c0       	rjmp	.+18     	; 0x26ac <linefollower+0x32>
	{
	turn('N');
    269a:	8e e4       	ldi	r24, 0x4E	; 78
    269c:	0e 94 df 07 	call	0xfbe	; 0xfbe <turn>
	while((PINB&(1<<5)));
    26a0:	b5 99       	sbic	0x16, 5	; 22
    26a2:	fe cf       	rjmp	.-4      	; 0x26a0 <linefollower+0x26>
	while(!(PINB&(1<<5)));
    26a4:	b5 9b       	sbis	0x16, 5	; 22
    26a6:	fe cf       	rjmp	.-4      	; 0x26a4 <linefollower+0x2a>
	final_show();
    26a8:	0e 94 1f 12 	call	0x243e	; 0x243e <final_show>
	}
    
    if((!(PINA & (1<<1)))&&(!(PINA & (1<<2)))&&(PINA & (1<<3)) && (!(PINA & (1<<4)))&&(!(PINA & (1<<5))))//00100
    26ac:	c9 99       	sbic	0x19, 1	; 25
    26ae:	14 c0       	rjmp	.+40     	; 0x26d8 <linefollower+0x5e>
    26b0:	ca 99       	sbic	0x19, 2	; 25
    26b2:	12 c0       	rjmp	.+36     	; 0x26d8 <linefollower+0x5e>
    26b4:	cb 9b       	sbis	0x19, 3	; 25
    26b6:	10 c0       	rjmp	.+32     	; 0x26d8 <linefollower+0x5e>
    26b8:	cc 99       	sbic	0x19, 4	; 25
    26ba:	0e c0       	rjmp	.+28     	; 0x26d8 <linefollower+0x5e>
    26bc:	cd 99       	sbic	0x19, 5	; 25
    26be:	0c c0       	rjmp	.+24     	; 0x26d8 <linefollower+0x5e>
	  {
	   PORTD |=(1<<5);
    26c0:	95 9a       	sbi	0x12, 5	; 18
	   PORTD |=(1<<7);
    26c2:	97 9a       	sbi	0x12, 7	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26c4:	8e 2d       	mov	r24, r14
    26c6:	8a 95       	dec	r24
    26c8:	f1 f7       	brne	.-4      	; 0x26c6 <linefollower+0x4c>
	   _delay_us(5);      
       PORTD |= (1<<4);
    26ca:	94 9a       	sbi	0x12, 4	; 18
       PORTD &=~(1<<5);
    26cc:	95 98       	cbi	0x12, 5	; 18
       PORTD |= (1<<6);
    26ce:	96 9a       	sbi	0x12, 6	; 18
       PORTD &=~(1<<7);
    26d0:	97 98       	cbi	0x12, 7	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26d2:	c8 01       	movw	r24, r16
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	f1 f7       	brne	.-4      	; 0x26d4 <linefollower+0x5a>
	   _delay_us(95);
	  }
	  
    if((PINA & (1<<2))&&(PINA & (1<<3))&&(PINA & (1<<4))) //111== forward
    26d8:	ca 9b       	sbis	0x19, 2	; 25
    26da:	10 c0       	rjmp	.+32     	; 0x26fc <linefollower+0x82>
    26dc:	cb 9b       	sbis	0x19, 3	; 25
    26de:	0e c0       	rjmp	.+28     	; 0x26fc <linefollower+0x82>
    26e0:	cc 9b       	sbis	0x19, 4	; 25
    26e2:	0c c0       	rjmp	.+24     	; 0x26fc <linefollower+0x82>
   { 
      
       
       PORTD |=(1<<5);
    26e4:	95 9a       	sbi	0x12, 5	; 18
	   PORTD |=(1<<7);
    26e6:	97 9a       	sbi	0x12, 7	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26e8:	8e 2d       	mov	r24, r14
    26ea:	8a 95       	dec	r24
    26ec:	f1 f7       	brne	.-4      	; 0x26ea <linefollower+0x70>
	   _delay_us(5);      
       PORTD |= (1<<4);
    26ee:	94 9a       	sbi	0x12, 4	; 18
       PORTD &=~(1<<5);
    26f0:	95 98       	cbi	0x12, 5	; 18
       PORTD |= (1<<6);
    26f2:	96 9a       	sbi	0x12, 6	; 18
       PORTD &=~(1<<7);
    26f4:	97 98       	cbi	0x12, 7	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26f6:	c8 01       	movw	r24, r16
    26f8:	01 97       	sbiw	r24, 0x01	; 1
    26fa:	f1 f7       	brne	.-4      	; 0x26f8 <linefollower+0x7e>
	   _delay_us(95);
	   
       
   }
   
   if ((PINA & (1<<2))&&(PINA & (1<<3)) && (!(PINA & (1<<4)))) // 110 - slight left
    26fc:	ca 9b       	sbis	0x19, 2	; 25
    26fe:	0f c0       	rjmp	.+30     	; 0x271e <linefollower+0xa4>
    2700:	cb 9b       	sbis	0x19, 3	; 25
    2702:	0d c0       	rjmp	.+26     	; 0x271e <linefollower+0xa4>
    2704:	cc 99       	sbic	0x19, 4	; 25
    2706:	0b c0       	rjmp	.+22     	; 0x271e <linefollower+0xa4>
   {
	
	   PORTD |=(1<<6);
    2708:	96 9a       	sbi	0x12, 6	; 18
       PORTD &=~(1<<7);
    270a:	97 98       	cbi	0x12, 7	; 18
       PORTD |=(1<<4);
    270c:	94 9a       	sbi	0x12, 4	; 18
       PORTD |=(1<<5);
    270e:	95 9a       	sbi	0x12, 5	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2710:	8f 2d       	mov	r24, r15
    2712:	8a 95       	dec	r24
    2714:	f1 f7       	brne	.-4      	; 0x2712 <linefollower+0x98>
	   _delay_us(15);
	   PORTD &=~(1<<5);
    2716:	95 98       	cbi	0x12, 5	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2718:	ce 01       	movw	r24, r28
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	f1 f7       	brne	.-4      	; 0x271a <linefollower+0xa0>
	   _delay_us(85);
	   
   }
   
   if ((!(PINA & (1<<2)))&&(PINA & (1<<3)) && (PINA & (1<<4))) // 011 - slight right
    271e:	ca 99       	sbic	0x19, 2	; 25
    2720:	0f c0       	rjmp	.+30     	; 0x2740 <linefollower+0xc6>
    2722:	cb 9b       	sbis	0x19, 3	; 25
    2724:	0d c0       	rjmp	.+26     	; 0x2740 <linefollower+0xc6>
    2726:	cc 9b       	sbis	0x19, 4	; 25
    2728:	0b c0       	rjmp	.+22     	; 0x2740 <linefollower+0xc6>
   {
      
	   PORTD |=(1<<4);
    272a:	94 9a       	sbi	0x12, 4	; 18
       PORTD &=~(1<<5);
    272c:	95 98       	cbi	0x12, 5	; 18
       PORTD |=(1<<6);
    272e:	96 9a       	sbi	0x12, 6	; 18
       PORTD |=(1<<7);
    2730:	97 9a       	sbi	0x12, 7	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2732:	8f 2d       	mov	r24, r15
    2734:	8a 95       	dec	r24
    2736:	f1 f7       	brne	.-4      	; 0x2734 <linefollower+0xba>
	   _delay_us(15);
	   PORTD &=~(1<<7);
    2738:	97 98       	cbi	0x12, 7	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    273a:	ce 01       	movw	r24, r28
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	f1 f7       	brne	.-4      	; 0x273c <linefollower+0xc2>
	   _delay_us(85);
	}
   
   if((!(PINA & (1<<2)))&&(!(PINA & (1<<3))) && (PINA & (1<<4)))// 001  = right  
    2740:	ca 99       	sbic	0x19, 2	; 25
    2742:	08 c0       	rjmp	.+16     	; 0x2754 <linefollower+0xda>
    2744:	cb 99       	sbic	0x19, 3	; 25
    2746:	06 c0       	rjmp	.+12     	; 0x2754 <linefollower+0xda>
    2748:	cc 9b       	sbis	0x19, 4	; 25
    274a:	04 c0       	rjmp	.+8      	; 0x2754 <linefollower+0xda>
   { 
     
       
	    
       PORTD |=(1<<4);
    274c:	94 9a       	sbi	0x12, 4	; 18
       PORTD &=~(1<<5);
    274e:	95 98       	cbi	0x12, 5	; 18
       PORTD |=(1<<6);
    2750:	96 9a       	sbi	0x12, 6	; 18
       PORTD |=(1<<7);
    2752:	97 9a       	sbi	0x12, 7	; 18
	  
   }
    
  
      
   if((PINA & (1<<2))&&(!(PINA & (1<<3))) && (!(PINA & (1<<4))))// 100 - left
    2754:	ca 9b       	sbis	0x19, 2	; 25
    2756:	08 c0       	rjmp	.+16     	; 0x2768 <linefollower+0xee>
    2758:	cb 99       	sbic	0x19, 3	; 25
    275a:	06 c0       	rjmp	.+12     	; 0x2768 <linefollower+0xee>
    275c:	cc 99       	sbic	0x19, 4	; 25
    275e:	04 c0       	rjmp	.+8      	; 0x2768 <linefollower+0xee>
   { 
      
       PORTD |=(1<<6);
    2760:	96 9a       	sbi	0x12, 6	; 18
       PORTD &=~(1<<7);
    2762:	97 98       	cbi	0x12, 7	; 18
       PORTD |=(1<<4);
    2764:	94 9a       	sbi	0x12, 4	; 18
       PORTD |=(1<<5);
    2766:	95 9a       	sbi	0x12, 5	; 18
	   
	   
   }
   
    if((PINA & (1<<1))&&(!(PINA & (1<<2)))&&(!(PINA & (1<<3))) && (!(PINA & (1<<4)))&&(!(PINA & (1<<5))))// 10000 - left
    2768:	c9 9b       	sbis	0x19, 1	; 25
    276a:	0c c0       	rjmp	.+24     	; 0x2784 <linefollower+0x10a>
    276c:	ca 99       	sbic	0x19, 2	; 25
    276e:	0a c0       	rjmp	.+20     	; 0x2784 <linefollower+0x10a>
    2770:	cb 99       	sbic	0x19, 3	; 25
    2772:	08 c0       	rjmp	.+16     	; 0x2784 <linefollower+0x10a>
    2774:	cc 99       	sbic	0x19, 4	; 25
    2776:	06 c0       	rjmp	.+12     	; 0x2784 <linefollower+0x10a>
    2778:	cd 99       	sbic	0x19, 5	; 25
    277a:	04 c0       	rjmp	.+8      	; 0x2784 <linefollower+0x10a>
   { 
        
       PORTD |=(1<<6);
    277c:	96 9a       	sbi	0x12, 6	; 18
       PORTD &=~(1<<7);
    277e:	97 98       	cbi	0x12, 7	; 18
       PORTD &=~(1<<4);
    2780:	94 98       	cbi	0x12, 4	; 18
       PORTD |=(1<<5);
    2782:	95 9a       	sbi	0x12, 5	; 18
	  
	   
   }
   
    if((!(PINA & (1<<1)))&&(!(PINA & (1<<2)))&&(!(PINA & (1<<3))) && (!(PINA & (1<<4))) && (PINA & (1<<5)))// 00001  = right  
    2784:	c9 99       	sbic	0x19, 1	; 25
    2786:	0c c0       	rjmp	.+24     	; 0x27a0 <linefollower+0x126>
    2788:	ca 99       	sbic	0x19, 2	; 25
    278a:	0a c0       	rjmp	.+20     	; 0x27a0 <linefollower+0x126>
    278c:	cb 99       	sbic	0x19, 3	; 25
    278e:	08 c0       	rjmp	.+16     	; 0x27a0 <linefollower+0x126>
    2790:	cc 99       	sbic	0x19, 4	; 25
    2792:	06 c0       	rjmp	.+12     	; 0x27a0 <linefollower+0x126>
    2794:	cd 9b       	sbis	0x19, 5	; 25
    2796:	04 c0       	rjmp	.+8      	; 0x27a0 <linefollower+0x126>
   { 
     
      
       PORTD |=(1<<4);
    2798:	94 9a       	sbi	0x12, 4	; 18
       PORTD &=~(1<<5);
    279a:	95 98       	cbi	0x12, 5	; 18
       PORTD &=~(1<<6);
    279c:	96 98       	cbi	0x12, 6	; 18
       PORTD |=(1<<7);
    279e:	97 9a       	sbi	0x12, 7	; 18
	   
	   
   }
   
   
    if((!(PINA & (1<<1)))||(!(PINA & (1<<5))))
    27a0:	c9 9b       	sbis	0x19, 1	; 25
    27a2:	02 c0       	rjmp	.+4      	; 0x27a8 <linefollower+0x12e>
    27a4:	cd 99       	sbic	0x19, 5	; 25
    27a6:	04 c0       	rjmp	.+8      	; 0x27b0 <linefollower+0x136>
	f2=0;
    27a8:	10 92 04 01 	sts	0x0104, r1
    27ac:	10 92 03 01 	sts	0x0103, r1
	
	if ((PINA & (1<<1))&&(PINA & (1<<2))&&(PINA & (1<<3)) && (PINA & (1<<4))&&(PINA & (1<<5))) // 11111 - + junction
    27b0:	c9 9b       	sbis	0x19, 1	; 25
    27b2:	08 c0       	rjmp	.+16     	; 0x27c4 <linefollower+0x14a>
    27b4:	ca 9b       	sbis	0x19, 2	; 25
    27b6:	06 c0       	rjmp	.+12     	; 0x27c4 <linefollower+0x14a>
    27b8:	cb 9b       	sbis	0x19, 3	; 25
    27ba:	04 c0       	rjmp	.+8      	; 0x27c4 <linefollower+0x14a>
    27bc:	cc 9b       	sbis	0x19, 4	; 25
    27be:	02 c0       	rjmp	.+4      	; 0x27c4 <linefollower+0x14a>
    27c0:	cd 99       	sbic	0x19, 5	; 25
    27c2:	53 c0       	rjmp	.+166    	; 0x286a <linefollower+0x1f0>
	  return;
    }*/
	
	
	
	 if ((PINA & (1<<1))&&(!(PINA & (1<<2)))&&(!(PINA & (1<<3))) && (!(PINA & (1<<4)))&&(PINA & (1<<5))) // 10001 - node
    27c4:	c9 9b       	sbis	0x19, 1	; 25
    27c6:	08 c0       	rjmp	.+16     	; 0x27d8 <linefollower+0x15e>
    27c8:	ca 99       	sbic	0x19, 2	; 25
    27ca:	06 c0       	rjmp	.+12     	; 0x27d8 <linefollower+0x15e>
    27cc:	cb 99       	sbic	0x19, 3	; 25
    27ce:	04 c0       	rjmp	.+8      	; 0x27d8 <linefollower+0x15e>
    27d0:	cc 99       	sbic	0x19, 4	; 25
    27d2:	02 c0       	rjmp	.+4      	; 0x27d8 <linefollower+0x15e>
    27d4:	cd 99       	sbic	0x19, 5	; 25
    27d6:	32 c0       	rjmp	.+100    	; 0x283c <linefollower+0x1c2>
		inch();*/
		//inch();
		return;	
	}
	
	 if ((PINA & (1<<1))&&(PINA & (1<<2))&&(PINA & (1<<3)) && (!(PINA & (1<<4)))&&(PINA & (1<<5))) // 11101 - node
    27d8:	c9 9b       	sbis	0x19, 1	; 25
    27da:	08 c0       	rjmp	.+16     	; 0x27ec <linefollower+0x172>
    27dc:	ca 9b       	sbis	0x19, 2	; 25
    27de:	06 c0       	rjmp	.+12     	; 0x27ec <linefollower+0x172>
    27e0:	cb 9b       	sbis	0x19, 3	; 25
    27e2:	04 c0       	rjmp	.+8      	; 0x27ec <linefollower+0x172>
    27e4:	cc 99       	sbic	0x19, 4	; 25
    27e6:	02 c0       	rjmp	.+4      	; 0x27ec <linefollower+0x172>
    27e8:	cd 99       	sbic	0x19, 5	; 25
    27ea:	28 c0       	rjmp	.+80     	; 0x283c <linefollower+0x1c2>
	{
		nodeflag=1;
		return;	
	}
	
	 if ((PINA & (1<<1))&&(!(PINA & (1<<2)))&&(PINA & (1<<3)) && (PINA & (1<<4))&&(PINA & (1<<5))) // 10111 - node
    27ec:	c9 9b       	sbis	0x19, 1	; 25
    27ee:	08 c0       	rjmp	.+16     	; 0x2800 <linefollower+0x186>
    27f0:	ca 99       	sbic	0x19, 2	; 25
    27f2:	06 c0       	rjmp	.+12     	; 0x2800 <linefollower+0x186>
    27f4:	cb 9b       	sbis	0x19, 3	; 25
    27f6:	04 c0       	rjmp	.+8      	; 0x2800 <linefollower+0x186>
    27f8:	cc 9b       	sbis	0x19, 4	; 25
    27fa:	02 c0       	rjmp	.+4      	; 0x2800 <linefollower+0x186>
    27fc:	cd 99       	sbic	0x19, 5	; 25
    27fe:	1e c0       	rjmp	.+60     	; 0x283c <linefollower+0x1c2>
	{
		nodeflag=1;
		return;	
	}
	*/
	 if ((PINA & (1<<1))&&(PINA & (1<<2))&&(!(PINA & (1<<3))) && (!(PINA & (1<<4)))&&(PINA & (1<<5))) // 11001 - node
    2800:	c9 9b       	sbis	0x19, 1	; 25
    2802:	08 c0       	rjmp	.+16     	; 0x2814 <linefollower+0x19a>
    2804:	ca 9b       	sbis	0x19, 2	; 25
    2806:	06 c0       	rjmp	.+12     	; 0x2814 <linefollower+0x19a>
    2808:	cb 99       	sbic	0x19, 3	; 25
    280a:	04 c0       	rjmp	.+8      	; 0x2814 <linefollower+0x19a>
    280c:	cc 99       	sbic	0x19, 4	; 25
    280e:	02 c0       	rjmp	.+4      	; 0x2814 <linefollower+0x19a>
    2810:	cd 99       	sbic	0x19, 5	; 25
    2812:	14 c0       	rjmp	.+40     	; 0x283c <linefollower+0x1c2>
		//inch();
		
		return;	
	}
	
	 if ((PINA & (1<<1))&&(!(PINA & (1<<2)))&&(!(PINA & (1<<3))) && (PINA & (1<<4))&&(PINA & (1<<5))) // 10011 - node
    2814:	c9 9b       	sbis	0x19, 1	; 25
    2816:	08 c0       	rjmp	.+16     	; 0x2828 <linefollower+0x1ae>
    2818:	ca 99       	sbic	0x19, 2	; 25
    281a:	06 c0       	rjmp	.+12     	; 0x2828 <linefollower+0x1ae>
    281c:	cb 99       	sbic	0x19, 3	; 25
    281e:	04 c0       	rjmp	.+8      	; 0x2828 <linefollower+0x1ae>
    2820:	cc 9b       	sbis	0x19, 4	; 25
    2822:	02 c0       	rjmp	.+4      	; 0x2828 <linefollower+0x1ae>
    2824:	cd 99       	sbic	0x19, 5	; 25
    2826:	0a c0       	rjmp	.+20     	; 0x283c <linefollower+0x1c2>
		nodeflag=1;
		//inch();
		
		return;	
	}
	 if ((PINA & (1<<1))&&(PINA & (1<<2))&&!(PINA & (1<<3)) && (PINA & (1<<4))&&(PINA & (1<<5))) // 11011 - node
    2828:	c9 9b       	sbis	0x19, 1	; 25
    282a:	0f c0       	rjmp	.+30     	; 0x284a <linefollower+0x1d0>
    282c:	ca 9b       	sbis	0x19, 2	; 25
    282e:	0d c0       	rjmp	.+26     	; 0x284a <linefollower+0x1d0>
    2830:	cb 99       	sbic	0x19, 3	; 25
    2832:	0b c0       	rjmp	.+22     	; 0x284a <linefollower+0x1d0>
    2834:	cc 9b       	sbis	0x19, 4	; 25
    2836:	09 c0       	rjmp	.+18     	; 0x284a <linefollower+0x1d0>
    2838:	cd 9b       	sbis	0x19, 5	; 25
    283a:	07 c0       	rjmp	.+14     	; 0x284a <linefollower+0x1d0>
	{
		nodeflag=1;
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	90 93 0a 01 	sts	0x010A, r25
    2844:	80 93 09 01 	sts	0x0109, r24
    2848:	10 c0       	rjmp	.+32     	; 0x286a <linefollower+0x1f0>
		
		return;	
	}
	
	
	if((PINA&(1<<3)))
    284a:	cb 9b       	sbis	0x19, 3	; 25
    284c:	04 c0       	rjmp	.+8      	; 0x2856 <linefollower+0x1dc>
	nodeflag=0;                     //// above though centre sensor is one , nodeflag is made 1 which immediately becomes zero //////////
    284e:	10 92 0a 01 	sts	0x010A, r1
    2852:	10 92 09 01 	sts	0x0109, r1
		
	}
	*/

	
	if ((!(PINA & (1<<1)))&&(!(PINA & (1<<2)))&&(!(PINA & (1<<3)))&&(!(PINA & (1<<4)))&&(!(PINA & (1<<5))))// 00000- dead end 
    2856:	c9 99       	sbic	0x19, 1	; 25
    2858:	1e cf       	rjmp	.-452    	; 0x2696 <linefollower+0x1c>
    285a:	ca 99       	sbic	0x19, 2	; 25
    285c:	1c cf       	rjmp	.-456    	; 0x2696 <linefollower+0x1c>
    285e:	cb 99       	sbic	0x19, 3	; 25
    2860:	1a cf       	rjmp	.-460    	; 0x2696 <linefollower+0x1c>
    2862:	cc 99       	sbic	0x19, 4	; 25
    2864:	18 cf       	rjmp	.-464    	; 0x2696 <linefollower+0x1c>
    2866:	89 b3       	in	r24, 0x19	; 25
    2868:	16 cf       	rjmp	.-468    	; 0x2696 <linefollower+0x1c>
   {
   
	}
	
   }
}
    286a:	df 91       	pop	r29
    286c:	cf 91       	pop	r28
    286e:	1f 91       	pop	r17
    2870:	0f 91       	pop	r16
    2872:	ff 90       	pop	r15
    2874:	ef 90       	pop	r14
    2876:	08 95       	ret

00002878 <place_obj>:

lcd_showvalue1(min);*/	
}

void place_obj(int type)
{
    2878:	0f 93       	push	r16
    287a:	1f 93       	push	r17
    287c:	cf 93       	push	r28
    287e:	df 93       	push	r29
signed int pt=0,end=0;
char ch;

if(type==2)
    2880:	82 30       	cpi	r24, 0x02	; 2
    2882:	91 05       	cpc	r25, r1
    2884:	09 f0       	breq	.+2      	; 0x2888 <place_obj+0x10>
    2886:	65 c0       	rjmp	.+202    	; 0x2952 <place_obj+0xda>
    2888:	c0 e0       	ldi	r28, 0x00	; 0
    288a:	d0 e0       	ldi	r29, 0x00	; 0
		inch();
		turn(ch);
		if(ch=='N')
		break;
		linefollower();
		PORTD ^=(1<<1);
    288c:	02 e0       	ldi	r16, 0x02	; 2

if(type==2)
{
	for(pt=0;pt<25;pt++)
	{
		ch=path_centre[pt];
    288e:	fe 01       	movw	r30, r28
    2890:	e4 5b       	subi	r30, 0xB4	; 180
    2892:	fe 4f       	sbci	r31, 0xFE	; 254
    2894:	10 81       	ld	r17, Z
		inch();
    2896:	0e 94 e5 08 	call	0x11ca	; 0x11ca <inch>
		turn(ch);
    289a:	81 2f       	mov	r24, r17
    289c:	0e 94 df 07 	call	0xfbe	; 0xfbe <turn>
		if(ch=='N')
    28a0:	1e 34       	cpi	r17, 0x4E	; 78
    28a2:	49 f0       	breq	.+18     	; 0x28b6 <place_obj+0x3e>
		break;
		linefollower();
    28a4:	0e 94 3d 13 	call	0x267a	; 0x267a <linefollower>
		PORTD ^=(1<<1);
    28a8:	82 b3       	in	r24, 0x12	; 18
    28aa:	80 27       	eor	r24, r16
    28ac:	82 bb       	out	0x12, r24	; 18
signed int pt=0,end=0;
char ch;

if(type==2)
{
	for(pt=0;pt<25;pt++)
    28ae:	21 96       	adiw	r28, 0x01	; 1
    28b0:	c9 31       	cpi	r28, 0x19	; 25
    28b2:	d1 05       	cpc	r29, r1
    28b4:	61 f7       	brne	.-40     	; 0x288e <place_obj+0x16>
    28b6:	ec e4       	ldi	r30, 0x4C	; 76
    28b8:	f1 e0       	ldi	r31, 0x01	; 1
	for(pt=0;pt<25;pt++)
	{
		if(path_centre[pt]=='L')
		path_centre[pt]='R';
		else if(path_centre[pt]=='R')
		path_centre[pt]='L';
    28ba:	2c e4       	ldi	r18, 0x4C	; 76
	}
end=pt;
	for(pt=0;pt<25;pt++)
	{
		if(path_centre[pt]=='L')
		path_centre[pt]='R';
    28bc:	92 e5       	ldi	r25, 0x52	; 82
		PORTD ^=(1<<1);
	}
end=pt;
	for(pt=0;pt<25;pt++)
	{
		if(path_centre[pt]=='L')
    28be:	80 81       	ld	r24, Z
    28c0:	8c 34       	cpi	r24, 0x4C	; 76
    28c2:	11 f4       	brne	.+4      	; 0x28c8 <place_obj+0x50>
		path_centre[pt]='R';
    28c4:	90 83       	st	Z, r25
    28c6:	03 c0       	rjmp	.+6      	; 0x28ce <place_obj+0x56>
		else if(path_centre[pt]=='R')
    28c8:	82 35       	cpi	r24, 0x52	; 82
    28ca:	09 f4       	brne	.+2      	; 0x28ce <place_obj+0x56>
		path_centre[pt]='L';
    28cc:	20 83       	st	Z, r18
    28ce:	31 96       	adiw	r30, 0x01	; 1
		break;
		linefollower();
		PORTD ^=(1<<1);
	}
end=pt;
	for(pt=0;pt<25;pt++)
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	e5 36       	cpi	r30, 0x65	; 101
    28d4:	f8 07       	cpc	r31, r24
    28d6:	99 f7       	brne	.-26     	; 0x28be <place_obj+0x46>
		if(path_centre[pt]=='L')
		path_centre[pt]='R';
		else if(path_centre[pt]=='R')
		path_centre[pt]='L';
	}
turn('N');
    28d8:	8e e4       	ldi	r24, 0x4E	; 78
    28da:	0e 94 df 07 	call	0xfbe	; 0xfbe <turn>
inch();
    28de:	0e 94 e5 08 	call	0x11ca	; 0x11ca <inch>
    28e2:	20 91 c1 03 	lds	r18, 0x03C1
    28e6:	30 91 c2 03 	lds	r19, 0x03C2
    28ea:	44 e5       	ldi	r20, 0x54	; 84
    28ec:	51 e0       	ldi	r21, 0x01	; 1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28ee:	60 e5       	ldi	r22, 0x50	; 80
    28f0:	0d c0       	rjmp	.+26     	; 0x290c <place_obj+0x94>
 while(i<4000) 
	   {
	   PORTB &=~ (1<<0);
    28f2:	c0 98       	cbi	0x18, 0	; 24
       PORTB |=(1<<1);// keepin object
    28f4:	c1 9a       	sbi	0x18, 1	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28f6:	ca 01       	movw	r24, r20
    28f8:	01 97       	sbiw	r24, 0x01	; 1
    28fa:	f1 f7       	brne	.-4      	; 0x28f8 <place_obj+0x80>
	   _delay_us(85);
	   PORTB |= (1<<0);
    28fc:	c0 9a       	sbi	0x18, 0	; 24
       PORTB |= (1<<1);
    28fe:	c1 9a       	sbi	0x18, 1	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2900:	86 2f       	mov	r24, r22
    2902:	8a 95       	dec	r24
    2904:	f1 f7       	brne	.-4      	; 0x2902 <place_obj+0x8a>
	   _delay_us(15);
	   i++;
	   PORTC|=(1<<3);
    2906:	ab 9a       	sbi	0x15, 3	; 21
    2908:	2f 5f       	subi	r18, 0xFF	; 255
    290a:	3f 4f       	sbci	r19, 0xFF	; 255
		else if(path_centre[pt]=='R')
		path_centre[pt]='L';
	}
turn('N');
inch();
 while(i<4000) 
    290c:	8f e0       	ldi	r24, 0x0F	; 15
    290e:	20 3a       	cpi	r18, 0xA0	; 160
    2910:	38 07       	cpc	r19, r24
    2912:	7c f3       	brlt	.-34     	; 0x28f2 <place_obj+0x7a>
    2914:	30 93 c2 03 	sts	0x03C2, r19
    2918:	20 93 c1 03 	sts	0x03C1, r18
	   _delay_us(15);
	   i++;
	   PORTC|=(1<<3);

	   }
	   PORTC&=~(1<<3);
    291c:	ab 98       	cbi	0x15, 3	; 21
inchb();	
    291e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <inchb>
turn('U');
    2922:	85 e5       	ldi	r24, 0x55	; 85
    2924:	0e 94 df 07 	call	0xfbe	; 0xfbe <turn>
    2928:	c5 5b       	subi	r28, 0xB5	; 181
    292a:	de 4f       	sbci	r29, 0xFE	; 254
	{
		linefollower();
		ch=path_centre[pt];
		inch();
		turn(ch);
		PORTD ^=(1<<1);
    292c:	02 e0       	ldi	r16, 0x02	; 2
    292e:	0c c0       	rjmp	.+24     	; 0x2948 <place_obj+0xd0>
	   PORTC&=~(1<<3);
inchb();	
turn('U');
	for(pt=end-1;pt>=0;pt--)
	{
		linefollower();
    2930:	0e 94 3d 13 	call	0x267a	; 0x267a <linefollower>
		ch=path_centre[pt];
    2934:	18 81       	ld	r17, Y
		inch();
    2936:	0e 94 e5 08 	call	0x11ca	; 0x11ca <inch>
		turn(ch);
    293a:	81 2f       	mov	r24, r17
    293c:	0e 94 df 07 	call	0xfbe	; 0xfbe <turn>
		PORTD ^=(1<<1);
    2940:	82 b3       	in	r24, 0x12	; 18
    2942:	80 27       	eor	r24, r16
    2944:	82 bb       	out	0x12, r24	; 18
    2946:	21 97       	sbiw	r28, 0x01	; 1

	   }
	   PORTC&=~(1<<3);
inchb();	
turn('U');
	for(pt=end-1;pt>=0;pt--)
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	cb 34       	cpi	r28, 0x4B	; 75
    294c:	d8 07       	cpc	r29, r24
    294e:	81 f7       	brne	.-32     	; 0x2930 <place_obj+0xb8>
    2950:	d0 c0       	rjmp	.+416    	; 0x2af2 <place_obj+0x27a>
		turn(ch);
		PORTD ^=(1<<1);
	}
turn('N');
}
else if(type==3)
    2952:	83 30       	cpi	r24, 0x03	; 3
    2954:	91 05       	cpc	r25, r1
    2956:	09 f0       	breq	.+2      	; 0x295a <place_obj+0xe2>
    2958:	65 c0       	rjmp	.+202    	; 0x2a24 <place_obj+0x1ac>
    295a:	c0 e0       	ldi	r28, 0x00	; 0
    295c:	d0 e0       	ldi	r29, 0x00	; 0
		inch();
		turn(ch);
		if(ch=='N')
		break;
 		linefollower();
		PORTD ^=(1<<1);
    295e:	02 e0       	ldi	r16, 0x02	; 2
}
else if(type==3)
{
	for(pt=0;pt<25;pt++)
	{
		ch=path_end_right[pt];
    2960:	fe 01       	movw	r30, r28
    2962:	ef 5c       	subi	r30, 0xCF	; 207
    2964:	fe 4f       	sbci	r31, 0xFE	; 254
    2966:	10 81       	ld	r17, Z
		inch();
    2968:	0e 94 e5 08 	call	0x11ca	; 0x11ca <inch>
		turn(ch);
    296c:	81 2f       	mov	r24, r17
    296e:	0e 94 df 07 	call	0xfbe	; 0xfbe <turn>
		if(ch=='N')
    2972:	1e 34       	cpi	r17, 0x4E	; 78
    2974:	49 f0       	breq	.+18     	; 0x2988 <place_obj+0x110>
		break;
 		linefollower();
    2976:	0e 94 3d 13 	call	0x267a	; 0x267a <linefollower>
		PORTD ^=(1<<1);
    297a:	82 b3       	in	r24, 0x12	; 18
    297c:	80 27       	eor	r24, r16
    297e:	82 bb       	out	0x12, r24	; 18
	}
turn('N');
}
else if(type==3)
{
	for(pt=0;pt<25;pt++)
    2980:	21 96       	adiw	r28, 0x01	; 1
    2982:	c9 31       	cpi	r28, 0x19	; 25
    2984:	d1 05       	cpc	r29, r1
    2986:	61 f7       	brne	.-40     	; 0x2960 <place_obj+0xe8>
    2988:	e1 e3       	ldi	r30, 0x31	; 49
    298a:	f1 e0       	ldi	r31, 0x01	; 1
	for(pt=0;pt<25;pt++)
	{
		if(path_end_right[pt]=='L')
		path_end_right[pt]='R';
		else if(path_end_right[pt]=='R')
		path_end_right[pt]='L';
    298c:	2c e4       	ldi	r18, 0x4C	; 76
	}
end=pt;
	for(pt=0;pt<25;pt++)
	{
		if(path_end_right[pt]=='L')
		path_end_right[pt]='R';
    298e:	92 e5       	ldi	r25, 0x52	; 82
		PORTD ^=(1<<1);
	}
end=pt;
	for(pt=0;pt<25;pt++)
	{
		if(path_end_right[pt]=='L')
    2990:	80 81       	ld	r24, Z
    2992:	8c 34       	cpi	r24, 0x4C	; 76
    2994:	11 f4       	brne	.+4      	; 0x299a <place_obj+0x122>
		path_end_right[pt]='R';
    2996:	90 83       	st	Z, r25
    2998:	03 c0       	rjmp	.+6      	; 0x29a0 <place_obj+0x128>
		else if(path_end_right[pt]=='R')
    299a:	82 35       	cpi	r24, 0x52	; 82
    299c:	09 f4       	brne	.+2      	; 0x29a0 <place_obj+0x128>
		path_end_right[pt]='L';
    299e:	20 83       	st	Z, r18
    29a0:	31 96       	adiw	r30, 0x01	; 1
		break;
 		linefollower();
		PORTD ^=(1<<1);
	}
end=pt;
	for(pt=0;pt<25;pt++)
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	ea 34       	cpi	r30, 0x4A	; 74
    29a6:	f8 07       	cpc	r31, r24
    29a8:	99 f7       	brne	.-26     	; 0x2990 <place_obj+0x118>
		if(path_end_right[pt]=='L')
		path_end_right[pt]='R';
		else if(path_end_right[pt]=='R')
		path_end_right[pt]='L';
	}
turn('N');
    29aa:	8e e4       	ldi	r24, 0x4E	; 78
    29ac:	0e 94 df 07 	call	0xfbe	; 0xfbe <turn>
inch();
    29b0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <inch>
    29b4:	20 91 c1 03 	lds	r18, 0x03C1
    29b8:	30 91 c2 03 	lds	r19, 0x03C2
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29bc:	44 e5       	ldi	r20, 0x54	; 84
    29be:	51 e0       	ldi	r21, 0x01	; 1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29c0:	60 e5       	ldi	r22, 0x50	; 80
    29c2:	0d c0       	rjmp	.+26     	; 0x29de <place_obj+0x166>
 while(i<4000) 
	   {
	   PORTB &=~ (1<<0);
    29c4:	c0 98       	cbi	0x18, 0	; 24
       PORTB |=(1<<1);// keepin object
    29c6:	c1 9a       	sbi	0x18, 1	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29c8:	ca 01       	movw	r24, r20
    29ca:	01 97       	sbiw	r24, 0x01	; 1
    29cc:	f1 f7       	brne	.-4      	; 0x29ca <place_obj+0x152>
	   _delay_us(85);
	   PORTB |= (1<<0);
    29ce:	c0 9a       	sbi	0x18, 0	; 24
       PORTB |= (1<<1);
    29d0:	c1 9a       	sbi	0x18, 1	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29d2:	86 2f       	mov	r24, r22
    29d4:	8a 95       	dec	r24
    29d6:	f1 f7       	brne	.-4      	; 0x29d4 <place_obj+0x15c>
	   _delay_us(15);
	   i++;
	   PORTC|=(1<<3);
    29d8:	ab 9a       	sbi	0x15, 3	; 21
    29da:	2f 5f       	subi	r18, 0xFF	; 255
    29dc:	3f 4f       	sbci	r19, 0xFF	; 255
		else if(path_end_right[pt]=='R')
		path_end_right[pt]='L';
	}
turn('N');
inch();
 while(i<4000) 
    29de:	8f e0       	ldi	r24, 0x0F	; 15
    29e0:	20 3a       	cpi	r18, 0xA0	; 160
    29e2:	38 07       	cpc	r19, r24
    29e4:	7c f3       	brlt	.-34     	; 0x29c4 <place_obj+0x14c>
    29e6:	30 93 c2 03 	sts	0x03C2, r19
    29ea:	20 93 c1 03 	sts	0x03C1, r18
	   _delay_us(15);
	   i++;
	   PORTC|=(1<<3);

	   }
	   PORTC&=~(1<<3);
    29ee:	ab 98       	cbi	0x15, 3	; 21
inchb();		
    29f0:	0e 94 f7 08 	call	0x11ee	; 0x11ee <inchb>
turn('U');
    29f4:	85 e5       	ldi	r24, 0x55	; 85
    29f6:	0e 94 df 07 	call	0xfbe	; 0xfbe <turn>
    29fa:	c0 5d       	subi	r28, 0xD0	; 208
    29fc:	de 4f       	sbci	r29, 0xFE	; 254
	{
		linefollower();
		ch=path_end_right[pt];
		inch();
		turn(ch);
		PORTD ^=(1<<1);
    29fe:	02 e0       	ldi	r16, 0x02	; 2
    2a00:	0c c0       	rjmp	.+24     	; 0x2a1a <place_obj+0x1a2>
	   PORTC&=~(1<<3);
inchb();		
turn('U');
	for(pt=end-1;pt>=0;pt--)
	{
		linefollower();
    2a02:	0e 94 3d 13 	call	0x267a	; 0x267a <linefollower>
		ch=path_end_right[pt];
    2a06:	18 81       	ld	r17, Y
		inch();
    2a08:	0e 94 e5 08 	call	0x11ca	; 0x11ca <inch>
		turn(ch);
    2a0c:	81 2f       	mov	r24, r17
    2a0e:	0e 94 df 07 	call	0xfbe	; 0xfbe <turn>
		PORTD ^=(1<<1);
    2a12:	82 b3       	in	r24, 0x12	; 18
    2a14:	80 27       	eor	r24, r16
    2a16:	82 bb       	out	0x12, r24	; 18
    2a18:	21 97       	sbiw	r28, 0x01	; 1

	   }
	   PORTC&=~(1<<3);
inchb();		
turn('U');
	for(pt=end-1;pt>=0;pt--)
    2a1a:	81 e0       	ldi	r24, 0x01	; 1
    2a1c:	c0 33       	cpi	r28, 0x30	; 48
    2a1e:	d8 07       	cpc	r29, r24
    2a20:	81 f7       	brne	.-32     	; 0x2a02 <place_obj+0x18a>
    2a22:	67 c0       	rjmp	.+206    	; 0x2af2 <place_obj+0x27a>
		turn(ch);
		PORTD ^=(1<<1);
	}
turn('N');
}
else if(type==1)
    2a24:	01 97       	sbiw	r24, 0x01	; 1
    2a26:	09 f0       	breq	.+2      	; 0x2a2a <place_obj+0x1b2>
    2a28:	67 c0       	rjmp	.+206    	; 0x2af8 <place_obj+0x280>
    2a2a:	c0 e0       	ldi	r28, 0x00	; 0
    2a2c:	d0 e0       	ldi	r29, 0x00	; 0
		inch();
		turn(ch);
		if(ch=='N')
		break;
		linefollower();
		PORTD ^=(1<<1);
    2a2e:	02 e0       	ldi	r16, 0x02	; 2
}
else if(type==1)
{
	for(pt=0;pt<25;pt++)
	{
		ch=path_end_left[pt];
    2a30:	fe 01       	movw	r30, r28
    2a32:	ef 56       	subi	r30, 0x6F	; 111
    2a34:	f9 4f       	sbci	r31, 0xF9	; 249
    2a36:	10 81       	ld	r17, Z
		inch();
    2a38:	0e 94 e5 08 	call	0x11ca	; 0x11ca <inch>
		turn(ch);
    2a3c:	81 2f       	mov	r24, r17
    2a3e:	0e 94 df 07 	call	0xfbe	; 0xfbe <turn>
		if(ch=='N')
    2a42:	1e 34       	cpi	r17, 0x4E	; 78
    2a44:	49 f0       	breq	.+18     	; 0x2a58 <place_obj+0x1e0>
		break;
		linefollower();
    2a46:	0e 94 3d 13 	call	0x267a	; 0x267a <linefollower>
		PORTD ^=(1<<1);
    2a4a:	82 b3       	in	r24, 0x12	; 18
    2a4c:	80 27       	eor	r24, r16
    2a4e:	82 bb       	out	0x12, r24	; 18
	}
turn('N');
}
else if(type==1)
{
	for(pt=0;pt<25;pt++)
    2a50:	21 96       	adiw	r28, 0x01	; 1
    2a52:	c9 31       	cpi	r28, 0x19	; 25
    2a54:	d1 05       	cpc	r29, r1
    2a56:	61 f7       	brne	.-40     	; 0x2a30 <place_obj+0x1b8>
    2a58:	e1 e9       	ldi	r30, 0x91	; 145
    2a5a:	f6 e0       	ldi	r31, 0x06	; 6
	for(pt=0;pt<25;pt++)
	{
		if(path_end_left[pt]=='L')
		path_end_left[pt]='R';
		else if(path_end_left[pt]=='R')
		path_end_left[pt]='L';
    2a5c:	2c e4       	ldi	r18, 0x4C	; 76
	}
end=pt;
	for(pt=0;pt<25;pt++)
	{
		if(path_end_left[pt]=='L')
		path_end_left[pt]='R';
    2a5e:	92 e5       	ldi	r25, 0x52	; 82
		PORTD ^=(1<<1);
	}
end=pt;
	for(pt=0;pt<25;pt++)
	{
		if(path_end_left[pt]=='L')
    2a60:	80 81       	ld	r24, Z
    2a62:	8c 34       	cpi	r24, 0x4C	; 76
    2a64:	11 f4       	brne	.+4      	; 0x2a6a <place_obj+0x1f2>
		path_end_left[pt]='R';
    2a66:	90 83       	st	Z, r25
    2a68:	03 c0       	rjmp	.+6      	; 0x2a70 <place_obj+0x1f8>
		else if(path_end_left[pt]=='R')
    2a6a:	82 35       	cpi	r24, 0x52	; 82
    2a6c:	09 f4       	brne	.+2      	; 0x2a70 <place_obj+0x1f8>
		path_end_left[pt]='L';
    2a6e:	20 83       	st	Z, r18
    2a70:	31 96       	adiw	r30, 0x01	; 1
		break;
		linefollower();
		PORTD ^=(1<<1);
	}
end=pt;
	for(pt=0;pt<25;pt++)
    2a72:	86 e0       	ldi	r24, 0x06	; 6
    2a74:	ea 3a       	cpi	r30, 0xAA	; 170
    2a76:	f8 07       	cpc	r31, r24
    2a78:	99 f7       	brne	.-26     	; 0x2a60 <place_obj+0x1e8>
		if(path_end_left[pt]=='L')
		path_end_left[pt]='R';
		else if(path_end_left[pt]=='R')
		path_end_left[pt]='L';
	}
turn('N');
    2a7a:	8e e4       	ldi	r24, 0x4E	; 78
    2a7c:	0e 94 df 07 	call	0xfbe	; 0xfbe <turn>
inch();
    2a80:	0e 94 e5 08 	call	0x11ca	; 0x11ca <inch>
    2a84:	20 91 c1 03 	lds	r18, 0x03C1
    2a88:	30 91 c2 03 	lds	r19, 0x03C2
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a8c:	44 e5       	ldi	r20, 0x54	; 84
    2a8e:	51 e0       	ldi	r21, 0x01	; 1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a90:	60 e5       	ldi	r22, 0x50	; 80
    2a92:	0d c0       	rjmp	.+26     	; 0x2aae <place_obj+0x236>
 while(i<4000) 
	   {
	   PORTB &=~ (1<<0);
    2a94:	c0 98       	cbi	0x18, 0	; 24
       PORTB |=(1<<1);// keepin object
    2a96:	c1 9a       	sbi	0x18, 1	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a98:	ca 01       	movw	r24, r20
    2a9a:	01 97       	sbiw	r24, 0x01	; 1
    2a9c:	f1 f7       	brne	.-4      	; 0x2a9a <place_obj+0x222>
	   _delay_us(85);
	   PORTB |= (1<<0);
    2a9e:	c0 9a       	sbi	0x18, 0	; 24
       PORTB |= (1<<1);
    2aa0:	c1 9a       	sbi	0x18, 1	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2aa2:	86 2f       	mov	r24, r22
    2aa4:	8a 95       	dec	r24
    2aa6:	f1 f7       	brne	.-4      	; 0x2aa4 <place_obj+0x22c>
	   _delay_us(15);
	   i++;
	   PORTC|=(1<<3);
    2aa8:	ab 9a       	sbi	0x15, 3	; 21
    2aaa:	2f 5f       	subi	r18, 0xFF	; 255
    2aac:	3f 4f       	sbci	r19, 0xFF	; 255
		else if(path_end_left[pt]=='R')
		path_end_left[pt]='L';
	}
turn('N');
inch();
 while(i<4000) 
    2aae:	8f e0       	ldi	r24, 0x0F	; 15
    2ab0:	20 3a       	cpi	r18, 0xA0	; 160
    2ab2:	38 07       	cpc	r19, r24
    2ab4:	7c f3       	brlt	.-34     	; 0x2a94 <place_obj+0x21c>
    2ab6:	30 93 c2 03 	sts	0x03C2, r19
    2aba:	20 93 c1 03 	sts	0x03C1, r18
	   _delay_us(15);
	   i++;
	   PORTC|=(1<<3);

	   }
	   PORTC&=~(1<<3);
    2abe:	ab 98       	cbi	0x15, 3	; 21
inchb();			
    2ac0:	0e 94 f7 08 	call	0x11ee	; 0x11ee <inchb>
turn('U');
    2ac4:	85 e5       	ldi	r24, 0x55	; 85
    2ac6:	0e 94 df 07 	call	0xfbe	; 0xfbe <turn>
    2aca:	c0 57       	subi	r28, 0x70	; 112
    2acc:	d9 4f       	sbci	r29, 0xF9	; 249
	{
		linefollower();
		ch=path_end_left[pt];
		inch();
		turn(ch);
		PORTD ^=(1<<1);
    2ace:	02 e0       	ldi	r16, 0x02	; 2
    2ad0:	0c c0       	rjmp	.+24     	; 0x2aea <place_obj+0x272>
	   PORTC&=~(1<<3);
inchb();			
turn('U');
	for(pt=end-1;pt>=0;pt--)
	{
		linefollower();
    2ad2:	0e 94 3d 13 	call	0x267a	; 0x267a <linefollower>
		ch=path_end_left[pt];
    2ad6:	18 81       	ld	r17, Y
		inch();
    2ad8:	0e 94 e5 08 	call	0x11ca	; 0x11ca <inch>
		turn(ch);
    2adc:	81 2f       	mov	r24, r17
    2ade:	0e 94 df 07 	call	0xfbe	; 0xfbe <turn>
		PORTD ^=(1<<1);
    2ae2:	82 b3       	in	r24, 0x12	; 18
    2ae4:	80 27       	eor	r24, r16
    2ae6:	82 bb       	out	0x12, r24	; 18
    2ae8:	21 97       	sbiw	r28, 0x01	; 1

	   }
	   PORTC&=~(1<<3);
inchb();			
turn('U');
	for(pt=end-1;pt>=0;pt--)
    2aea:	86 e0       	ldi	r24, 0x06	; 6
    2aec:	c0 39       	cpi	r28, 0x90	; 144
    2aee:	d8 07       	cpc	r29, r24
    2af0:	81 f7       	brne	.-32     	; 0x2ad2 <place_obj+0x25a>
		ch=path_end_left[pt];
		inch();
		turn(ch);
		PORTD ^=(1<<1);
	}
turn('N');
    2af2:	8e e4       	ldi	r24, 0x4E	; 78
    2af4:	0e 94 df 07 	call	0xfbe	; 0xfbe <turn>
}


    2af8:	df 91       	pop	r29
    2afa:	cf 91       	pop	r28
    2afc:	1f 91       	pop	r17
    2afe:	0f 91       	pop	r16
    2b00:	08 95       	ret

00002b02 <main>:

int main(void)
{
    2b02:	1f 93       	push	r17
   DDRA = 0x00;
    2b04:	1a ba       	out	0x1a, r1	; 26
   PORTA = 0xFF;
    2b06:	8f ef       	ldi	r24, 0xFF	; 255
    2b08:	8b bb       	out	0x1b, r24	; 27
   DDRD |=(1<<4)|(1<<5); //initialising PORTS of motors
    2b0a:	81 b3       	in	r24, 0x11	; 17
    2b0c:	80 63       	ori	r24, 0x30	; 48
    2b0e:	81 bb       	out	0x11, r24	; 17
   DDRD |=(1<<6)|(1<<7);
    2b10:	81 b3       	in	r24, 0x11	; 17
    2b12:	80 6c       	ori	r24, 0xC0	; 192
    2b14:	81 bb       	out	0x11, r24	; 17
   PORTD |= (1<<4);
    2b16:	94 9a       	sbi	0x12, 4	; 18
   PORTD &=~(1<<5);
    2b18:	95 98       	cbi	0x12, 5	; 18
   PORTD |= (1<<6);
    2b1a:	96 9a       	sbi	0x12, 6	; 18
   PORTD &=~(1<<7);
    2b1c:	97 98       	cbi	0x12, 7	; 18
   DDRB |=(1<<0)|(1<<1); // lifting motor initialization
    2b1e:	87 b3       	in	r24, 0x17	; 23
    2b20:	83 60       	ori	r24, 0x03	; 3
    2b22:	87 bb       	out	0x17, r24	; 23
	 
   DDRC |=(1<<3); // initialising port of buzzer .
    2b24:	a3 9a       	sbi	0x14, 3	; 20

   PORTB |= (1<<5); // activating pullups for switch
    2b26:	c5 9a       	sbi	0x18, 5	; 24
	 
	    lcd_init();
    2b28:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_init>
		//initialize();
		//sei();
		//UCSRB|=(1<<RXCIE);
        PORTC|= (1<<1);  // initialising lcd
    2b2c:	a9 9a       	sbi	0x15, 1	; 21
        lcd_gotoxy1('0');
    2b2e:	80 e3       	ldi	r24, 0x30	; 48
    2b30:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy1>
	int ch;
	
  // PORTB |=(1<<5);
	initmatrix();
    2b34:	0e 94 60 01 	call	0x2c0	; 0x2c0 <initmatrix>
   while(1)
  {
 
   unsigned char c=0 ;
   
	timer_init();  //////
    2b38:	0e 94 88 02 	call	0x510	; 0x510 <timer_init>
	lcd_showvalue1(curry);
	lcd_string("o:");
	lcd_showvalue1(ori);

	*/
   linefollower();
    2b3c:	0e 94 3d 13 	call	0x267a	; 0x267a <linefollower>
    
	lcd_gotoxy2(0);
    2b40:	80 e0       	ldi	r24, 0x00	; 0
    2b42:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_gotoxy2>
    lcd_string("B:");
    2b46:	80 e6       	ldi	r24, 0x60	; 96
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_string>
	ch=bridgeflag;
	lcd_showvalue1(ch);
    2b4e:	80 91 0b 01 	lds	r24, 0x010B
    2b52:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_showvalue1>
	lcd_string("T:");
    2b56:	83 e6       	ldi	r24, 0x63	; 99
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_string>
	ch=bridgetime;
	lcd_showvalue1(ch);
    2b5e:	80 91 11 01 	lds	r24, 0x0111
    2b62:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_showvalue1>
	lcd_string("f:");
    2b66:	86 e6       	ldi	r24, 0x66	; 102
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_string>
	ch=f2;
	lcd_showvalue1(ch);
    2b6e:	80 91 03 01 	lds	r24, 0x0103
    2b72:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_showvalue1>
	
   PORTC &=~(1<<3);
    2b76:	ab 98       	cbi	0x15, 3	; 21
   updatemaze();
    2b78:	0e 94 25 02 	call	0x44a	; 0x44a <updatemaze>
   // lcd_string("D:");
   c = decidemaze();
    2b7c:	0e 94 67 02 	call	0x4ce	; 0x4ce <decidemaze>
    2b80:	18 2f       	mov	r17, r24
   //lcd_char(c);
   mazestore();   //////
    2b82:	0e 94 94 02 	call	0x528	; 0x528 <mazestore>
    lcd_gotoxy1(0);
    2b86:	80 e0       	ldi	r24, 0x00	; 0
    2b88:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy1>
	lcd_string("x:");
    2b8c:	89 e6       	ldi	r24, 0x69	; 105
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_string>
	lcd_showvalue1(currx);
    2b94:	80 91 fd 00 	lds	r24, 0x00FD
    2b98:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_showvalue1>
	lcd_string("y:");
    2b9c:	8c e6       	ldi	r24, 0x6C	; 108
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_string>
	lcd_showvalue1(curry);
    2ba4:	80 91 ff 00 	lds	r24, 0x00FF
    2ba8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_showvalue1>
	//lcd_char(' ');
	lcd_string("y:");
	ch=a[currx][curry][2];
	lcd_showvalue1(ch);*/
//lcd_gotoxy2(0);
	 lcd_string("n:");
    2bac:	8f e6       	ldi	r24, 0x6F	; 111
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_string>
	ch=a[currx][curry][0];
	lcd_showvalue(ch);
    2bb4:	e0 91 fd 00 	lds	r30, 0x00FD
    2bb8:	f0 91 fe 00 	lds	r31, 0x00FE
    2bbc:	43 e0       	ldi	r20, 0x03	; 3
    2bbe:	ee 0f       	add	r30, r30
    2bc0:	ff 1f       	adc	r31, r31
    2bc2:	4a 95       	dec	r20
    2bc4:	e1 f7       	brne	.-8      	; 0x2bbe <main+0xbc>
    2bc6:	80 91 ff 00 	lds	r24, 0x00FF
    2bca:	90 91 00 01 	lds	r25, 0x0100
    2bce:	e8 0f       	add	r30, r24
    2bd0:	f9 1f       	adc	r31, r25
    2bd2:	33 e0       	ldi	r19, 0x03	; 3
    2bd4:	ee 0f       	add	r30, r30
    2bd6:	ff 1f       	adc	r31, r31
    2bd8:	3a 95       	dec	r19
    2bda:	e1 f7       	brne	.-8      	; 0x2bd4 <main+0xd2>
    2bdc:	ef 56       	subi	r30, 0x6F	; 111
    2bde:	fb 4f       	sbci	r31, 0xFB	; 251
    2be0:	80 81       	ld	r24, Z
    2be2:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_showvalue>
	//lcd_char(' ');
	
   
   inch();   
    2be6:	0e 94 e5 08 	call	0x11ca	; 0x11ca <inch>
   turn(c);
    2bea:	81 2f       	mov	r24, r17
    2bec:	0e 94 df 07 	call	0xfbe	; 0xfbe <turn>
	
	//if(!(PINA & (1<<1))||!(PINA & (1<<5)))  // flag = 0 as soon as it crosses the intersection
	//f2=0;
	
	if(c=='N')
    2bf0:	1e 34       	cpi	r17, 0x4E	; 78
    2bf2:	09 f0       	breq	.+2      	; 0x2bf6 <main+0xf4>
    2bf4:	a1 cf       	rjmp	.-190    	; 0x2b38 <main+0x36>
	break;
   
   }
   lcd_cmd(0x01);
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_cmd>

//conventionmatch();
simplify();
    2bfc:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <simplify>
    2c00:	8f ef       	ldi	r24, 0xFF	; 255
    2c02:	9f ef       	ldi	r25, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c04:	20 e9       	ldi	r18, 0x90	; 144
    2c06:	31 e0       	ldi	r19, 0x01	; 1
    2c08:	f9 01       	movw	r30, r18
    2c0a:	31 97       	sbiw	r30, 0x01	; 1
    2c0c:	f1 f7       	brne	.-4      	; 0x2c0a <main+0x108>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c0e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c10:	d9 f7       	brne	.-10     	; 0x2c08 <main+0x106>

_delay_ms(15000);

while(1)
{
      if ((PINA&(1<<6)) && (PINA&(1<<7)))
    2c12:	ce 9b       	sbis	0x19, 6	; 25
    2c14:	02 c0       	rjmp	.+4      	; 0x2c1a <main+0x118>
    2c16:	cf 99       	sbic	0x19, 7	; 25
    2c18:	08 c0       	rjmp	.+16     	; 0x2c2a <main+0x128>
	   
	   
	   break;
	  }
	  
	  if((!(PINA&(1<<6))) && (PINA&(1<<7)))
    2c1a:	ce 99       	sbic	0x19, 6	; 25
    2c1c:	02 c0       	rjmp	.+4      	; 0x2c22 <main+0x120>
    2c1e:	cf 99       	sbic	0x19, 7	; 25
    2c20:	04 c0       	rjmp	.+8      	; 0x2c2a <main+0x128>
	  
	   
	   break;
	  }
	  
		if((PINA&(1<<6)) && (!(PINA&(1<<7))))
    2c22:	ce 9b       	sbis	0x19, 6	; 25
    2c24:	f6 cf       	rjmp	.-20     	; 0x2c12 <main+0x110>
    2c26:	cf 99       	sbic	0x19, 7	; 25
    2c28:	f4 cf       	rjmp	.-24     	; 0x2c12 <main+0x110>
       
	   break;	
      }  
}
while(1)
final_show();
    2c2a:	0e 94 1f 12 	call	0x243e	; 0x243e <final_show>
    2c2e:	fd cf       	rjmp	.-6      	; 0x2c2a <main+0x128>

00002c30 <__vector_11>:


/////////timer INTERUPT,,midpoint count 32

ISR(TIMER0_OVF_vect)
{
    2c30:	1f 92       	push	r1
    2c32:	0f 92       	push	r0
    2c34:	0f b6       	in	r0, 0x3f	; 63
    2c36:	0f 92       	push	r0
    2c38:	11 24       	eor	r1, r1
    2c3a:	8f 93       	push	r24
    2c3c:	9f 93       	push	r25
time++;
    2c3e:	80 91 0f 01 	lds	r24, 0x010F
    2c42:	90 91 10 01 	lds	r25, 0x0110
    2c46:	01 96       	adiw	r24, 0x01	; 1
    2c48:	90 93 10 01 	sts	0x0110, r25
    2c4c:	80 93 0f 01 	sts	0x010F, r24
    2c50:	9f 91       	pop	r25
    2c52:	8f 91       	pop	r24
    2c54:	0f 90       	pop	r0
    2c56:	0f be       	out	0x3f, r0	; 63
    2c58:	0f 90       	pop	r0
    2c5a:	1f 90       	pop	r1
    2c5c:	18 95       	reti

00002c5e <__udivmodqi4>:
    2c5e:	99 1b       	sub	r25, r25
    2c60:	79 e0       	ldi	r23, 0x09	; 9
    2c62:	04 c0       	rjmp	.+8      	; 0x2c6c <__udivmodqi4_ep>

00002c64 <__udivmodqi4_loop>:
    2c64:	99 1f       	adc	r25, r25
    2c66:	96 17       	cp	r25, r22
    2c68:	08 f0       	brcs	.+2      	; 0x2c6c <__udivmodqi4_ep>
    2c6a:	96 1b       	sub	r25, r22

00002c6c <__udivmodqi4_ep>:
    2c6c:	88 1f       	adc	r24, r24
    2c6e:	7a 95       	dec	r23
    2c70:	c9 f7       	brne	.-14     	; 0x2c64 <__udivmodqi4_loop>
    2c72:	80 95       	com	r24
    2c74:	08 95       	ret

00002c76 <__divmodhi4>:
    2c76:	97 fb       	bst	r25, 7
    2c78:	09 2e       	mov	r0, r25
    2c7a:	07 26       	eor	r0, r23
    2c7c:	0a d0       	rcall	.+20     	; 0x2c92 <__divmodhi4_neg1>
    2c7e:	77 fd       	sbrc	r23, 7
    2c80:	04 d0       	rcall	.+8      	; 0x2c8a <__divmodhi4_neg2>
    2c82:	0c d0       	rcall	.+24     	; 0x2c9c <__udivmodhi4>
    2c84:	06 d0       	rcall	.+12     	; 0x2c92 <__divmodhi4_neg1>
    2c86:	00 20       	and	r0, r0
    2c88:	1a f4       	brpl	.+6      	; 0x2c90 <__divmodhi4_exit>

00002c8a <__divmodhi4_neg2>:
    2c8a:	70 95       	com	r23
    2c8c:	61 95       	neg	r22
    2c8e:	7f 4f       	sbci	r23, 0xFF	; 255

00002c90 <__divmodhi4_exit>:
    2c90:	08 95       	ret

00002c92 <__divmodhi4_neg1>:
    2c92:	f6 f7       	brtc	.-4      	; 0x2c90 <__divmodhi4_exit>
    2c94:	90 95       	com	r25
    2c96:	81 95       	neg	r24
    2c98:	9f 4f       	sbci	r25, 0xFF	; 255
    2c9a:	08 95       	ret

00002c9c <__udivmodhi4>:
    2c9c:	aa 1b       	sub	r26, r26
    2c9e:	bb 1b       	sub	r27, r27
    2ca0:	51 e1       	ldi	r21, 0x11	; 17
    2ca2:	07 c0       	rjmp	.+14     	; 0x2cb2 <__udivmodhi4_ep>

00002ca4 <__udivmodhi4_loop>:
    2ca4:	aa 1f       	adc	r26, r26
    2ca6:	bb 1f       	adc	r27, r27
    2ca8:	a6 17       	cp	r26, r22
    2caa:	b7 07       	cpc	r27, r23
    2cac:	10 f0       	brcs	.+4      	; 0x2cb2 <__udivmodhi4_ep>
    2cae:	a6 1b       	sub	r26, r22
    2cb0:	b7 0b       	sbc	r27, r23

00002cb2 <__udivmodhi4_ep>:
    2cb2:	88 1f       	adc	r24, r24
    2cb4:	99 1f       	adc	r25, r25
    2cb6:	5a 95       	dec	r21
    2cb8:	a9 f7       	brne	.-22     	; 0x2ca4 <__udivmodhi4_loop>
    2cba:	80 95       	com	r24
    2cbc:	90 95       	com	r25
    2cbe:	bc 01       	movw	r22, r24
    2cc0:	cd 01       	movw	r24, r26
    2cc2:	08 95       	ret

00002cc4 <_exit>:
    2cc4:	f8 94       	cli

00002cc6 <__stop_program>:
    2cc6:	ff cf       	rjmp	.-2      	; 0x2cc6 <__stop_program>
